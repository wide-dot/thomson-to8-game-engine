                      (/home/robin/githu):00001                 INCLUDE "./generated-code/scrollscreen/ObjectId.glb"
                      (./generated-code/):00001         * Generated Code
                      (./generated-code/):00002         
     0001             (./generated-code/):00003         ObjID_scrollA equ 1
     0002             (./generated-code/):00004         ObjID_scrollB equ 2
                      (/home/robin/githu):00002                 INCLUDE "./generated-code/Game.glb"
                      (./generated-code/):00001         * Generated Code
                      (./generated-code/):00002         
     0112             (./generated-code/):00003         Build_RAMLoaderManager equ $0112
     0000             (./generated-code/):00004         GmID_scrollscreen equ 0
     0000             (./generated-code/):00005         gmboot equ 0
                      (/home/robin/githu):00003         
     0001             (/home/robin/githu):00004         OverlayMode equ 1
     0001             (/home/robin/githu):00005         DEBUG EQU 1
                      (/home/robin/githu):00006         
                      (/home/robin/githu):00007                 INCLUDE "./global/global-preambule-includes.asm"
     0001             (./global/global-p):00001         DO_NOT_WAIT_VBL equ 1
     0001             (./global/global-p):00002         SOUND_CARD_PROTOTYPE equ 1
                      (./global/global-p):00003         
                      (./global/global-p):00004             INCLUDE "./engine/system/to8/memory-map.equ"
                      (./engine/system/t):00001         ; Thomson TO8 - Memory map
                      (./engine/system/t):00002         
                      (./engine/system/t):00003         ; mc6846
     E7C0             (./engine/system/t):00004         MC6846.CSR      equ $E7C0
     E7C1             (./engine/system/t):00005         MC6846.CRC      equ $E7C1
     E7C2             (./engine/system/t):00006         MC6846.DDRC     equ $E7C2
     E7C3             (./engine/system/t):00007         MC6846.PRC      equ $E7C3
     E7C4             (./engine/system/t):00008         MC6846.CSR2     equ $E7C4
     E7C5             (./engine/system/t):00009         MC6846.TCR      equ $E7C5 ; irq timer ctrl
     E7C6             (./engine/system/t):00010         MC6846.TMSB     equ $E7C6 ; irq timer MSB
     E7C7             (./engine/system/t):00011         MC6846.TLSB     equ $E7C7 ; irq timer LSB
                      (./engine/system/t):00012         
                      (./engine/system/t):00013         ; mc6821 system
     E7C8             (./engine/system/t):00014         MC6821.PRA      equ $E7C8
     E7C9             (./engine/system/t):00015         MC6821.PRB      equ $E7C9
     E7CA             (./engine/system/t):00016         MC6821.CRA      equ $E7CA
     E7CB             (./engine/system/t):00017         MC6821.CRB      equ $E7CB
                      (./engine/system/t):00018         
                      (./engine/system/t):00019         ; mc6821 music and game
     E7CC             (./engine/system/t):00020         MC6821.PRA1     equ $E7CC
     E7CD             (./engine/system/t):00021         MC6821.PRA2     equ $E7CD
     E7CE             (./engine/system/t):00022         MC6821.CRA1     equ $E7CE
     E7CF             (./engine/system/t):00023         MC6821.CRA2     equ $E7CF
                      (./engine/system/t):00024         
                      (./engine/system/t):00025         ; thmfc01 gate controler floppy disk
     E7D0             (./engine/system/t):00026         THMFC01.STAT0   equ $E7D0
     E7D0             (./engine/system/t):00027         THMFC01.CMD0    equ $E7D0
     E7D1             (./engine/system/t):00028         THMFC01.STAT1   equ $E7D1
     E7D1             (./engine/system/t):00029         THMFC01.CMD1    equ $E7D1
     E7D2             (./engine/system/t):00030         THMFC01.CMD2    equ $E7D2
     E7D3             (./engine/system/t):00031         THMFC01.WDATA   equ $E7D3
     E7D3             (./engine/system/t):00032         THMFC01.RDATA   equ $E7D3
     E7D4             (./engine/system/t):00033         THMFC01.WCLK    equ $E7D4
     E7D5             (./engine/system/t):00034         THMFC01.WSECT   equ $E7D5
     E7D6             (./engine/system/t):00035         THMFC01.TRCK    equ $E7D6
     E7D7             (./engine/system/t):00036         THMFC01.CELL    equ $E7D7
                      (./engine/system/t):00037         
                      (./engine/system/t):00038         ; ef9369 palette
     E7DA             (./engine/system/t):00039         EF9369.D        equ $E7DA
     E7DB             (./engine/system/t):00040         EF9369.A        equ $E7DB
                      (./engine/system/t):00041         
                      (./engine/system/t):00042         ; cf74021 gate array page mode - (TO8D: EFG2021FN)
     E7DC             (./engine/system/t):00043         CF74021.LGAMOD  equ $E7DC
     E7DD             (./engine/system/t):00044         CF74021.SYS2    equ $E7DD
     E7E4             (./engine/system/t):00045         CF74021.COM     equ $E7E4
     E7E5             (./engine/system/t):00046         CF74021.DATA    equ $E7E5
     E7E6             (./engine/system/t):00047         CF74021.CART    equ $E7E6
     E7E7             (./engine/system/t):00048         CF74021.SYS1    equ $E7E7
                      (./engine/system/t):00049         
                      (./engine/system/t):00050         ; extension port
     00E7             (./engine/system/t):00051         EXTPORT         equ $E7
     E7F0             (./engine/system/t):00052         IEEE488         equ $E7F0 ; to E7F7
     E7F2             (./engine/system/t):00053         EF5860.CTRL     equ $E7F2 ; MIDI
     E7F3             (./engine/system/t):00054         EF5860.TX       equ $E7F3 ; MIDI
                      (./engine/system/t):00055          ifndef SOUND_CARD_PROTOTYPE
0000                  (./engine/system/t):00056         YM2413.A        equ $E7FC
0000                  (./engine/system/t):00057         YM2413.D        equ $E7FD
0000                  (./engine/system/t):00058         SN76489.D       equ $E7F7
                      (./engine/system/t):00059          else
     E7FC             (./engine/system/t):00060         YM2413.A        equ $E7FC
     E7FD             (./engine/system/t):00061         YM2413.D        equ $E7FD
     E7FF             (./engine/system/t):00062         SN76489.D       equ $E7FF
                      (./engine/system/t):00063          endc
     E7FE             (./engine/system/t):00064         MEA8000.D       equ $E7FE
     E7FF             (./engine/system/t):00065         MEA8000.A       equ $E7FF
                      (./engine/system/t):00066         
                      (./engine/system/t):00067         ; ROM routines
     E806             (./engine/system/t):00068         GETC            equ $E806
     E809             (./engine/system/t):00069         KTST            equ $E809
     E82A             (./engine/system/t):00070         DKCO            equ $E82A ; read or write floppy disk routine
     E830             (./engine/system/t):00071         IRQ.EXIT        equ $E830 ; to exit an irq
                      (./engine/system/t):00072         
                      (./engine/system/t):00073         ; system variables
     6019             (./engine/system/t):00074         STATUS          equ $6019 ; status bitfield
     6048             (./engine/system/t):00075         DK.OPC          equ $6048 ; operation
     6049             (./engine/system/t):00076         DK.DRV          equ $6049 ; drive
     604C             (./engine/system/t):00077         DK.SEC          equ $604C ; sector
     604A             (./engine/system/t):00078         DK.TRK          equ $604A ; $604B ; track
     604E             (./engine/system/t):00079         DK.STA          equ $604E ; return status
     604F             (./engine/system/t):00080         DK.BUF          equ $604F ; $6050 ; data write location
     6023             (./engine/system/t):00081         FIRQPT          equ $6023 ; routine firq
     6027             (./engine/system/t):00082         TIMERPT         equ $6027 ; routine irq timer
     6081             (./engine/system/t):00083         CF74021.SYS1.R  equ $6081 ; reading value for CF74021.SYS1
                      (./engine/system/t):00084         
                      (./engine/system/t):00085         ; constants
     0035             (./engine/system/t):00086         EF5860.TXIRQON  equ %00110101 ; 8bits, no parity check, stop 1, tx interrupt
     0015             (./engine/system/t):00087         EF5860.TXIRQOFF equ %00010101 ; 8bits, no parity check, stop 1, no interrupt
     4DFF             (./engine/system/t):00088         IRQ.ONEFRAME    equ 312*64-1  ; one frame timer (lines*cycles_per_lines-1), timer launch at -1
                      (./engine/system/t):00089         
                      (./engine/system/t):00090         ; -----------------------------------------------------------------------------
                      (./engine/system/t):00091         
                      (./engine/system/t):00092         ; mapping to core routines
                      (./engine/system/t):00093         
     E7CD             (./engine/system/t):00094         CORE.DAC        equ MC6821.PRA2
     E7E6             (./engine/system/t):00095         CORE.RND        equ CF74021.CART
                      (./global/global-p):00005             INCLUDE "./engine/constants.asm"
                      (./engine/constant):00001         * ---------------------------------------------------------------------------
                      (./engine/constant):00002         * Constants
                      (./engine/constant):00003         *
                      (./engine/constant):00004         * Naming convention
                      (./engine/constant):00005         * -----------------
                      (./engine/constant):00006         * - lower case
                      (./engine/constant):00007         * - underscore-separated names
                      (./engine/constant):00008         *
                      (./engine/constant):00009         * ---------------------------------------------------------------------------
                      (./engine/constant):00010         
                      (./engine/constant):00011          ifndef CONSTANTS_ASM
     0001             (./engine/constant):00012         CONSTANTS_ASM equ 1
                      (./engine/constant):00013         
                      (./engine/constant):00014         * ===========================================================================
                      (./engine/constant):00015         * TO8 Registers
                      (./engine/constant):00016         * ===========================================================================
                      (./engine/constant):00017         
                      (./engine/constant):00018         ; Disk routine registers (ROM)
                      (./engine/constant):00019         
     6049             (./engine/constant):00020         dk_drive                      equ $6049
     604A             (./engine/constant):00021         dk_track                      equ $604A
     604B             (./engine/constant):00022         dk_track_lsb                  equ $604B
     604C             (./engine/constant):00023         dk_sector                     equ $604C
     604F             (./engine/constant):00024         dk_write_location             equ $604F
                      (./engine/constant):00025         
                      (./engine/constant):00026         * ===========================================================================
                      (./engine/constant):00027         * Globals
                      (./engine/constant):00028         * ===========================================================================
                      (./engine/constant):00029         
                      (./engine/constant):00030         ; WARNING - BuildSprite allow to cross $A000 limit by glb_camera_x_offset/4
                      (./engine/constant):00031         ; Graphics routines using S to write may cross by 12 bytes
                      (./engine/constant):00032         ; be sure to compile with enough margin here
     9FF4             (./engine/constant):00033         glb_ram_end                   equ $A000-12
                      (./engine/constant):00034         
                      (./engine/constant):00035         ; compilated sprite
     9FF2             (./engine/constant):00036         glb_register_s                equ glb_ram_end-2             ; reverved space to store S from ROM routines
                      (./engine/constant):00037         
                      (./engine/constant):00038         ; DrawSprites
     9FF0             (./engine/constant):00039         glb_screen_location_1         equ glb_register_s-2          ; start address for rendering of current sprite Part1     
     9FEE             (./engine/constant):00040         glb_screen_location_2         equ glb_screen_location_1-2   ; start address for rendering of current sprite Part2 (DEPENDENCY Must follow Part1)
                      (./engine/constant):00041         
     9FEC             (./engine/constant):00042         glb_camera_height             equ glb_screen_location_2-2
     9FEA             (./engine/constant):00043         glb_camera_width              equ glb_camera_height-2
     9FE8             (./engine/constant):00044         glb_camera_x_pos_coarse       equ glb_camera_width-2        ; ((glb_camera_x_pos - 64) / 64) * 64
     9FE6             (./engine/constant):00045         glb_camera_x_pos              equ glb_camera_x_pos_coarse-2 ; 16.8 camera x position in palyfield coordinates
     9FE5             (./engine/constant):00046         glb_camera_x_sub              equ glb_camera_x_pos-1        ; 
     9FE4             (./engine/constant):00047         glb_camera_y_pos              equ glb_camera_x_pos-2        ; 16.8 camera y position in palyfield coordinates
     9FE3             (./engine/constant):00048         glb_camera_y_sub              equ glb_camera_y_pos-1        ;
     9FE2             (./engine/constant):00049         glb_camera_x_min_pos          equ glb_camera_y_pos-2
     9FE0             (./engine/constant):00050         glb_camera_y_min_pos          equ glb_camera_x_min_pos-2
     9FDE             (./engine/constant):00051         glb_camera_x_max_pos          equ glb_camera_y_min_pos-2
     9FDC             (./engine/constant):00052         glb_camera_y_max_pos          equ glb_camera_x_max_pos-2
     9FDA             (./engine/constant):00053         glb_camera_x_offset           equ glb_camera_y_max_pos-2
     9FD8             (./engine/constant):00054         glb_camera_y_offset           equ glb_camera_x_offset-2
     9FD7             (./engine/constant):00055         glb_force_sprite_refresh      equ glb_camera_y_offset-1
     9FD6             (./engine/constant):00056         glb_camera_move               equ glb_force_sprite_refresh-1
     9FD5             (./engine/constant):00057         glb_alphaTiles                equ glb_camera_move-1
     9FD4             (./engine/constant):00058         glb_timer_second              equ glb_alphaTiles-1
     9FD3             (./engine/constant):00059         glb_timer_minute              equ glb_timer_second-1
     9FD3             (./engine/constant):00060         glb_timer                     equ glb_timer_minute
     9FD2             (./engine/constant):00061         glb_timer_frame               equ glb_timer-1
                      (./engine/constant):00062         
                      (./engine/constant):00063         ; BankSwitch
     9FD1             (./engine/constant):00064         glb_Page                      equ glb_timer_frame-1
     9FB3             (./engine/constant):00065         dp_engine                     equ glb_Page-30  ; engine routines tmp var space
     9F97             (./engine/constant):00066         dp_extreg                     equ dp_engine-28 ; extra register space (user and engine common)
     9F00             (./engine/constant):00067         dp                            equ $9F00        ; user space (149 bytes max)
     9F00             (./engine/constant):00068         glb_system_stack              equ dp
                      (./engine/constant):00069         
                      (./engine/constant):00070         ; generic direct page extra registers
                      (./engine/constant):00071         ; -----------------------------------
     9F97             (./engine/constant):00072         glb_d0   equ   dp_extreg
     9F98             (./engine/constant):00073         glb_d0_b equ   dp_extreg+1
                      (./engine/constant):00074         ; must be a free byte here for 24bits computation
     9F9A             (./engine/constant):00075         glb_d1   equ   dp_extreg+3
     9F9B             (./engine/constant):00076         glb_d1_b equ   dp_extreg+4
                      (./engine/constant):00077         ; must be a free byte here for 24bits computation
     9F9D             (./engine/constant):00078         glb_d2   equ   dp_extreg+6
     9F9E             (./engine/constant):00079         glb_d2_b equ   dp_extreg+7
                      (./engine/constant):00080         ; must be a free byte here for 24bits computation
     9FA0             (./engine/constant):00081         glb_d3   equ   dp_extreg+9
     9FA1             (./engine/constant):00082         glb_d3_b equ   dp_extreg+10
                      (./engine/constant):00083         ; must be a free byte here for 24bits computation
     9FA3             (./engine/constant):00084         glb_d4   equ   dp_extreg+12
     9FA4             (./engine/constant):00085         glb_d4_b equ   dp_extreg+13
     9FA5             (./engine/constant):00086         glb_d5   equ   dp_extreg+14
     9FA6             (./engine/constant):00087         glb_d5_b equ   dp_extreg+15
     9FA7             (./engine/constant):00088         glb_d6   equ   dp_extreg+16
     9FA8             (./engine/constant):00089         glb_d6_b equ   dp_extreg+17
     9FA9             (./engine/constant):00090         glb_a0   equ   dp_extreg+18
     9FAA             (./engine/constant):00091         glb_a0_b equ   dp_extreg+19
     9FAB             (./engine/constant):00092         glb_a1   equ   dp_extreg+20
     9FAC             (./engine/constant):00093         glb_a1_b equ   dp_extreg+21
     9FAD             (./engine/constant):00094         glb_a2   equ   dp_extreg+22
     9FAE             (./engine/constant):00095         glb_a2_b equ   dp_extreg+23
     9FAF             (./engine/constant):00096         glb_a3   equ   dp_extreg+24
     9FB0             (./engine/constant):00097         glb_a3_b equ   dp_extreg+25
     9FB1             (./engine/constant):00098         glb_a4   equ   dp_extreg+26
     9FB2             (./engine/constant):00099         glb_a4_b equ   dp_extreg+27
                      (./engine/constant):00100         
                      (./engine/constant):00101         * ===========================================================================
                      (./engine/constant):00102         * Display Constants
                      (./engine/constant):00103         * ===========================================================================
                      (./engine/constant):00104         
     00A0             (./engine/constant):00105         screen_width                  equ 160             ; in pixel
     00C8             (./engine/constant):00106         screen_height                 equ 200             ; in pixel
     001C             (./engine/constant):00107         screen_top                    equ (256-200)/2     ; in pixel
     00E3             (./engine/constant):00108         screen_bottom                 equ screen_top+199  ; in pixel
     0030             (./engine/constant):00109         screen_left                   equ (256-160)/2     ; in pixel
     00CF             (./engine/constant):00110         screen_right                  equ screen_left+159 ; in pixel
     0008             (./engine/constant):00111         nb_priority_levels            equ 8               ; number of priority levels (need code change if modified)
                      (./engine/constant):00112         
                      (./engine/constant):00113         * ===========================================================================
                      (./engine/constant):00114         * Images Constants
                      (./engine/constant):00115         * ===========================================================================
                      (./engine/constant):00116         
     0004             (./engine/constant):00117         image_x_size                  equ 4
     0005             (./engine/constant):00118         image_y_size                  equ 5
     0006             (./engine/constant):00119         image_center_offset           equ 6
                      (./engine/constant):00120         
     0004             (./engine/constant):00121         image_subset_x1_offset        equ 4
     0005             (./engine/constant):00122         image_subset_y1_offset        equ 5
                      (./engine/constant):00123         
     0000             (./engine/constant):00124         page_draw_routine             equ 0
     0001             (./engine/constant):00125         draw_routine                  equ 1
     0003             (./engine/constant):00126         page_erase_routine            equ 3
     0004             (./engine/constant):00127         erase_routine                 equ 4
     0006             (./engine/constant):00128         erase_nb_cell                 equ 6
                      (./engine/constant):00129         
                      (./engine/constant):00130         * ===========================================================================
                      (./engine/constant):00131         * Sound Constants
                      (./engine/constant):00132         * ===========================================================================
                      (./engine/constant):00133         
     0000             (./engine/constant):00134         sound_page        equ 0
     0001             (./engine/constant):00135         sound_start_addr  equ 1
     0003             (./engine/constant):00136         sound_end_addr    equ 3
     0005             (./engine/constant):00137         sound_meta_size   equ 5
                      (./engine/constant):00138         
                      (./engine/constant):00139         * ===========================================================================
                      (./engine/constant):00140         * Object Constants
                      (./engine/constant):00141         * ===========================================================================
                      (./engine/constant):00142         
                      (./engine/constant):00143         ; ext_variables_size should be declared in game source code
                      (./engine/constant):00144         
     0026             (./engine/constant):00145         object_base_size              equ 38  ; the size of an object without rsvd and ext_vars
                      (./engine/constant):00146          ifndef OverlayMode
0000                  (./engine/constant):00147         object_rsvd_size              equ 59
                      (./engine/constant):00148          else
     0005             (./engine/constant):00149         object_rsvd_size              equ 5
                      (./engine/constant):00150          endc
                      (./engine/constant):00151         
     003A             (./engine/constant):00152         object_rsvd                   equ object_base_size+ext_variables_size
     003F             (./engine/constant):00153         object_size                   equ object_base_size+ext_variables_size+object_rsvd_size ; the size of a dynamic object
     003F             (./engine/constant):00154         next_object                   equ object_size
     0026             (./engine/constant):00155         ext_variables                 equ object_base_size ; start of reserved space for additionnal variables
                      (./engine/constant):00156         
     0000             (./engine/constant):00157         id                            equ 0   ; reference to object model id (ObjID_) (0: free slot)
     0001             (./engine/constant):00158         subtype                       equ 1   ; reference to object subtype (Sub_) DEPENDENCY subtype must follow id
     0001             (./engine/constant):00159         subtype_w                     equ 1   ; reference to object subtype (Sub_) takes 2 bytes and overlap render_flags DEPENDENCY subtype must follow id
     0002             (./engine/constant):00160         render_flags                  equ 2
     0003             (./engine/constant):00161         run_object_prev               equ 3   ; previous object to update when deleting current object
     0005             (./engine/constant):00162         run_object_next               equ 5   ; next object to run by RunObjects
                      (./engine/constant):00163         
                      (./engine/constant):00164          ifndef OverlayMode
                      (./engine/constant):00165         * --- render_flags bitfield variables --- background erase pack
0000                  (./engine/constant):00166         render_xmirror_mask           equ $01 ; (bit 0) DEPENDENCY should be bit 0 - tell display engine to mirror sprite on horizontal axis
0000                  (./engine/constant):00167         render_ymirror_mask           equ $02 ; (bit 1) DEPENDENCY should be bit 1 - tell display engine to mirror sprite on vertical axis
0000                  (./engine/constant):00168         render_overlay_mask           equ $04 ; (bit 2) DEPENDENCY should be bit 2 - compilated sprite with no background save
0000                  (./engine/constant):00169         render_playfieldcoord_mask    equ $08 ; (bit 3) tell display engine to use playfield (1) or screen (0) coordinates
0000                  (./engine/constant):00170         render_xloop_mask             equ $10 ; (bit 4) (in screen coordinate) tell display engine to hide sprite when x is out of screen (0) or to display (1)  
0000                  (./engine/constant):00171         render_todelete_mask          equ $20 ; (bit 5) tell display engine to delete sprite and clear OST for this object
0000                  (./engine/constant):00172         render_subobjects_mask        equ $40 ; (bit 6) tell display engine to render subobjects for this object
0000                  (./engine/constant):00173         render_hide_mask              equ $80 ; (bit 7) tell display engine to hide sprite (keep priority and mapping_frame)
                      (./engine/constant):00174          else
                      (./engine/constant):00175         ; --- render_flags bitfield variables --- overlay pack
     0001             (./engine/constant):00176         render_xmirror_mask           equ $01 ; (bit 0) DEPENDENCY should be bit 0 - tell display engine to mirror sprite on horizontal axis
     0002             (./engine/constant):00177         render_ymirror_mask           equ $02 ; (bit 1) DEPENDENCY should be bit 1 - tell display engine to mirror sprite on vertical axis
                      (./engine/constant):00178         
     0008             (./engine/constant):00179         render_playfieldcoord_mask    equ $08 ; (bit 3) tell display engine to use playfield (1) or screen (0) coordinates
     0010             (./engine/constant):00180         render_xloop_mask             equ $10 ; (bit 4) (in screen coordinate) tell display engine to hide sprite when x is out of screen (0) or to display (1)  
     0020             (./engine/constant):00181         render_no_range_ctrl_mask     equ $20 ; (bit 5) tell display engine to skip out of range controls (this may lead to memory corruption BEWARE)
     0040             (./engine/constant):00182         render_subobjects_mask        equ $40 ; (bit 6) tell display engine to render subobjects for this object
     0080             (./engine/constant):00183         render_hide_mask              equ $80 ; (bit 7) tell display engine to hide sprite (keep priority and mapping_frame)
                      (./engine/constant):00184          endc
                      (./engine/constant):00185         
     0007             (./engine/constant):00186         priority                      equ 7           ; display priority (0: nothing to display, 1:front, ..., 8:back)
     0008             (./engine/constant):00187         anim                          equ 8  ; and 9  ; reference to current animation (Ani_)
     000A             (./engine/constant):00188         prev_anim                     equ 10 ; and 11 ; reference to previous animation (Ani_)
     000A             (./engine/constant):00189         sub_anim                      equ 10 ; and 11 ; reference to sub animation
     000C             (./engine/constant):00190         anim_frame                    equ 12          ; index of current frame in animation
     000D             (./engine/constant):00191         anim_frame_duration           equ 13          ; number of frames for each image in animation, range: 00-7F (0-127), 0 means display only during one frame
     000E             (./engine/constant):00192         anim_flags                    equ 14          ; byte offset to reference an anim_flags LUT (adv) / store a link flag (non adv)
                      (./engine/constant):00193         
                      (./engine/constant):00194         * --- anim_flags bitfield variables ---
     0001             (./engine/constant):00195         anim_link_mask                equ $01 ; (bit 0) if set, allow the load of a new animation without reseting anim_frame and anim_frame_duration
                      (./engine/constant):00196         
     000E             (./engine/constant):00197         status_flags                  equ 14          ; orientation of sprite, is applied to animation xmirror flag during AnimateSprite
                      (./engine/constant):00198         
                      (./engine/constant):00199         * --- status_flags bitfield variables ---
     0001             (./engine/constant):00200         status_xflip_mask             equ $01 ; (bit 0) X Flip
     0002             (./engine/constant):00201         status_yflip_mask             equ $02 ; (bit 1) Y Flip
                      (./engine/constant):00202         
     0010             (./engine/constant):00203         image_set                     equ 16 ; and 17 ; reference to current image (Img_) (0000 if no image)
     0012             (./engine/constant):00204         x_pos                         equ 18 ; and 19 ; x playfield coordinate
     0014             (./engine/constant):00205         x_sub                         equ 20          ; x subpixel (1/256 of a pixel), must follow x_pos in data structure
     0015             (./engine/constant):00206         y_pos                         equ 21 ; and 22 ; y playfield coordinate
     0017             (./engine/constant):00207         y_sub                         equ 23          ; y subpixel (1/256 of a pixel), must follow y_pos in data structure
     0018             (./engine/constant):00208         xy_pixel                      equ 24          ; x and y screen coordinate
     0018             (./engine/constant):00209         x_pixel                       equ 24          ; x screen coordinate
     0019             (./engine/constant):00210         y_pixel                       equ 25          ; y screen coordinate, must follow x_pixel
     001A             (./engine/constant):00211         x_vel                         equ 26 ; and 27 ; s8.8 horizontal velocity
     001C             (./engine/constant):00212         y_vel                         equ 28 ; and 29 ; s8.8 vertical velocity
     001E             (./engine/constant):00213         x_acl                         equ 30 ; and 31 ; s8.8 horizontal gravity
     0020             (./engine/constant):00214         y_acl                         equ 32 ; and 33 ; s8.8 vertical gravity
     0022             (./engine/constant):00215         routine                       equ 34          ; index of current object routine
     0023             (./engine/constant):00216         routine_secondary             equ 35          ; index of current secondary routine
     0024             (./engine/constant):00217         routine_tertiary              equ 36          ; index of current tertiary routine
     0025             (./engine/constant):00218         routine_quaternary            equ 37          ; index of current quaternary routine
                      (./engine/constant):00219         
                      (./engine/constant):00220          ifndef OverlayMode
                      (./engine/constant):00221         * ---------------------------------------------------------------------------
                      (./engine/constant):00222         * reserved variables (read/write by engine)
                      (./engine/constant):00223         
0000                  (./engine/constant):00224         rsv_render_flags              equ object_rsvd
                      (./engine/constant):00225         
                      (./engine/constant):00226         * --- rsv_render_flags bitfield variables ---
0000                  (./engine/constant):00227         rsv_render_checkrefresh_mask  equ $01 ; (bit 0) if erasesprite and display sprite flag are processed for this frame
0000                  (./engine/constant):00228         rsv_render_erasesprite_mask   equ $02 ; (bit 1) if a sprite need to be cleared on screen
0000                  (./engine/constant):00229         rsv_render_displaysprite_mask equ $04 ; (bit 2) if a sprite need to be rendered on screen
0000                  (./engine/constant):00230         rsv_render_outofrange_mask    equ $08 ; (bit 3) if a sprite is out of range for full rendering in screen
0000                  (./engine/constant):00231         rsv_render_onscreen_mask      equ $80 ; (bit 7) DEPENDENCY should be bit 7 - has been rendered on last screen buffer (may be 0 or 1)
                      (./engine/constant):00232         
0000                  (./engine/constant):00233         rsv_prev_anim                 equ object_rsvd+1 ; and +2 ; reference to previous animation (Ani_) w * UTILE ?
0000                  (./engine/constant):00234         rsv_image_center_offset       equ object_rsvd+3 ; 0 or 1 offset that indicate if image center is even or odd (DRS_XYToAddress)
0000                  (./engine/constant):00235         rsv_image_subset              equ object_rsvd+4 ; and +5 ; reference to current image regarding mirror flags w
0000                  (./engine/constant):00236         rsv_mapping_frame             equ object_rsvd+6 ; and +7 ; reference to current image regarding mirror flags, overlay flag and x precision w
0000                  (./engine/constant):00237         rsv_erase_nb_cell             equ object_rsvd+8 ; b 
0000                  (./engine/constant):00238         rsv_page_draw_routine         equ object_rsvd+9 ; b
0000                  (./engine/constant):00239         rsv_draw_routine              equ object_rsvd+10 ; and +11 ; w
0000                  (./engine/constant):00240         rsv_page_erase_routine        equ object_rsvd+12 ; b
0000                  (./engine/constant):00241         rsv_erase_routine             equ object_rsvd+13 ; and +14 ; w 
0000                  (./engine/constant):00242         rsv_xy1_pixel                 equ object_rsvd+15 ;
0000                  (./engine/constant):00243         rsv_x1_pixel                  equ object_rsvd+15 ; x+x_offset-(x_size/2) screen coordinate
0000                  (./engine/constant):00244         rsv_y1_pixel                  equ object_rsvd+16 ; y+y_offset-(y_size/2) screen coordinate, must follow rsv_x1_pixel
0000                  (./engine/constant):00245         rsv_xy2_pixel                 equ object_rsvd+17 ;
0000                  (./engine/constant):00246         rsv_x2_pixel                  equ object_rsvd+17 ; x+x_offset+(x_size/2) screen coordinate
0000                  (./engine/constant):00247         rsv_y2_pixel                  equ object_rsvd+18 ; y+y_offset+(y_size/2) screen coordinate, must follow rsv_x2_pixel
                      (./engine/constant):00248         
                      (./engine/constant):00249         * ---------------------------------------------------------------------------
                      (./engine/constant):00250         * reserved variables (engine) - buffer specific
                      (./engine/constant):00251         
0000                  (./engine/constant):00252         rsv_buffer_0                  equ object_rsvd+19 ; Start index of buffer 0 variables
0000                  (./engine/constant):00253         rsv_priority_0                equ object_rsvd+19 ; internal value that hold priority in video buffer 0
0000                  (./engine/constant):00254         rsv_priority_prev_obj_0       equ object_rsvd+20 ; and +21 ; previous object (OST address) in display priority list for video buffer 0 (0000 if none) w
0000                  (./engine/constant):00255         rsv_priority_next_obj_0       equ object_rsvd+22 ; and +23 ; next object (OST address) in display priority list for video buffer 0 (0000 if none) w
0000                  (./engine/constant):00256         rsv_prev_mapping_frame_0      equ object_rsvd+24 ; and +25 ; reference to previous image in video buffer 0 w
0000                  (./engine/constant):00257         rsv_prev_erase_nb_cell_0      equ object_rsvd+26 : b
0000                  (./engine/constant):00258         rsv_prev_page_erase_routine_0 equ object_rsvd+27 ; b
0000                  (./engine/constant):00259         rsv_prev_erase_routine_0      equ object_rsvd+28 ; and +29 ; w
0000                  (./engine/constant):00260         rsv_bgdata_0                  equ object_rsvd+30 ; and +31 ; address of background data in screen 0 w
0000                  (./engine/constant):00261         rsv_prev_xy_pixel_0           equ object_rsvd+32 ;
0000                  (./engine/constant):00262         rsv_prev_x_pixel_0            equ object_rsvd+32 ; previous x screen coordinate b
0000                  (./engine/constant):00263         rsv_prev_y_pixel_0            equ object_rsvd+33 ; previous y screen coordinate b, must follow x_pixel
0000                  (./engine/constant):00264         rsv_prev_xy1_pixel_0          equ object_rsvd+34 ;
0000                  (./engine/constant):00265         rsv_prev_x1_pixel_0           equ object_rsvd+34 ; previous x+x_offset-(x_size/2) screen coordinate b
0000                  (./engine/constant):00266         rsv_prev_y1_pixel_0           equ object_rsvd+35 ; previous y+y_offset-(y_size/2) screen coordinate b, must follow x1_pixel
0000                  (./engine/constant):00267         rsv_prev_xy2_pixel_0          equ object_rsvd+36 ;
0000                  (./engine/constant):00268         rsv_prev_x2_pixel_0           equ object_rsvd+36 ; previous x+x_offset+(x_size/2) screen coordinate b
0000                  (./engine/constant):00269         rsv_prev_y2_pixel_0           equ object_rsvd+37 ; previous y+y_offset+(y_size/2) screen coordinate b, must follow x2_pixel
0000                  (./engine/constant):00270         rsv_prev_render_flags_0       equ object_rsvd+38 ;
                      (./engine/constant):00271         * --- rsv_prev_render_flags_0 bitfield variables ---
0000                  (./engine/constant):00272         rsv_prev_render_overlay_mask  equ $01 ; (bit 0) if a sprite has been rendered with compilated sprite and no background save on screen buffer 0/1
0000                  (./engine/constant):00273         rsv_prev_render_onscreen_mask equ $80 ; (bit 7) DEPENDENCY should be bit 7 - has been rendered on screen buffer 0/1
                      (./engine/constant):00274         
0000                  (./engine/constant):00275         rsv_buffer_1                  equ object_rsvd+39 ; Start index of buffer 1 variables
0000                  (./engine/constant):00276         rsv_priority_1                equ object_rsvd+39 ; internal value that hold priority in video buffer 1
0000                  (./engine/constant):00277         rsv_priority_prev_obj_1       equ object_rsvd+40 ; and +41 ; previous object (OST address) in display priority list for video buffer 1 (0000 if none) w
0000                  (./engine/constant):00278         rsv_priority_next_obj_1       equ object_rsvd+42 ; and +43 ; next object (OST address) in display priority list for video buffer 1 (0000 if none) w
0000                  (./engine/constant):00279         rsv_prev_mapping_frame_1      equ object_rsvd+44 ; and +45 ; reference to previous image in video buffer 1 w
0000                  (./engine/constant):00280         rsv_prev_erase_nb_cell_1      equ object_rsvd+46 ; b
0000                  (./engine/constant):00281         rsv_prev_page_erase_routine_1 equ object_rsvd+47 ; b
0000                  (./engine/constant):00282         rsv_prev_erase_routine_1      equ object_rsvd+48 ; and +49 ; w
0000                  (./engine/constant):00283         rsv_bgdata_1                  equ object_rsvd+50 ; and +51 ; address of background data in screen 1 w
0000                  (./engine/constant):00284         rsv_prev_xy_pixel_1           equ object_rsvd+52 ;
0000                  (./engine/constant):00285         rsv_prev_x_pixel_1            equ object_rsvd+52 ; previous x screen coordinate b
0000                  (./engine/constant):00286         rsv_prev_y_pixel_1            equ object_rsvd+53 ; previous y screen coordinate b, must follow x_pixel
0000                  (./engine/constant):00287         rsv_prev_xy1_pixel_1          equ object_rsvd+54 ;
0000                  (./engine/constant):00288         rsv_prev_x1_pixel_1           equ object_rsvd+54 ; previous x+x_size screen coordinate b
0000                  (./engine/constant):00289         rsv_prev_y1_pixel_1           equ object_rsvd+55 ; previous y+y_size screen coordinate b, must follow x_pixel
0000                  (./engine/constant):00290         rsv_prev_xy2_pixel_1          equ object_rsvd+56 ;
0000                  (./engine/constant):00291         rsv_prev_x2_pixel_1           equ object_rsvd+56 ; previous x+x_size screen coordinate b
0000                  (./engine/constant):00292         rsv_prev_y2_pixel_1           equ object_rsvd+57 ; previous y+y_size screen coordinate b, must follow x_pixel
0000                  (./engine/constant):00293         rsv_prev_render_flags_1       equ object_rsvd+58 ;
                      (./engine/constant):00294         
0000                  (./engine/constant):00295         buf_priority                  equ 0  ; offset for each rsv_buffer variables
0000                  (./engine/constant):00296         buf_priority_prev_obj         equ 1  ;
0000                  (./engine/constant):00297         buf_priority_next_obj         equ 3  ;
0000                  (./engine/constant):00298         buf_prev_mapping_frame        equ 5  ;
0000                  (./engine/constant):00299         buf_erase_nb_cell             equ 7  ;
0000                  (./engine/constant):00300         buf_page_erase_routine        equ 8 ;
0000                  (./engine/constant):00301         buf_erase_routine             equ 9 ;
0000                  (./engine/constant):00302         buf_bgdata                    equ 11 ;
0000                  (./engine/constant):00303         buf_prev_xy_pixel             equ 13 ;
0000                  (./engine/constant):00304         buf_prev_x_pixel              equ 13 ;
0000                  (./engine/constant):00305         buf_prev_y_pixel              equ 14 ;
0000                  (./engine/constant):00306         buf_prev_xy1_pixel            equ 15 ;
0000                  (./engine/constant):00307         buf_prev_x1_pixel             equ 15 ;
0000                  (./engine/constant):00308         buf_prev_y1_pixel             equ 16 ;
0000                  (./engine/constant):00309         buf_prev_xy2_pixel            equ 17 ;
0000                  (./engine/constant):00310         buf_prev_x2_pixel             equ 17 ;
0000                  (./engine/constant):00311         buf_prev_y2_pixel             equ 18 ;
0000                  (./engine/constant):00312         buf_prev_render_flags         equ 19 ;
                      (./engine/constant):00313          else
                      (./engine/constant):00314         * ---------------------------------------------------------------------------
                      (./engine/constant):00315         * reserved variables (engine) - buffer specific - overlay pack
                      (./engine/constant):00316         
     003A             (./engine/constant):00317         rsv_priority                  equ object_rsvd   ; internal value that hold priority in video buffer 0
     003B             (./engine/constant):00318         rsv_priority_prev_obj         equ object_rsvd+1 ; and +2 ; previous object (OST address) in display priority list for video buffer 0 (0000 if none) w
     003D             (./engine/constant):00319         rsv_priority_next_obj         equ object_rsvd+3 ; and +4 ; next object (OST address) in display priority list for video buffer 0 (0000 if none) w
                      (./engine/constant):00320         
                      (./engine/constant):00321         ; ---------------------------------------------------------------------------
                      (./engine/constant):00322         ; when childsprites are activated (i.e. bit #6 of render_flags set)
                      (./engine/constant):00323         ; object_base_size+ext_variables_size should cover at least 7+56 bytes 
                      (./engine/constant):00324         ; subtype is recovered
     0001             (./engine/constant):00325         mainspr_childsprites    equ   subtype         ; amount of child sprites
     0007             (./engine/constant):00326         mainspr_width           equ   run_object_next+2
     0008             (./engine/constant):00327         mainspr_height          equ   run_object_next+3
     0009             (./engine/constant):00328         mainspr_x_pos           equ   mainspr_height+1
     000B             (./engine/constant):00329         mainspr_y_pos           equ   mainspr_height+3
     000D             (./engine/constant):00330         mainspr_mapframe        equ   mainspr_height+5
     000F             (./engine/constant):00331         sub2_x_pos              equ   mainspr_x_pos+6
     0011             (./engine/constant):00332         sub2_y_pos              equ   mainspr_y_pos+6
     0013             (./engine/constant):00333         sub2_mapframe           equ   mainspr_mapframe+6
     0015             (./engine/constant):00334         sub3_x_pos              equ   sub2_x_pos+6
     0017             (./engine/constant):00335         sub3_y_pos              equ   sub2_y_pos+6
     0019             (./engine/constant):00336         sub3_mapframe           equ   sub2_mapframe+6
     001B             (./engine/constant):00337         sub4_x_pos              equ   sub3_x_pos+6
     001D             (./engine/constant):00338         sub4_y_pos              equ   sub3_y_pos+6
     001F             (./engine/constant):00339         sub4_mapframe           equ   sub3_mapframe+6
     0021             (./engine/constant):00340         sub5_x_pos              equ   sub4_x_pos+6
     0023             (./engine/constant):00341         sub5_y_pos              equ   sub4_y_pos+6
     0025             (./engine/constant):00342         sub5_mapframe           equ   sub4_mapframe+6
     0027             (./engine/constant):00343         sub6_x_pos              equ   sub5_x_pos+6
     0029             (./engine/constant):00344         sub6_y_pos              equ   sub5_y_pos+6
     002B             (./engine/constant):00345         sub6_mapframe           equ   sub5_mapframe+6
     002D             (./engine/constant):00346         sub7_x_pos              equ   sub6_x_pos+6
     002F             (./engine/constant):00347         sub7_y_pos              equ   sub6_y_pos+6
     0031             (./engine/constant):00348         sub7_mapframe           equ   sub6_mapframe+6
     0033             (./engine/constant):00349         sub8_x_pos              equ   sub7_x_pos+6
     0035             (./engine/constant):00350         sub8_y_pos              equ   sub7_y_pos+6
     0037             (./engine/constant):00351         sub8_mapframe           equ   sub7_mapframe+6
     0039             (./engine/constant):00352         sub9_x_pos              equ   sub8_x_pos+6
     003B             (./engine/constant):00353         sub9_y_pos              equ   sub8_y_pos+6
     003D             (./engine/constant):00354         sub9_mapframe           equ   sub8_mapframe+6
     0006             (./engine/constant):00355         next_subspr             equ   6 ; size of a subsprite data
                      (./engine/constant):00356          endc
                      (./engine/constant):00357          endc
                      (./global/global-p):00006             INCLUDE "./engine/macros.asm"
0000                  (./engine/macros.a):00001         _ldd MACRO
                      (./engine/macros.a):00002                 ldd   #((\1)*256)+\2
                      (./engine/macros.a):00003          ENDM
                      (./engine/macros.a):00004          
0000                  (./engine/macros.a):00005         _ldx MACRO
                      (./engine/macros.a):00006                 ldx   #((\1)*256)+\2
                      (./engine/macros.a):00007          ENDM
                      (./engine/macros.a):00008          
0000                  (./engine/macros.a):00009         _ldy MACRO
                      (./engine/macros.a):00010                 ldy   #((\1)*256)+\2
                      (./engine/macros.a):00011          ENDM
                      (./engine/macros.a):00012          
0000                  (./engine/macros.a):00013         _ldu MACRO
                      (./engine/macros.a):00014                 ldu   #((\1)*256)+\2
                      (./engine/macros.a):00015          ENDM  
                      (./engine/macros.a):00016          
0000                  (./engine/macros.a):00017         _lds MACRO
                      (./engine/macros.a):00018                 lds   #((\1)*256)+\2
                      (./engine/macros.a):00019          ENDM   
                      (./engine/macros.a):00020          
0000                  (./engine/macros.a):00021         _SetCartPageA MACRO
                      (./engine/macros.a):00022          IFDEF T2
                      (./engine/macros.a):00023                 jsr   SetCartPageA
                      (./engine/macros.a):00024          ELSE
                      (./engine/macros.a):00025                 sta   $E7E6                    ; selection de la page RAM en zone cartouche
                      (./engine/macros.a):00026          ENDC
                      (./engine/macros.a):00027          ENDM      
                      (./engine/macros.a):00028          
0000                  (./engine/macros.a):00029         _GetCartPageA MACRO
                      (./engine/macros.a):00030          IFDEF T2
                      (./engine/macros.a):00031                 jsr   GetCartPageA
                      (./engine/macros.a):00032          ELSE
                      (./engine/macros.a):00033                 lda   $E7E6
                      (./engine/macros.a):00034          ENDC
                      (./engine/macros.a):00035          ENDM
                      (./engine/macros.a):00036         
0000                  (./engine/macros.a):00037         _SetCartPageB MACRO
                      (./engine/macros.a):00038          IFDEF T2
                      (./engine/macros.a):00039                 jsr   SetCartPageB
                      (./engine/macros.a):00040          ELSE
                      (./engine/macros.a):00041                 stb   $E7E6                    ; selection de la page RAM en zone cartouche
                      (./engine/macros.a):00042          ENDC
                      (./engine/macros.a):00043          ENDM      
                      (./engine/macros.a):00044          
0000                  (./engine/macros.a):00045         _GetCartPageB MACRO
                      (./engine/macros.a):00046          IFDEF T2
                      (./engine/macros.a):00047                 jsr   GetCartPageB
                      (./engine/macros.a):00048          ELSE
                      (./engine/macros.a):00049                 ldb   $E7E6
                      (./engine/macros.a):00050          ENDC
                      (./engine/macros.a):00051          ENDM     
                      (./engine/macros.a):00052         
0000                  (./engine/macros.a):00053         _RunObjectSwap MACRO
                      (./engine/macros.a):00054                 ; param 1 : ObjID_
                      (./engine/macros.a):00055                 ; param 2 : Object data RAM address
                      (./engine/macros.a):00056                 ; manual launch of an object from a different dynamic memory page and not from the resident page 1
                      (./engine/macros.a):00057                 lda   Obj_Index_Page+\1
                      (./engine/macros.a):00058                 sta   PSR_Page   
                      (./engine/macros.a):00059                 ldd   Obj_Index_Address+2*\1
                      (./engine/macros.a):00060                 std   PSR_Address       
                      (./engine/macros.a):00061                 ldu   \2             
                      (./engine/macros.a):00062                 jsr   RunPgSubRoutine
                      (./engine/macros.a):00063          ENDM    
                      (./engine/macros.a):00064         
0000                  (./engine/macros.a):00065         _RunObjectSwapRoutine MACRO
                      (./engine/macros.a):00066                 ; param 1 : ObjID_
                      (./engine/macros.a):00067                 ; param 2 : Object routine
                      (./engine/macros.a):00068                 ; manual launch of an object from a different dynamic memory page and not from the resident page 1
                      (./engine/macros.a):00069                 lda   Obj_Index_Page+\1   
                      (./engine/macros.a):00070                 sta   PSR_Page   
                      (./engine/macros.a):00071                 ldd   Obj_Index_Address+2*\1
                      (./engine/macros.a):00072                 std   PSR_Address       
                      (./engine/macros.a):00073                 ldb   \2        
                      (./engine/macros.a):00074                 jsr   RunPgSubRoutine
                      (./engine/macros.a):00075          ENDM 
                      (./engine/macros.a):00076          
0000                  (./engine/macros.a):00077         _MountObject MACRO 
                      (./engine/macros.a):00078                 ; param 1 : ObjID_
                      (./engine/macros.a):00079                 ; manual mount of an object from the resident page 1
                      (./engine/macros.a):00080                 lda   Obj_Index_Page+\1
                      (./engine/macros.a):00081                 _SetCartPageA
                      (./engine/macros.a):00082                 ldx   Obj_Index_Address+2*\1
                      (./engine/macros.a):00083          ENDM
                      (./engine/macros.a):00084         
0000                  (./engine/macros.a):00085         _RunObject MACRO 
                      (./engine/macros.a):00086                 ; param 1 : ObjID_
                      (./engine/macros.a):00087                 ; param 2 : Object data RAM address
                      (./engine/macros.a):00088                 ; manual launch of an object from the resident page 1
                      (./engine/macros.a):00089                 _MountObject \1
                      (./engine/macros.a):00090                 ldu   \2        
                      (./engine/macros.a):00091                 jsr   ,x
                      (./engine/macros.a):00092          ENDM
                      (./engine/macros.a):00093         
0000                  (./engine/macros.a):00094         _RunObjectRoutineA MACRO 
                      (./engine/macros.a):00095                 ; param 1 : ObjID_
                      (./engine/macros.a):00096                 ; param 2 : Object routine
                      (./engine/macros.a):00097                 ; manual launch of an object from the resident page 1
                      (./engine/macros.a):00098                 ; this object does not need or have a data structure for this routine
                      (./engine/macros.a):00099                 _MountObject \1
                      (./engine/macros.a):00100                 lda   \2        
                      (./engine/macros.a):00101                 jsr   ,x
                      (./engine/macros.a):00102          ENDM
                      (./engine/macros.a):00103         
0000                  (./engine/macros.a):00104         _RunObjectRoutineB MACRO 
                      (./engine/macros.a):00105                 ; param 1 : ObjID_
                      (./engine/macros.a):00106                 ; param 2 : Object routine
                      (./engine/macros.a):00107                 ; manual launch of an object from the resident page 1
                      (./engine/macros.a):00108                 ; this object does not need or have a data structure for this routine
                      (./engine/macros.a):00109                 _MountObject \1
                      (./engine/macros.a):00110                 ldb   \2        
                      (./engine/macros.a):00111                 jsr   ,x
                      (./engine/macros.a):00112          ENDM
                      (./engine/macros.a):00113         
0000                  (./engine/macros.a):00114         _SwitchScreenBuffer MACRO
                      (./engine/macros.a):00115                 ldb   $E7E5
                      (./engine/macros.a):00116                 eorb  #1                       ; switch btw page 2 and 3
                      (./engine/macros.a):00117                 orb   #$02
                      (./engine/macros.a):00118                 stb   $E7E5
                      (./engine/macros.a):00119          ENDM
                      (./engine/macros.a):00120         
0000                  (./engine/macros.a):00121         _asld MACRO
                      (./engine/macros.a):00122                 aslb
                      (./engine/macros.a):00123                 rola
                      (./engine/macros.a):00124          ENDM        
                      (./engine/macros.a):00125          
0000                  (./engine/macros.a):00126         _asrd MACRO
                      (./engine/macros.a):00127                 asra
                      (./engine/macros.a):00128                 rorb
                      (./engine/macros.a):00129          ENDM      
                      (./engine/macros.a):00130          
0000                  (./engine/macros.a):00131         _lsld MACRO
                      (./engine/macros.a):00132                 lslb
                      (./engine/macros.a):00133                 rola
                      (./engine/macros.a):00134          ENDM        
                      (./engine/macros.a):00135          
0000                  (./engine/macros.a):00136         _lsrd MACRO
                      (./engine/macros.a):00137                 lsra
                      (./engine/macros.a):00138                 rorb
                      (./engine/macros.a):00139          ENDM
                      (./engine/macros.a):00140          
0000                  (./engine/macros.a):00141         _rold MACRO
                      (./engine/macros.a):00142                 rolb
                      (./engine/macros.a):00143                 rola
                      (./engine/macros.a):00144          ENDM    
                      (./engine/macros.a):00145          
0000                  (./engine/macros.a):00146         _rord MACRO
                      (./engine/macros.a):00147                 rora
                      (./engine/macros.a):00148                 rorb
                      (./engine/macros.a):00149          ENDM
                      (./engine/macros.a):00150         
0000                  (./engine/macros.a):00151         _negd MACRO
                      (./engine/macros.a):00152                 nega
                      (./engine/macros.a):00153                 negb
                      (./engine/macros.a):00154                 sbca  #0
                      (./engine/macros.a):00155          ENDM
                      (./engine/macros.a):00156         
0000                  (./engine/macros.a):00157         _cba MACRO
                      (./engine/macros.a):00158                 pshs  b
                      (./engine/macros.a):00159                 cmpa  ,s+
                      (./engine/macros.a):00160          ENDM
                      (./engine/macros.a):00161         
0000                  (./engine/macros.a):00162         _aba MACRO
                      (./engine/macros.a):00163                 pshs  b
                      (./engine/macros.a):00164                 adda  ,s+
                      (./engine/macros.a):00165          ENDM
                      (./engine/macros.a):00166         
0000                  (./engine/macros.a):00167         _sba MACRO
                      (./engine/macros.a):00168                 pshs  b
                      (./engine/macros.a):00169                 suba  ,s+
                      (./engine/macros.a):00170          ENDM
                      (./engine/macros.a):00171         
0000                  (./engine/macros.a):00172         _cab MACRO
                      (./engine/macros.a):00173                 pshs  a
                      (./engine/macros.a):00174                 cmpb  ,s+
                      (./engine/macros.a):00175          ENDM
                      (./engine/macros.a):00176         
0000                  (./engine/macros.a):00177         _aab MACRO
                      (./engine/macros.a):00178                 pshs  a
                      (./engine/macros.a):00179                 addb  ,s+
                      (./engine/macros.a):00180          ENDM
                      (./engine/macros.a):00181         
0000                  (./engine/macros.a):00182         _sab MACRO
                      (./engine/macros.a):00183                 pshs  a
                      (./engine/macros.a):00184                 subb  ,s+
                      (./engine/macros.a):00185          ENDM
                      (./engine/macros.a):00186         
0000                  (./engine/macros.a):00187         _breakpoint MACRO
                      (./engine/macros.a):00188          IFDEF DEBUG
                      (./engine/macros.a):00189                 pshs  CC
                      (./engine/macros.a):00190                 sta   >$ffff
                      (./engine/macros.a):00191                 puls  CC
                      (./engine/macros.a):00192          ENDC
                      (./engine/macros.a):00193          ENDM
                      (./global/global-p):00007             INCLUDE "./engine/system/to8/map.const.asm"
                      (./engine/system/t):00001         ; Thomson TO8 - Memory map
                      (./engine/system/t):00002         
                      (./engine/system/t):00003         ; -----------------------------------------------------------------------------
                      (./engine/system/t):00004         ; system addresses
                      (./engine/system/t):00005         
                      (./engine/system/t):00006         ; mc6846
     E7C0             (./engine/system/t):00007         map.MC6846.CSR      equ $E7C0
     E7C1             (./engine/system/t):00008         map.MC6846.CRC      equ $E7C1
     E7C2             (./engine/system/t):00009         map.MC6846.DDRC     equ $E7C2
     E7C3             (./engine/system/t):00010         map.MC6846.PRC      equ $E7C3 ; (bit0) set half ram page 0 (low or high) in video area ($4000-$5FFF)
     E7C4             (./engine/system/t):00011         map.MC6846.CSR2     equ $E7C4
     E7C5             (./engine/system/t):00012         map.MC6846.TCR      equ $E7C5 ; irq timer ctrl
     E7C6             (./engine/system/t):00013         map.MC6846.TMSB     equ $E7C6 ; irq timer MSB
     E7C7             (./engine/system/t):00014         map.MC6846.TLSB     equ $E7C7 ; irq timer LSB
                      (./engine/system/t):00015         
                      (./engine/system/t):00016         ; mc6821 system
     E7C8             (./engine/system/t):00017         map.MC6821.PRA      equ $E7C8
     E7C9             (./engine/system/t):00018         map.MC6821.PRB      equ $E7C9
     E7CA             (./engine/system/t):00019         map.MC6821.CRA      equ $E7CA
     E7CB             (./engine/system/t):00020         map.MC6821.CRB      equ $E7CB
                      (./engine/system/t):00021         
                      (./engine/system/t):00022         ; mc6821 music and game
     E7CC             (./engine/system/t):00023         map.MC6821.PRA1     equ $E7CC
     E7CD             (./engine/system/t):00024         map.MC6821.PRA2     equ $E7CD
     E7CE             (./engine/system/t):00025         map.MC6821.CRA1     equ $E7CE
     E7CF             (./engine/system/t):00026         map.MC6821.CRA2     equ $E7CF
                      (./engine/system/t):00027         
                      (./engine/system/t):00028         ; thmfc01 gate controler floppy disk
     E7D0             (./engine/system/t):00029         map.THMFC01.STAT0   equ $E7D0
     E7D0             (./engine/system/t):00030         map.THMFC01.CMD0    equ $E7D0
     E7D1             (./engine/system/t):00031         map.THMFC01.STAT1   equ $E7D1
     E7D1             (./engine/system/t):00032         map.THMFC01.CMD1    equ $E7D1
     E7D2             (./engine/system/t):00033         map.THMFC01.CMD2    equ $E7D2
     E7D3             (./engine/system/t):00034         map.THMFC01.WDATA   equ $E7D3
     E7D3             (./engine/system/t):00035         map.THMFC01.RDATA   equ $E7D3
     E7D4             (./engine/system/t):00036         map.THMFC01.WCLK    equ $E7D4
     E7D5             (./engine/system/t):00037         map.THMFC01.WSECT   equ $E7D5
     E7D6             (./engine/system/t):00038         map.THMFC01.TRCK    equ $E7D6
     E7D7             (./engine/system/t):00039         map.THMFC01.CELL    equ $E7D7
                      (./engine/system/t):00040         
                      (./engine/system/t):00041         ; ef9369 palette
     E7DA             (./engine/system/t):00042         map.EF9369.D        equ $E7DA
     E7DB             (./engine/system/t):00043         map.EF9369.A        equ $E7DB
                      (./engine/system/t):00044         
                      (./engine/system/t):00045         ; cf74021 gate array page mode - (TO8D: EFG2021FN)
     E7DC             (./engine/system/t):00046         map.CF74021.LGAMOD  equ $E7DC
     E7DD             (./engine/system/t):00047         map.CF74021.SYS2    equ $E7DD ; (bit0-3) set screen border color, (bit6-7) set onscreen video memory page
     E7E4             (./engine/system/t):00048         map.CF74021.COM     equ $E7E4
     E7E5             (./engine/system/t):00049         map.CF74021.DATA    equ $E7E5 ; (bit0-4) set ram page in data area ($A000-$DFFF)
     E7E6             (./engine/system/t):00050         map.CF74021.CART    equ $E7E6 ; (bit0-4) set page in cartridge area ($0000-$3FFF), (bit5) ram over cartridge, (bit6) write enable
     E7E7             (./engine/system/t):00051         map.CF74021.SYS1    equ $E7E7
                      (./engine/system/t):00052         
                      (./engine/system/t):00053         ; extension port
     00E7             (./engine/system/t):00054         map.EXTPORT         equ $E7
     E7F0             (./engine/system/t):00055         map.IEEE488         equ $E7F0 ; to E7F7
     E7F2             (./engine/system/t):00056         map.EF5860.CTRL     equ $E7F2 ; MIDI
     E7F3             (./engine/system/t):00057         map.EF5860.TX       equ $E7F3 ; MIDI
                      (./engine/system/t):00058          ifndef SOUND_CARD_PROTOTYPE
0000                  (./engine/system/t):00059         map.YM2413.A        equ $E7FC
0000                  (./engine/system/t):00060         map.YM2413.D        equ $E7FD
0000                  (./engine/system/t):00061         map.SN76489.D       equ $E7F7
                      (./engine/system/t):00062          else
     E7FC             (./engine/system/t):00063         map.YM2413.A        equ $E7FC
     E7FD             (./engine/system/t):00064         map.YM2413.D        equ $E7FD
     E7FF             (./engine/system/t):00065         map.SN76489.D       equ $E7FF
                      (./engine/system/t):00066          endc
     E7FE             (./engine/system/t):00067         map.MEA8000.D       equ $E7FE
     E7FF             (./engine/system/t):00068         map.MEA8000.A       equ $E7FF
                      (./engine/system/t):00069         
                      (./engine/system/t):00070         ; ROM routines
     E806             (./engine/system/t):00071         map.GETC            equ $E806
     E809             (./engine/system/t):00072         map.KTST            equ $E809
     E82A             (./engine/system/t):00073         map.DKCO            equ $E82A ; read or write floppy disk routine
     E830             (./engine/system/t):00074         map.IRQ.EXIT        equ $E830 ; to exit an irq
                      (./engine/system/t):00075         
                      (./engine/system/t):00076         ; system variables
     6019             (./engine/system/t):00077         map.STATUS          equ $6019 ; status bitfield
     6048             (./engine/system/t):00078         map.DK.OPC          equ $6048 ; operation
     6049             (./engine/system/t):00079         map.DK.DRV          equ $6049 ; drive
     604C             (./engine/system/t):00080         map.DK.SEC          equ $604C ; sector
     604A             (./engine/system/t):00081         map.DK.TRK          equ $604A ; $604B ; track
     604E             (./engine/system/t):00082         map.DK.STA          equ $604E ; return status
     604F             (./engine/system/t):00083         map.DK.BUF          equ $604F ; $6050 ; data write location
     6023             (./engine/system/t):00084         map.FIRQPT          equ $6023 ; routine firq
     6027             (./engine/system/t):00085         map.TIMERPT         equ $6027 ; routine irq timer
     6081             (./engine/system/t):00086         map.CF74021.SYS1.R  equ $6081 ; reading value for map.CF74021.SYS1
                      (./engine/system/t):00087         
                      (./engine/system/t):00088         ; -----------------------------------------------------------------------------
                      (./engine/system/t):00089         ; constants
                      (./engine/system/t):00090         
     0035             (./engine/system/t):00091         map.EF5860.TX_IRQ_ON  equ %00110101 ; 8bits, no parity check, stop 1, tx interrupt
     0015             (./engine/system/t):00092         map.EF5860.TX_IRQ_OFF equ %00010101 ; 8bits, no parity check, stop 1, no interrupt
     4DFF             (./engine/system/t):00093         map.IRQ.ONE_FRAME     equ 312*64-1  ; one frame timer (lines*cycles_per_lines-1), timer launch at -1
                      (./engine/system/t):00094         
                      (./engine/system/t):00095         ; -----------------------------------------------------------------------------
                      (./engine/system/t):00096         ; mapping to generic names
                      (./engine/system/t):00097         
     ????             (./engine/system/t):00098         map.DAC            equ map.mc6821.PRA2
     ????             (./engine/system/t):00099         map.RND            equ map.cf74021.CART
                      (./global/global-p):00008         
                      (./global/global-p):00009             INCLUDE "./global/global-equates.asm"
                      (./global/global-e):00001          IFNDEF GLOBAL_EQUATES
     0001             (./global/global-e):00002         GLOBAL_EQUATES EQU 1
                      (./global/global-e):00003         * Graphics
     7F7F             (./global/global-e):00004         XY_CENTERED_FULL_IMAGE  EQU $7F7F 
     0007             (./global/global-e):00005         LAYER_BACKGROUND        EQU 7 
     00FF             (./global/global-e):00006         OUT_OF_SYNC_VBL         EQU 255
     0001             (./global/global-e):00007         MUSIC_LOOP              EQU 1
     0000             (./global/global-e):00008         NO_CALLBACK             EQU $0000
                      (./global/global-e):00009          ENDC
                      (./global/global-p):00010             INCLUDE "./global/global-macros.asm"
                      (./global/global-m):00001         
0000                  (./global/global-m):00002         _objectManager.new.u MACRO
                      (./global/global-m):00003             jsr   LoadObject_u
                      (./global/global-m):00004             lda   \1
                      (./global/global-m):00005             sta   id,u
                      (./global/global-m):00006             ENDM
                      (./global/global-m):00007         
0000                  (./global/global-m):00008         _objectManager.new.x MACRO
                      (./global/global-m):00009             jsr   LoadObject_x
                      (./global/global-m):00010             lda   \1
                      (./global/global-m):00011             sta   id,x
                      (./global/global-m):00012             ENDM    
                      (./global/global-m):00013         
                      (./global/global-m):00014         
0000                  (./global/global-m):00015         _IRQ.init    MACRO
                      (./global/global-m):00016             jsr   IrqInit
                      (./global/global-m):00017             ldd   \1
                      (./global/global-m):00018             std   Irq_user_routine
                      (./global/global-m):00019             lda   \2                     
                      (./global/global-m):00020             ldx   \3
                      (./global/global-m):00021             jsr   IrqSync
                      (./global/global-m):00022             jsr   IrqOn  
                      (./global/global-m):00023             ENDM
                      (./global/global-m):00024         
0000                  (./global/global-m):00025         _gameMode.init MACRO
                      (./global/global-m):00026             jsr   InitGlobals
                      (./global/global-m):00027             jsr   InitStack
                      (./global/global-m):00028             jsr   LoadAct
                      (./global/global-m):00029             lda   \1
                      (./global/global-m):00030             sta   glb_Cur_Game_Mode
                      (./global/global-m):00031             ENDM   
                      (./global/global-m):00032         
                      (./global/global-m):00033         
0000                  (./global/global-m):00034         _palette.set MACRO
                      (./global/global-m):00035                 ldd   \1
                      (./global/global-m):00036                 std   Pal_current
                      (./global/global-m):00037                 ENDM   
                      (./global/global-m):00038         
0000                  (./global/global-m):00039         _palette.show MACRO
                      (./global/global-m):00040                 clr   PalRefresh
                      (./global/global-m):00041                 jsr   PalUpdateNow
                      (./global/global-m):00042                 ENDM         
                      (./global/global-p):00011             INCLUDE "./global/global-variables.asm"
                      (./global/global-v):00001          IFNDEF GLOBAL_VARIABLES
                      (./global/global-v):00002         
     9DF0             (./global/global-v):00003         GLOBAL_VARIABLES EQU $9DF0
                      (./global/global-v):00004         
                      (./global/global-v):00005          ENDC
                      (/home/robin/githu):00008                 INCLUDE "./engine/graphics/buffer/gfxlock.macro.asm"
                      (./engine/graphics):00001         * =============================================================================
                      (./engine/graphics):00002         * macros
                      (./engine/graphics):00003         * =============================================================================
                      (./engine/graphics):00004         
0000                  (./engine/graphics):00005         _gfxlock.init MACRO
                      (./engine/graphics):00006                 lda   #-1
                      (./engine/graphics):00007                 sta   gfxlock.status
                      (./engine/graphics):00008                 lda   gfxlock.backBuffer.status ; init backBuffer.id based on backBuffer.status
                      (./engine/graphics):00009                 anda  #%00000001
                      (./engine/graphics):00010                 sta   gfxlock.backBuffer.id     ; id is 0 or 1
                      (./engine/graphics):00011          ENDM
                      (./engine/graphics):00012         
0000                  (./engine/graphics):00013         _gfxlock.on MACRO
                      (./engine/graphics):00014                 lda   gfxlock.status
                      (./engine/graphics):00015                 bne   >
                      (./engine/graphics):00016                 jsr   gfxlock.bufferSwap.wait  ; wait if second gfx frame is reached
                      (./engine/graphics):00017         !       lda   #1
                      (./engine/graphics):00018                 sta   gfxlock.status
                      (./engine/graphics):00019          ENDM
                      (./engine/graphics):00020         
0000                  (./engine/graphics):00021         _gfxlock.off MACRO
                      (./engine/graphics):00022                 clr   gfxlock.status
                      (./engine/graphics):00023          ENDM
                      (./engine/graphics):00024         
0000                  (./engine/graphics):00025         _gfxlock.loop MACRO
                      (./engine/graphics):00026                 lda   gfxlock.backBuffer.id    ; switch id at the end of gfxlock
                      (./engine/graphics):00027                 eora  #%00000001
                      (./engine/graphics):00028                 sta   gfxlock.backBuffer.id
                      (./engine/graphics):00029                 ldd   gfxlock.frame.count
                      (./engine/graphics):00030                 subd  gfxlock.frame.lastCount
                      (./engine/graphics):00031                 stb   gfxlock.frameDrop.count  ; store the number of elapsed 50Hz frames since last main game loop
                      (./engine/graphics):00032                 ldd   gfxlock.frame.count
                      (./engine/graphics):00033                 std   gfxlock.frame.lastCount
                      (./engine/graphics):00034          ENDM
                      (./engine/graphics):00035         
0000                  (./engine/graphics):00036         _gfxlock.backProcess.on MACRO
                      (./engine/graphics):00037                 ; param 1 : routine address
                      (./engine/graphics):00038                 ldd   #\1
                      (./engine/graphics):00039                 std   gfxlock.backProcess
                      (./engine/graphics):00040                 lda   #1
                      (./engine/graphics):00041                 sta   gfxlock.backProcess.status
                      (./engine/graphics):00042          ENDM
                      (./engine/graphics):00043         
0000                  (./engine/graphics):00044         _gfxlock.backProcess.off MACRO
                      (./engine/graphics):00045                 clr   gfxlock.backProcess.status
                      (./engine/graphics):00046          ENDM
                      (/home/robin/githu):00009         
                      (/home/robin/githu):00010                 org   $6100
                      (/home/robin/githu):00011         
                      (/home/robin/githu):00012                 opt cd
                      (/home/robin/githu):00013         
                      (/home/robin/githu):00014         
                      (/home/robin/githu):00015         * ============================================================================== 
                      (/home/robin/githu):00016         * Init
                      (/home/robin/githu):00017         * ============================================================================== 
                      (/home/robin/githu):00018                 _gameMode.init #GmID_scrollscreen
6100 BD67F4           (   _gameMode.init):00001 [8]         jsr   InitGlobals
6103 BD6981           (   _gameMode.init):00002 [8]         jsr   InitStack
6106 BD6C00           (   _gameMode.init):00003 [8]         jsr   LoadAct
6109 8600             (   _gameMode.init):00004 [2]         lda   #GmID_scrollscreen
610B B76AE1           (   _gameMode.init):00005 [5]         sta   glb_Cur_Game_Mode
                      (/home/robin/githu):00019                 _gfxlock.init
610E 86FF             (    _gfxlock.init):00001 [2]             lda   #-1
6110 B766F6           (    _gfxlock.init):00002 [5]             sta   gfxlock.status
6113 B6671E           (    _gfxlock.init):00003 [5]             lda   gfxlock.backBuffer.status ; init backBuffer.id based on backBuffer.status
6116 8401             (    _gfxlock.init):00004 [2]             anda  #%00000001
6118 B766FB           (    _gfxlock.init):00005 [5]             sta   gfxlock.backBuffer.id     ; id is 0 or 1
                      (/home/robin/githu):00020                 _IRQ.init #UserIRQ,#OUT_OF_SYNC_VBL,#Irq_one_frame
611B BD6AF9           (        _IRQ.init):00001 [8]         jsr   IrqInit
611E CC6186           (        _IRQ.init):00002 [3]         ldd   #UserIRQ
6121 FD6AF7           (        _IRQ.init):00003 [6]         std   Irq_user_routine
6124 86FF             (        _IRQ.init):00004 [2]         lda   #OUT_OF_SYNC_VBL                     
6126 8E4DFF           (        _IRQ.init):00005 [3]         ldx   #Irq_one_frame
6129 BD6B4D           (        _IRQ.init):00006 [8]         jsr   IrqSync
612C BD6B0F           (        _IRQ.init):00007 [8]         jsr   IrqOn  
                      (/home/robin/githu):00021                 _palette.set #Palette_scrollscreen
612F CC6BCB           (     _palette.set):00001 [3]             ldd   #Palette_scrollscreen
6132 FD6878           (     _palette.set):00002 [6]             std   Pal_current
                      (/home/robin/githu):00022                 _palette.show
6135 7F6877           (    _palette.show):00001 [7]             clr   PalRefresh
6138 BD689A           (    _palette.show):00002 [8]             jsr   PalUpdateNow
                      (/home/robin/githu):00023                 
                      (/home/robin/githu):00024         
                      (/home/robin/githu):00025         * init scroll
613B 8601             (/home/robin/githu):00026 [2]             lda   #ObjID_scrollA
613D B76758           (/home/robin/githu):00027 [5]             sta   VS_ObjIDA
6140 8602             (/home/robin/githu):00028 [2]             lda   #ObjID_scrollB
6142 B76759           (/home/robin/githu):00029 [5]             sta   VS_ObjIDB
                      (/home/robin/githu):00030         
6145 8601             (/home/robin/githu):00031 [2]             lda   #1
6147 B7675A           (/home/robin/githu):00032 [5]             sta   VS_scroll_step
                      (/home/robin/githu):00033         
614A 860A             (/home/robin/githu):00034 [2]             lda   #10
614C B7675C           (/home/robin/githu):00035 [5]             sta   VS_viewport_line_pos
614F 8678             (/home/robin/githu):00036 [2]             lda   #120
6151 B7679E           (/home/robin/githu):00037 [5]             sta   VS_viewport_size
6154 BD675B           (/home/robin/githu):00038 [8]             jsr   VerticalScrollUpdateViewport
                      (/home/robin/githu):00039         
                      (/home/robin/githu):00040         * ============================================================================== * Main Loop
                      (/home/robin/githu):00041         * ==============================================================================
6157                  (/home/robin/githu):00042         LevelMainLoop
6157 BD676A           (/home/robin/githu):00043 [8]             jsr   VerticalScrollMoveUp
                      (/home/robin/githu):00044                 _gfxlock.on
615A B666F6           (      _gfxlock.on):00001 [5]             lda   gfxlock.status
615D 2603             (      _gfxlock.on):00002 [3]             bne   >
615F BD673A           (      _gfxlock.on):00003 [8]             jsr   gfxlock.bufferSwap.wait  ; wait if second gfx frame is reached
6162 8601             (      _gfxlock.on):00004 [2]     !       lda   #1
6164 B766F6           (      _gfxlock.on):00005 [5]             sta   gfxlock.status
6167 BD6789           (/home/robin/githu):00045 [8]             jsr   VerticalScroll                           
                      (/home/robin/githu):00046                 _gfxlock.off
616A 7F66F6           (     _gfxlock.off):00001 [7]             clr   gfxlock.status
                      (/home/robin/githu):00047                 _gfxlock.loop
616D B666FB           (    _gfxlock.loop):00001 [5]             lda   gfxlock.backBuffer.id    ; switch id at the end of gfxlock
6170 8801             (    _gfxlock.loop):00002 [2]             eora  #%00000001
6172 B766FB           (    _gfxlock.loop):00003 [5]             sta   gfxlock.backBuffer.id
6175 FC66FE           (    _gfxlock.loop):00004 [6]             ldd   gfxlock.frame.count
6178 B36700           (    _gfxlock.loop):00005 [7]             subd  gfxlock.frame.lastCount
617B F766FD           (    _gfxlock.loop):00006 [5]             stb   gfxlock.frameDrop.count  ; store the number of elapsed 50Hz frames since last main game loop
617E FC66FE           (    _gfxlock.loop):00007 [6]             ldd   gfxlock.frame.count
6181 FD6700           (    _gfxlock.loop):00008 [6]             std   gfxlock.frame.lastCount
6184 20D1             (/home/robin/githu):00048 [3]             bra   LevelMainLoop
                      (/home/robin/githu):00049         
                      (/home/robin/githu):00050         
6186                  (/home/robin/githu):00051         UserIRQ
6186 BD6702           (/home/robin/githu):00052 [8]             jsr   gfxlock.bufferSwap.check
6189 39               (/home/robin/githu):00053 [5]             rts
                      (/home/robin/githu):00054         
                      (/home/robin/githu):00055              
                      (/home/robin/githu):00056         * ---------------------------------------------------------------------------
                      (/home/robin/githu):00057         * Game Mode RAM variables
                      (/home/robin/githu):00058         * ---------------------------------------------------------------------------
                      (/home/robin/githu):00059         
                      (/home/robin/githu):00060                 INCLUDE "./game-mode/scrollscreen/ram-data.asm"
                      (./game-mode/scrol):00001         
                      (./game-mode/scrol):00002         ; ext_variables_size is for dynamic objects
     0014             (./game-mode/scrol):00003         ext_variables_size                equ 20
                      (./game-mode/scrol):00004         
                      (./game-mode/scrol):00005         * ===========================================================================
                      (./game-mode/scrol):00006         * Object Constants
                      (./game-mode/scrol):00007         * ===========================================================================
     0014             (./game-mode/scrol):00008         nb_dynamic_objects           equ 20
     0014             (./game-mode/scrol):00009         nb_graphical_objects         equ 20 * max 64 total
                      (./game-mode/scrol):00010         * ===========================================================================
                      (./game-mode/scrol):00011         * Object Status Table - OST
                      (./game-mode/scrol):00012         * ===========================================================================
     9F00             (./game-mode/scrol):00013         MainCharacter                 equ dp
                      (./game-mode/scrol):00014         
618A 0000000000000000 (./game-mode/scrol):00015         Dynamic_Object_RAM            fill  0,(nb_dynamic_objects)*object_size
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     00000000
6676                  (./game-mode/scrol):00016         Dynamic_Object_RAM_End
                      (./game-mode/scrol):00017         
                      (./game-mode/scrol):00018         
6676                  (./game-mode/scrol):00019         Tile_Data_RAM_A_Start
6676 1111111111111111 (./game-mode/scrol):00020            FDB $1111,$1111,$1111,$1111  ; 32 px x 8 px 
667E 2222222222222222 (./game-mode/scrol):00021            FDB $2222,$2222,$2222,$2222  ; 
6686 3333333333333333 (./game-mode/scrol):00022            FDB $3333,$3333,$3333,$3333  ; 
668E 4444444444444444 (./game-mode/scrol):00023            FDB $4444,$4444,$4444,$4444  ; 
6696 5555555555555555 (./game-mode/scrol):00024            FDB $5555,$5555,$5555,$5555  ;
669E 6666666666666666 (./game-mode/scrol):00025            FDB $6666,$6666,$6666,$6666  ;
66A6 7777777777777777 (./game-mode/scrol):00026            FDB $7777,$7777,$7777,$7777  ;
66AE 8888888888888888 (./game-mode/scrol):00027            FDB $8888,$8888,$8888,$8888  ;
66B6                  (./game-mode/scrol):00028         Tile_Data_RAM_A_End
                      (./game-mode/scrol):00029         
66B6                  (./game-mode/scrol):00030         Tile_Data_RAM_B_Start
66B6 1111111111111111 (./game-mode/scrol):00031            FDB $1111,$1111,$1111,$1111  ; 
66BE 2222222222222222 (./game-mode/scrol):00032            FDB $2222,$2222,$2222,$2222  ; 
66C6 3333333333333333 (./game-mode/scrol):00033            FDB $3333,$3333,$3333,$3333  ; 
66CE 4444444444444444 (./game-mode/scrol):00034            FDB $4444,$4444,$4444,$4444  ; 
66D6 5555555555555555 (./game-mode/scrol):00035            FDB $5555,$5555,$5555,$5555  ;
66DE 6666666666666666 (./game-mode/scrol):00036            FDB $6666,$6666,$6666,$6666  ;
66E6 7777777777777777 (./game-mode/scrol):00037            FDB $7777,$7777,$7777,$7777  ;
66EE 8888888888888888 (./game-mode/scrol):00038            FDB $8888,$8888,$8888,$8888  ;
66F6                  (./game-mode/scrol):00039         Tile_Data_RAM_B_End
                      (./game-mode/scrol):00040         
                      (./game-mode/scrol):00041         
                      (/home/robin/githu):00061                 
                      (/home/robin/githu):00062         * ============================================================================== * Routines
                      (/home/robin/githu):00063         * ==============================================================================
                      (/home/robin/githu):00064                 INCLUDE "./engine/graphics/buffer/gfxlock.asm"
                      (./engine/graphics):00001         *******************************************************************************
                      (./engine/graphics):00002         * double buffering gfx write lock
                      (./engine/graphics):00003         * -----------------------------------------------------------------------------
                      (./engine/graphics):00004         *
                      (./engine/graphics):00005         * Swap buffers with a 50hz irq, when beam is near VBL.
                      (./engine/graphics):00006         * gfxlock.irq should be called by user irq routine.
                      (./engine/graphics):00007         *
                      (./engine/graphics):00008         * To tell engine when gfx rendering begins or ends, the user uses macros :
                      (./engine/graphics):00009         * _gfxlock.init : should be called before irq starts
                      (./engine/graphics):00010         * _gfxlock.on   : should be called before entering rendering routines
                      (./engine/graphics):00011         * _gfxlock.off : should be called as soon as rendering is over for a frame
                      (./engine/graphics):00012         *
                      (./engine/graphics):00013         * A wait routine will only runs if a second gfx rendering lock is set during
                      (./engine/graphics):00014         * a single screen frame. User can set a back process routine during wait.
                      (./engine/graphics):00015         *
                      (./engine/graphics):00016         * Irq must be in sync with VBL to avoid palette change artifacts.
                      (./engine/graphics):00017         *
                      (./engine/graphics):00018         *******************************************************************************
                      (./engine/graphics):00019         
                      (./engine/graphics):00020         * =============================================================================
                      (./engine/graphics):00021         * variables
                      (./engine/graphics):00022         * =============================================================================
                      (./engine/graphics):00023         
66F6 00               (./engine/graphics):00024         gfxlock.status             fcb   0 ; 1: gfx rendering is running
66F7 00               (./engine/graphics):00025         gfxlock.bufferSwap.status  fcb   0 ; -1: a swap buffer was made
66F8 00               (./engine/graphics):00026         gfxlock.backProcess.status fcb   0 ; 1: a back process is active during wait
                      (./engine/graphics):00027         
66F9 0000             (./engine/graphics):00028         gfxlock.bufferSwap.count   fdb   0 ; buffer swap counter
66FB 00               (./engine/graphics):00029         gfxlock.backBuffer.id      fcb   0 ; back buffer set to read operations (0 or 1)
                      (./engine/graphics):00030         
66FC 00               (./engine/graphics):00031         gfxlock.frameDrop.count_w  fcb   0 ; zero pad
66FD 00               (./engine/graphics):00032         gfxlock.frameDrop.count    fcb   0 ; elapsed 50Hz frames since last main loop
66FE 0000             (./engine/graphics):00033         gfxlock.frame.count        fdb   0 ; elapsed 50Hz frames since init
6700 0000             (./engine/graphics):00034         gfxlock.frame.lastCount    fdb   0 ; elapsed 50Hz frames at last main loop
                      (./engine/graphics):00035         
                      (./engine/graphics):00036         * =============================================================================
                      (./engine/graphics):00037         * routines
                      (./engine/graphics):00038         * =============================================================================
                      (./engine/graphics):00039         
6702                  (./engine/graphics):00040         gfxlock.bufferSwap.check
6702 B666F6           (./engine/graphics):00041 [5]             lda   gfxlock.status
6705 2608             (./engine/graphics):00042 [3]             bne   >
6707 BD6710           (./engine/graphics):00043 [8]             jsr   gfxlock.bufferSwap.do    ; swap only when gfx was redered
670A 86FF             (./engine/graphics):00044 [2]             lda   #-1
670C B766F6           (./engine/graphics):00045 [5]             sta   gfxlock.status
670F 39               (./engine/graphics):00046 [5]     !       rts
                      (./engine/graphics):00047         
6710                  (./engine/graphics):00048         gfxlock.bufferSwap.do
6710 F6671E           (./engine/graphics):00049 [5]             ldb   gfxlock.backBuffer.status
6713 C440             (./engine/graphics):00050 [2]             andb  #%01000000               ; set bit 6 based on flip/flop
6715 CA80             (./engine/graphics):00051 [2]             orb   #%10000000               ; set bit 7=1, bit 0-3=frame color
     6716             (./engine/graphics):00052         gfxlock.screenBorder.color equ *-1
6717 F7E7DD           (./engine/graphics):00053 [5]             stb   map.CF74021.SYS2         ; set visible video buffer (2 or 3)
671A 73671E           (./engine/graphics):00054 [7]             com   gfxlock.backBuffer.status
671D C600             (./engine/graphics):00055 [2]             ldb   #$00                     ; always 0 or -1 (flip/flop)
     671E             (./engine/graphics):00056         gfxlock.backBuffer.status equ   *-1
671F C401             (./engine/graphics):00057 [2]             andb  #%00000001               ; set bit 0 based on flip/flop
6721 CA02             (./engine/graphics):00058 [2]             orb   #%00000010               ; value should be 2 or 3
6723 F7E7E5           (./engine/graphics):00059 [5]             stb   map.CF74021.DATA         ; mount working video buffer in RAM
6726 F6E7C3           (./engine/graphics):00060 [5]             ldb   map.MC6846.PRC
6729 C801             (./engine/graphics):00061 [2]             eorb  #%00000001               ; swap half-page in $4000 $5FFF
672B F7E7C3           (./engine/graphics):00062 [5]             stb   map.MC6846.PRC
                      (./engine/graphics):00063                 
672E 7C66FA           (./engine/graphics):00064 [7]             inc   gfxlock.bufferSwap.count+1
6731 2603             (./engine/graphics):00065 [3]             bne   >
6733 7C66F9           (./engine/graphics):00066 [7]             inc   gfxlock.bufferSwap.count
                      (./engine/graphics):00067         !
6736 7366F7           (./engine/graphics):00068 [7]             com   gfxlock.bufferSwap.status
6739 39               (./engine/graphics):00069 [5]             rts
                      (./engine/graphics):00070         
673A                  (./engine/graphics):00071         gfxlock.bufferSwap.wait
673A 7F66F7           (./engine/graphics):00072 [7]             clr   gfxlock.bufferSwap.status
673D 7D66F8           (./engine/graphics):00073 [7]     @loop   tst   gfxlock.backProcess.status
6740 2703             (./engine/graphics):00074 [3]             beq   >
6742 BD1234           (./engine/graphics):00075 [8]             jsr   $1234                     ; do some back processing
     6743             (./engine/graphics):00076         gfxlock.backProcess.routine equ *-2
6745 B666F6           (./engine/graphics):00077 [5]     !       lda   gfxlock.status
6748 2605             (./engine/graphics):00078 [3]             bne   >
674A 7D66F7           (./engine/graphics):00079 [7]             tst   gfxlock.bufferSwap.status
674D 27EE             (./engine/graphics):00080 [3]             beq   @loop                     ; loop until irq make a swap
674F 39               (./engine/graphics):00081 [5]     !       rts
                      (./engine/graphics):00082         
                      (./engine/graphics):00083         ; -------------------------------------------------
                      (./engine/graphics):00084         
6750                  (./engine/graphics):00085         gfxlock.screenBorder.update
6750 C40F             (./engine/graphics):00086 [2]             andb  #$0F
6752 CA80             (./engine/graphics):00087 [2]             orb   #%10000000
6754 F76716           (./engine/graphics):00088 [5]             stb   gfxlock.screenBorder.color
6757 39               (./engine/graphics):00089 [5]             rts
                      (/home/robin/githu):00065                 INCLUDE "./engine/graphics/tilemap/vertical-scroll/scrolling.asm"
                      (./engine/graphics):00001         * ============================================
                      (./engine/graphics):00002         * Vertical Scroll
                      (./engine/graphics):00003         * ============================================
                      (./engine/graphics):00004         
     007E             (./engine/graphics):00005         OPCODE_JMP_E equ $7E
     004B             (./engine/graphics):00006         VS_line_size equ 75
     00C9             (./engine/graphics):00007         VS_buffer_size equ 201          ; nb lines in buffer is 201 (0-200 to fit JMP return)
                      (./engine/graphics):00008         
6758 00               (./engine/graphics):00009         VS_ObjIDA fcb 0
6759 00               (./engine/graphics):00010         VS_ObjIDB fcb 0
675A 00               (./engine/graphics):00011         VS_scroll_step fcb 0
                      (./engine/graphics):00012         
675B                  (./engine/graphics):00013         VerticalScrollUpdateViewport
675B 8600             (./engine/graphics):00014 [2]             lda   #0
     675C             (./engine/graphics):00015         VS_viewport_line_pos equ *-1
675D BB679E           (./engine/graphics):00016 [5]             adda  VS_viewport_size
6760 C628             (./engine/graphics):00017 [2]             ldb   #40 ; nb of bytes in a line
6762 3D               (./engine/graphics):00018 [11]            mul
6763 C3A000           (./engine/graphics):00019 [4]             addd  #$A000
6766 FD67C4           (./engine/graphics):00020 [6]             std   VS_mem_pos
6769 39               (./engine/graphics):00021 [5]             rts
                      (./engine/graphics):00022         
676A                  (./engine/graphics):00023         VerticalScrollMoveUp
                      (./engine/graphics):00024                 ; TODO update buffer code with tilemap
676A F667C7           (./engine/graphics):00025 [5]             ldb   VS_cur_line
676D FB675A           (./engine/graphics):00026 [5]             addb  VS_scroll_step
6770 C1C9             (./engine/graphics):00027 [2]             cmpb  #VS_buffer_size
6772 2303             (./engine/graphics):00028 [3]             bls   >
6774 8300C9           (./engine/graphics):00029 [4]             subd  #VS_buffer_size           ; cycling in buffer
6777 F767C7           (./engine/graphics):00030 [5]     !       stb   VS_cur_line
677A 39               (./engine/graphics):00031 [5]             rts
                      (./engine/graphics):00032         
677B                  (./engine/graphics):00033         VerticalScrollMoveDown
                      (./engine/graphics):00034                 ; TODO update buffer code with tilemap
677B F667C7           (./engine/graphics):00035 [5]             ldb   VS_cur_line
677E F0675A           (./engine/graphics):00036 [5]             subb  VS_scroll_step
6781 2402             (./engine/graphics):00037 [3]             bcc   >
6783 CBC9             (./engine/graphics):00038 [2]             addb  #VS_buffer_size           ; cycling in buffer
6785 F767C7           (./engine/graphics):00039 [5]     !       stb   VS_cur_line
6788 39               (./engine/graphics):00040 [5]             rts
                      (./engine/graphics):00041         
                      (./engine/graphics):00042         
                      (./engine/graphics):00043         ; when the first screen line is part of the scroll, as S is used to write in video buffer,
                      (./engine/graphics):00044         ; you should expect 12 bytes to be written in or near video memory by the irq call.
                      (./engine/graphics):00045         ; if it occurs at the end of the buffer routine, before S is retored, this can 
                      (./engine/graphics):00046         ; erase bytes at $9FF4-$9FFF, so live this aera unsed
                      (./engine/graphics):00047         
6789                  (./engine/graphics):00048         VerticalScroll
6789 F66758           (./engine/graphics):00049 [5]             ldb   VS_ObjIDA
678C 8E6BEB           (./engine/graphics):00050 [3]     @loop   ldx   #Obj_Index_Page
678F A685             (./engine/graphics):00051 [4+1]           lda   b,x   
                      (./engine/graphics):00052                 _SetCartPageA                  ; mount page that contain buffer code
                      (    _SetCartPageA):00001          IFDEF T2
6791 BD6809           (    _SetCartPageA):00002 [8]             jsr   SetCartPageA
                      (    _SetCartPageA):00003          ELSE
                      (    _SetCartPageA):00004                 sta   $E7E6                    ; selection de la page RAM en zone cartouche
                      (    _SetCartPageA):00005          ENDC
6794 58               (./engine/graphics):00053 [2]             aslb
6795 8E6BEE           (./engine/graphics):00054 [3]             ldx   #Obj_Index_Address
6798 AE85             (./engine/graphics):00055 [5+1]           ldx   b,x                      ; set buffer code address in x
679A F667C7           (./engine/graphics):00056 [5]             ldb   VS_cur_line              ; screen start line (0-199)
679D CBC8             (./engine/graphics):00057 [2]             addb  #200                     ; viewport size (1-200)
     679E             (./engine/graphics):00058         VS_viewport_size equ *-1
679F 2504             (./engine/graphics):00059 [3]             bcs   @undo
67A1 C1C9             (./engine/graphics):00060 [2]             cmpb  #VS_buffer_size
67A3 2302             (./engine/graphics):00061 [3]             bls   >
67A5 C0C9             (./engine/graphics):00062 [2]     @undo   subb  #VS_buffer_size          ; cycling in buffer
67A7 864B             (./engine/graphics):00063 [2]     !       lda   #VS_line_size
67A9 3D               (./engine/graphics):00064 [11]            mul
67AA 338B             (./engine/graphics):00065 [4+4]           leau  d,x                      ; set u where a jump should be placed for return to caller
67AC 3722             (./engine/graphics):00066 [5+3]           pulu  a,y
67AE FF67D4           (./engine/graphics):00067 [6]             stu   @save_u
67B1 3422             (./engine/graphics):00068 [5+3]           pshs  a,y                      ; save 3 bytes in buffer that will be erased by the jmp return
67B3 867E             (./engine/graphics):00069 [2]             lda   #OPCODE_JMP_E            ; build jmp instruction
67B5 108E67CF         (./engine/graphics):00070 [4]             ldy   #@ret                    ; this works even at the end of table because there is 
67B9 A75D             (./engine/graphics):00071 [4+1]           sta   -3,u                     ; already a jmp for looping into the buffer
67BB 10AF5E           (./engine/graphics):00072 [6+1]           sty   -2,u                     ; no need to have some padding
67BE 10FF67D1         (./engine/graphics):00073 [7]             sts   @save_s
67C2 10CEBF40         (./engine/graphics):00074 [4]             lds   #$BF40
     67C4             (./engine/graphics):00075         VS_mem_pos equ *-2
67C6 8600             (./engine/graphics):00076 [2]             lda   #0
     67C7             (./engine/graphics):00077         VS_cur_line equ *-1
67C8 C64B             (./engine/graphics):00078 [2]             ldb   #VS_line_size
67CA 3D               (./engine/graphics):00079 [11]            mul
67CB 308B             (./engine/graphics):00080 [4+4]           leax  d,x                      ; set starting position in buffer code
67CD 6E84             (./engine/graphics):00081 [3+0]           jmp   ,x
67CF 10CE0000         (./engine/graphics):00082 [4]     @ret    lds   #0
     67D1             (./engine/graphics):00083         @save_s equ   *-2
67D3 CE0000           (./engine/graphics):00084 [3]             ldu   #0
     67D4             (./engine/graphics):00085         @save_u equ   *-2
67D6 3512             (./engine/graphics):00086 [5+3]           puls  a,x
67D8 3612             (./engine/graphics):00087 [5+3]           pshu  a,x                      ; restore 3 bytes in buffer
67DA B667C4           (./engine/graphics):00088 [5]             lda   VS_mem_pos
67DD 81C0             (./engine/graphics):00089 [2]             cmpa  #$C0
67DF 240A             (./engine/graphics):00090 [3]             bhs   >                        ; exit if second buffer code as been executed
67E1 8B20             (./engine/graphics):00091 [2]             adda  #$20                     ; else execute second buffer code
67E3 B767C4           (./engine/graphics):00092 [5]             sta   VS_mem_pos
67E6 F66759           (./engine/graphics):00093 [5]             ldb   VS_ObjIDB
67E9 20A1             (./engine/graphics):00094 [3]             bra   @loop
67EB B667C4           (./engine/graphics):00095 [5]     !       lda   VS_mem_pos
67EE 8020             (./engine/graphics):00096 [2]             suba  #$20
67F0 B767C4           (./engine/graphics):00097 [5]             sta   VS_mem_pos               ; restore to first buffer
67F3 39               (./engine/graphics):00098 [5]             rts
                      (/home/robin/githu):00066                 INCLUDE "./global/global-trailer-includes.asm"
                      (./global/global-t):00001         ; common utilities
                      (./global/global-t):00002             INCLUDE "./engine/InitGlobals.asm"
                      (./engine/InitGlob):00001         
67F4                  (./engine/InitGlob):00002         InitGlobals
67F4 CC0000           (./engine/InitGlob):00003 [3]             ldd   #0
                      (./engine/InitGlob):00004         
                      (./engine/InitGlob):00005                 ; clear direct_page data
67F7 8E9F00           (./engine/InitGlob):00006 [3]             ldx   #dp
67FA 8600             (./engine/InitGlob):00007 [2]             lda   #0
67FC A780             (./engine/InitGlob):00008 [4+2]   !       sta   ,x+
67FE 8CA000           (./engine/InitGlob):00009 [4]             cmpx  #dp+256
6801 26F9             (./engine/InitGlob):00010 [3]             bne   <
                      (./engine/InitGlob):00011         
                      (./engine/InitGlob):00012          ifdef DrawSprites
                      (./engine/InitGlob):00013                 ldd   #screen_left
                      (./engine/InitGlob):00014                 std   glb_camera_x_offset
                      (./engine/InitGlob):00015                 ldd   #screen_top
                      (./engine/InitGlob):00016                 std   glb_camera_y_offset
                      (./engine/InitGlob):00017          endc
                      (./engine/InitGlob):00018         
6803 8601             (./engine/InitGlob):00019 [2]             lda   #1
6805 B79FD5           (./engine/InitGlob):00020 [5]             sta   glb_alphaTiles
6808 39               (./engine/InitGlob):00021 [5]             rts
                      (./global/global-t):00003             INCLUDE "./engine/ram/BankSwitch.asm"
                      (./engine/ram/Bank):00001         ; WARNING those are subroutines, so no dp should be used
                      (./engine/ram/Bank):00002         ; because dp will be specific to caller
                      (./engine/ram/Bank):00003         
6809                  (./engine/ram/Bank):00004         SetCartPageA
6809 B79FD1           (./engine/ram/Bank):00005 [5]             sta   >glb_Page
680C 2A25             (./engine/ram/Bank):00006 [3]             bpl   @RAMPg
680E B6E7E6           (./engine/ram/Bank):00007 [5]             lda   >$E7E6
6811 84DF             (./engine/ram/Bank):00008 [2]             anda  #$DF                     ; passe le bit5 a 0 pour cartouche au lieu de 1 pour RAM
6813 B7E7E6           (./engine/ram/Bank):00009 [5]             sta   >$E7E6
6816 86F0             (./engine/ram/Bank):00010 [2]             lda   #$F0                     ; sortie du mode commande T.2
6818 B70555           (./engine/ram/Bank):00011 [5]             sta   >$0555                   ; dans le cas ou l'irq intervient en cours de changement de page
681B 86AA             (./engine/ram/Bank):00012 [2]             lda   #$AA                     ; sequence pour commutation de page T.2
681D B70555           (./engine/ram/Bank):00013 [5]             sta   >$0555
6820 44               (./engine/ram/Bank):00014 [2]             lsra                           ; lda   #$55
6821 B702AA           (./engine/ram/Bank):00015 [5]             sta   >$02AA
6824 86C0             (./engine/ram/Bank):00016 [2]             lda   #$C0
6826 B70555           (./engine/ram/Bank):00017 [5]             sta   >$0555
6829 B69FD1           (./engine/ram/Bank):00018 [5]             lda   >glb_Page
682C 847F             (./engine/ram/Bank):00019 [2]             anda  #$7F                     ; le bit 7 doit etre a 0        
682E B70555           (./engine/ram/Bank):00020 [5]             sta   >$0555                   ; selection de la page T.2 en zone cartouche
6831 2003             (./engine/ram/Bank):00021 [3]             bra   @rts
6833 B7E7E6           (./engine/ram/Bank):00022 [5]     @RAMPg  sta   >$E7E6                   ; selection de la page RAM en zone cartouche (bit 5 integre au numero de page)
6836 39               (./engine/ram/Bank):00023 [5]     @rts    rts
                      (./engine/ram/Bank):00024         
6837                  (./engine/ram/Bank):00025         SetCartPageB
6837 F79FD1           (./engine/ram/Bank):00026 [5]             stb   >glb_Page
683A 2A25             (./engine/ram/Bank):00027 [3]             bpl   @RAMPg
683C F6E7E6           (./engine/ram/Bank):00028 [5]             ldb   >$E7E6
683F C4DF             (./engine/ram/Bank):00029 [2]             andb  #$DF                     ; passe le bit5 a 0 pour cartouche au lieu de 1 pour RAM
6841 F7E7E6           (./engine/ram/Bank):00030 [5]             stb   >$E7E6
6844 C6F0             (./engine/ram/Bank):00031 [2]             ldb   #$F0                     ; sortie du mode commande T.2
6846 F70555           (./engine/ram/Bank):00032 [5]             stb   >$0555                   ; dans le cas ou l'irq intervient en cours de changement de page
6849 C6AA             (./engine/ram/Bank):00033 [2]             ldb   #$AA                     ; sequence pour commutation de page T.2
684B F70555           (./engine/ram/Bank):00034 [5]             stb   >$0555
684E 54               (./engine/ram/Bank):00035 [2]             lsrb                           ; lda   #$55
684F F702AA           (./engine/ram/Bank):00036 [5]             stb   >$02AA
6852 C6C0             (./engine/ram/Bank):00037 [2]             ldb   #$C0
6854 F70555           (./engine/ram/Bank):00038 [5]             stb   >$0555
6857 F69FD1           (./engine/ram/Bank):00039 [5]             ldb   >glb_Page
685A C47F             (./engine/ram/Bank):00040 [2]             andb  #$7F                     ; le bit 7 doit etre a 0        
685C F70555           (./engine/ram/Bank):00041 [5]             stb   >$0555                   ; selection de la page T.2 en zone cartouche
685F 2003             (./engine/ram/Bank):00042 [3]             bra   @rts
6861 F7E7E6           (./engine/ram/Bank):00043 [5]     @RAMPg  stb   >$E7E6                   ; selection de la page RAM en zone cartouche (bit 5 integre au numero de page)
6864 39               (./engine/ram/Bank):00044 [5]     @rts    rts
                      (./engine/ram/Bank):00045         
6865                  (./engine/ram/Bank):00046         GetCartPageA
6865 B69FD1           (./engine/ram/Bank):00047 [5]             lda   >glb_Page                ; glb_page at 0 means that glb_page variable is not in use
6868 2603             (./engine/ram/Bank):00048 [3]             bne   @rts                     ; usefull when we dont work with T2 (ex: optimized tilemap that use only RAM)
686A B6E7E6           (./engine/ram/Bank):00049 [5]             lda   >$E7E6
686D 39               (./engine/ram/Bank):00050 [5]     @rts    rts
                      (./engine/ram/Bank):00051         
686E                  (./engine/ram/Bank):00052         GetCartPageB
686E F69FD1           (./engine/ram/Bank):00053 [5]             ldb   >glb_Page                ; glb_page at 0 means that glb_page variable is not in use
6871 2603             (./engine/ram/Bank):00054 [3]             bne   @rts                     ; usefull when we dont work with T2 (ex: optimized tilemap that use only RAM)
6873 F6E7E6           (./engine/ram/Bank):00055 [5]             ldb   >$E7E6
6876 39               (./engine/ram/Bank):00056 [5]     @rts   rts
                      (./engine/ram/Bank):00057         
                      (./global/global-t):00004             INCLUDE "./engine/palette/PalUpdateNow.asm"
                      (./engine/palette/):00001         * ---------------------------------------------------------------------------
                      (./engine/palette/):00002         * PalUpdateNow
                      (./engine/palette/):00003         * ----------------
                      (./engine/palette/):00004         * Subroutine to update palette right now
                      (./engine/palette/):00005         *
                      (./engine/palette/):00006         * input REG : none
                      (./engine/palette/):00007         * reset REG : [d] [x] [y]
                      (./engine/palette/):00008         * ---------------------------------------------------------------------------
                      (./engine/palette/):00009         
6877 FF               (./engine/palette/):00010         PalRefresh      fcb   $FF
6878 687A             (./engine/palette/):00011         Pal_current     fdb   Pal_buffer
687A 0000000000000000 (./engine/palette/):00012         Pal_buffer      fill  0,$20          
     0000000000000000
     0000000000000000
     0000000000000000
                      (./engine/palette/):00013         
     E7               (./engine/palette/):00014                 setdp $E7
689A                  (./engine/palette/):00015         PalUpdateNow 
689A 7D6877           (./engine/palette/):00016 [7]             tst   PalRefresh
689D 2679             (./engine/palette/):00017 [3]             bne   @rts
689F 3408             (./engine/palette/):00018 [5+1]           pshs  dp
68A1 CC00E7           (./engine/palette/):00019 [3]             ldd   #$E7
68A4 1F9B             (./engine/palette/):00020 [6]             tfr   b,dp  
68A6 BE6878           (./engine/palette/):00021 [6]             ldx   Pal_current
68A9 97DB             (./engine/palette/):00022 [4]             sta   <$DB                     * color index 0
68AB EC84             (./engine/palette/):00023 [5+0]   !       ldd   ,x                       * load color
68AD 97DA             (./engine/palette/):00024 [4]             sta   <$DA                     * set green and red
68AF D7DA             (./engine/palette/):00025 [4]             stb   <$DA                     * set blue
68B1 EC02             (./engine/palette/):00026 [5+1]           ldd   2,x
68B3 97DA             (./engine/palette/):00027 [4]             sta   <$DA
68B5 D7DA             (./engine/palette/):00028 [4]             stb   <$DA
68B7 EC04             (./engine/palette/):00029 [5+1]           ldd   4,x
68B9 97DA             (./engine/palette/):00030 [4]             sta   <$DA
68BB D7DA             (./engine/palette/):00031 [4]             stb   <$DA
68BD EC06             (./engine/palette/):00032 [5+1]           ldd   6,x
68BF 97DA             (./engine/palette/):00033 [4]             sta   <$DA
68C1 D7DA             (./engine/palette/):00034 [4]             stb   <$DA
68C3 EC08             (./engine/palette/):00035 [5+1]           ldd   8,x
68C5 97DA             (./engine/palette/):00036 [4]             sta   <$DA
68C7 D7DA             (./engine/palette/):00037 [4]             stb   <$DA
68C9 EC0A             (./engine/palette/):00038 [5+1]           ldd   10,x
68CB 97DA             (./engine/palette/):00039 [4]             sta   <$DA
68CD D7DA             (./engine/palette/):00040 [4]             stb   <$DA
68CF EC0C             (./engine/palette/):00041 [5+1]           ldd   12,x
68D1 97DA             (./engine/palette/):00042 [4]             sta   <$DA
68D3 D7DA             (./engine/palette/):00043 [4]             stb   <$DA
68D5 EC0E             (./engine/palette/):00044 [5+1]           ldd   14,x
68D7 97DA             (./engine/palette/):00045 [4]             sta   <$DA
68D9 D7DA             (./engine/palette/):00046 [4]             stb   <$DA
68DB EC8810           (./engine/palette/):00047 [5+1]           ldd   16,x
68DE 97DA             (./engine/palette/):00048 [4]             sta   <$DA
68E0 D7DA             (./engine/palette/):00049 [4]             stb   <$DA
68E2 EC8812           (./engine/palette/):00050 [5+1]           ldd   18,x
68E5 97DA             (./engine/palette/):00051 [4]             sta   <$DA
68E7 D7DA             (./engine/palette/):00052 [4]             stb   <$DA
68E9 EC8814           (./engine/palette/):00053 [5+1]           ldd   20,x
68EC 97DA             (./engine/palette/):00054 [4]             sta   <$DA
68EE D7DA             (./engine/palette/):00055 [4]             stb   <$DA
68F0 EC8816           (./engine/palette/):00056 [5+1]           ldd   22,x
68F3 97DA             (./engine/palette/):00057 [4]             sta   <$DA
68F5 D7DA             (./engine/palette/):00058 [4]             stb   <$DA
68F7 EC8818           (./engine/palette/):00059 [5+1]           ldd   24,x
68FA 97DA             (./engine/palette/):00060 [4]             sta   <$DA
68FC D7DA             (./engine/palette/):00061 [4]             stb   <$DA
68FE EC881A           (./engine/palette/):00062 [5+1]           ldd   26,x
6901 97DA             (./engine/palette/):00063 [4]             sta   <$DA
6903 D7DA             (./engine/palette/):00064 [4]             stb   <$DA
6905 EC881C           (./engine/palette/):00065 [5+1]           ldd   28,x
6908 97DA             (./engine/palette/):00066 [4]             sta   <$DA
690A D7DA             (./engine/palette/):00067 [4]             stb   <$DA
690C EC881E           (./engine/palette/):00068 [5+1]           ldd   30,x
690F 97DA             (./engine/palette/):00069 [4]             sta   <$DA
6911 D7DA             (./engine/palette/):00070 [4]             stb   <$DA
6913 736877           (./engine/palette/):00071 [7]             com   PalRefresh               * update flag, next run this routine will be ignored if no pal update is requested
6916 3588             (./engine/palette/):00072 [5+3]           puls dp,pc
6918 39               (./engine/palette/):00073 [5]     @rts    rts
                      (./engine/palette/):00074         
     9F               (./engine/palette/):00075                 setdp dp/256
                      (./global/global-t):00005             INCLUDE "./engine/ram/ClearDataMemory.asm"
                      (./engine/ram/Clea):00001         ********************************************************************************
                      (./engine/ram/Clea):00002         * Clear memory in data area (16Ko)
                      (./engine/ram/Clea):00003         * [X] : word that will be copied in the whole page
                      (./engine/ram/Clea):00004         ********************************************************************************
                      (./engine/ram/Clea):00005         
6919                  (./engine/ram/Clea):00006         ClearDataMem 
6919 3448             (./engine/ram/Clea):00007 [5+3]           pshs  u,dp
691B 10FF6949         (./engine/ram/Clea):00008 [7]             sts   ClearDataMem_3+2
691F 10CEE000         (./engine/ram/Clea):00009 [4]             lds   #$E000
6923 3384             (./engine/ram/Clea):00010 [4+0]           leau  ,x
6925 3184             (./engine/ram/Clea):00011 [4+0]           leay  ,x
6927 1F10             (./engine/ram/Clea):00012 [6]             tfr   x,d
6929 1F8B             (./engine/ram/Clea):00013 [6]             tfr   a,dp
692B                  (./engine/ram/Clea):00014         ClearDataMem_2
692B 347E             (./engine/ram/Clea):00015 [5+9]           pshs  u,y,x,dp,b,a
692D 347E             (./engine/ram/Clea):00016 [5+9]           pshs  u,y,x,dp,b,a
692F 347E             (./engine/ram/Clea):00017 [5+9]           pshs  u,y,x,dp,b,a
6931 347E             (./engine/ram/Clea):00018 [5+9]           pshs  u,y,x,dp,b,a
6933 347E             (./engine/ram/Clea):00019 [5+9]           pshs  u,y,x,dp,b,a
6935 347E             (./engine/ram/Clea):00020 [5+9]           pshs  u,y,x,dp,b,a
6937 347E             (./engine/ram/Clea):00021 [5+9]           pshs  u,y,x,dp,b,a
6939 347E             (./engine/ram/Clea):00022 [5+9]           pshs  u,y,x,dp,b,a
693B 347E             (./engine/ram/Clea):00023 [5+9]           pshs  u,y,x,dp,b,a
693D 3478             (./engine/ram/Clea):00024 [5+7]           pshs  u,y,x,dp
693F 118CA010         (./engine/ram/Clea):00025 [5]             cmps  #$A010                 
6943 26E6             (./engine/ram/Clea):00026 [3]             bne   ClearDataMem_2
6945 33E4             (./engine/ram/Clea):00027 [4+0]           leau  ,s          
6947                  (./engine/ram/Clea):00028         ClearDataMem_3        
6947 10CE0000         (./engine/ram/Clea):00029 [4]             lds   #$0000        ; start of memory should not be written with S as an index because of IRQ  
694B 3636             (./engine/ram/Clea):00030 [5+6]           pshu  d,x,y         ; saving 12 bytes + (2 bytes * _sr calls) inside IRQ routine
694D 3636             (./engine/ram/Clea):00031 [5+6]           pshu  d,x,y         ; DEPENDENCY on nb of _sr calls inside IRQ routine (here 16 bytes of margin)
694F 3616             (./engine/ram/Clea):00032 [5+4]           pshu  d,x
6951 35C8             (./engine/ram/Clea):00033 [5+5]           puls  dp,u,pc
                      (./global/global-t):00006         
                      (./global/global-t):00007             INCLUDE "./engine/object-management/RunObjects.asm"
                      (./engine/object-m):00001         * ---------------------------------------------------------------------------
                      (./engine/object-m):00002         * RunObjects
                      (./engine/object-m):00003         * ------------
                      (./engine/object-m):00004         * Subroutines to run, load and unload objects
                      (./engine/object-m):00005         *
                      (./engine/object-m):00006         * RunObjects
                      (./engine/object-m):00007         * ----------
                      (./engine/object-m):00008         * Run all object's code
                      (./engine/object-m):00009         *
                      (./engine/object-m):00010         * LoadObject_u, LoadObject_x
                      (./engine/object-m):00011         * --------------------------
                      (./engine/object-m):00012         * Find a empty object slot and link the new object in run list
                      (./engine/object-m):00013         * return zero flag when no more memory avaible
                      (./engine/object-m):00014         * return the allocated memory in u or x
                      (./engine/object-m):00015         *
                      (./engine/object-m):00016         * UnloadObject_u, UnloadObject_x
                      (./engine/object-m):00017         * ------------------------------
                      (./engine/object-m):00018         * Unlink object (u or x) from run list and clear object's data
                      (./engine/object-m):00019         *
                      (./engine/object-m):00020         * ---------------------------------------------------------------------------
                      (./engine/object-m):00021         
6953 0000             (./engine/object-m):00022         object_list_first fdb   0
6955 0000             (./engine/object-m):00023         object_list_last  fdb   0
                      (./engine/object-m):00024         
                      (./engine/object-m):00025         ; Stack Structure to hold free object slot addresses
6957 0000000000000000 (./engine/object-m):00026         STACK_SLOT_ADDRESS FILL 0,nb_dynamic_objects*2 
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
697F                  (./engine/object-m):00027         STACK_SLOT_ADDRESS_END   
697F 0000             (./engine/object-m):00028         STACK_POINTER FDB 0 ; Stack pointer on the STACK
                      (./engine/object-m):00029         
                      (./engine/object-m):00030         ; loop to init the Stack
6981                  (./engine/object-m):00031         InitStack
6981 CE697F           (./engine/object-m):00032 [3]             ldu   #STACK_SLOT_ADDRESS_END  
6984 8E6637           (./engine/object-m):00033 [3]             ldx   #Dynamic_Object_RAM_End-object_size
6987 3610             (./engine/object-m):00034 [5+2]   @loop   pshu  x
6989 3088C1           (./engine/object-m):00035 [4+1]           leax  -object_size,x
698C 11836957         (./engine/object-m):00036 [5]             cmpu  #STACK_SLOT_ADDRESS
6990 26F5             (./engine/object-m):00037 [3]             bne   @loop
6992 FF697F           (./engine/object-m):00038 [6]             stu   STACK_POINTER    
6995 39               (./engine/object-m):00039 [5]             rts    
                      (./engine/object-m):00040         
6996                  (./engine/object-m):00041         RunObjects
6996 FE6953           (./engine/object-m):00042 [6]             ldu   object_list_first
6999 2722             (./engine/object-m):00043 [3]             beq   @rts
699B E6C4             (./engine/object-m):00044 [4+0]   !       ldb   id,u                     ; Load an object with id=0 allows to book a empty slot
699D 271F             (./engine/object-m):00045 [3]             beq   @skip                    ; that will be usable later, we need to skip in this case (no object index)
699F 8E6BEB           (./engine/object-m):00046 [3]             ldx   #Obj_Index_Page
69A2 3A               (./engine/object-m):00047 [3]             abx
69A3 A684             (./engine/object-m):00048 [4+0]           lda   ,x              
                      (./engine/object-m):00049                 _SetCartPageA         
                      (    _SetCartPageA):00001          IFDEF T2
69A5 BD6809           (    _SetCartPageA):00002 [8]             jsr   SetCartPageA
                      (    _SetCartPageA):00003          ELSE
                      (    _SetCartPageA):00004                 sta   $E7E6                    ; selection de la page RAM en zone cartouche
                      (    _SetCartPageA):00005          ENDC
69A8 58               (./engine/object-m):00050 [2]             aslb                  
69A9 8E6BEE           (./engine/object-m):00051 [3]             ldx   #Obj_Index_Address
69AC 3A               (./engine/object-m):00052 [3]             abx
69AD EC45             (./engine/object-m):00053 [5+1]           ldd   run_object_next,u        ; in case of self-deletion by current object
69AF FD69B9           (./engine/object-m):00054 [6]             std   object_list_next         ; we need to save the next object in run list
69B2 AD94             (./engine/object-m):00055 [7+3]           jsr   [,x]              
69B4 EE45             (./engine/object-m):00056 [5+1]           ldu   run_object_next,u
69B6 26E3             (./engine/object-m):00057 [3]             bne   <
69B8 CE0000           (./engine/object-m):00058 [3]             ldu   #0
     69B9             (./engine/object-m):00059         object_list_next equ   *-2    
69BB 26DE             (./engine/object-m):00060 [3]             bne   <         
69BD 39               (./engine/object-m):00061 [5]     @rts    rts   
69BE EE45             (./engine/object-m):00062 [5+1]   @skip   ldu   run_object_next,u
69C0 26D9             (./engine/object-m):00063 [3]             bne   <
69C2 39               (./engine/object-m):00064 [5]             rts
                      (./engine/object-m):00065         
69C3                  (./engine/object-m):00066         LoadObject_u
69C3 FE697F           (./engine/object-m):00067 [6]             ldu STACK_POINTER              ; is there a free slot ?
69C6 1183697F         (./engine/object-m):00068 [5]             cmpu #STACK_SLOT_ADDRESS_END   ; 
69CA 2601             (./engine/object-m):00069 [3]             bne @link                      ; Yes a slot is free, let's get it and link it
69CC 39               (./engine/object-m):00070 [5]             rts                            ; return z=1 when not found
69CD                  (./engine/object-m):00071         @link
69CD 3706             (./engine/object-m):00072 [5+2]           pulu D                         ; get a the free slot from the slot stack
69CF FF697F           (./engine/object-m):00073 [6]             stu STACK_POINTER              ; updating the slot stack pointer
69D2 1F03             (./engine/object-m):00074 [6]             tfr D,U                        ; U is now pointing to the free slot address        
69D4 3410             (./engine/object-m):00075 [5+2]           pshs  x
69D6 BE6955           (./engine/object-m):00076 [6]             ldx   object_list_last
69D9 2709             (./engine/object-m):00077 [3]             beq   >
69DB EF05             (./engine/object-m):00078 [5+1]           stu   run_object_next,x
69DD FF6955           (./engine/object-m):00079 [6]             stu   object_list_last
69E0 AF43             (./engine/object-m):00080 [5+1]           stx   run_object_prev,u
69E2 3590             (./engine/object-m):00081 [5+4]           puls  x,pc                     ; return z=0 when found
69E4 FF6955           (./engine/object-m):00082 [6]     !       stu   object_list_last
69E7 FF6953           (./engine/object-m):00083 [6]             stu   object_list_first
69EA 3590             (./engine/object-m):00084 [5+4]           puls  x,pc                     ; return z=0 when found
                      (./engine/object-m):00085         
69EC                  (./engine/object-m):00086         LoadObject_x
69EC BE697F           (./engine/object-m):00087 [6]             ldx STACK_POINTER              ; is there a free slot ?
69EF 8C697F           (./engine/object-m):00088 [4]             cmpx #STACK_SLOT_ADDRESS_END   ; 
69F2 2601             (./engine/object-m):00089 [3]             bne @link                      ; Yes a slot is free, let's get it and link it
69F4 39               (./engine/object-m):00090 [5]             rts                            ; return z=1 when not found
69F5                  (./engine/object-m):00091         @link
69F5 3440             (./engine/object-m):00092 [5+2]           pshs  u                        ; let's save U
69F7 3302             (./engine/object-m):00093 [4+1]           leau 2,x                        ; X contains de address of the stack, so let's transfer it to U
69F9 AE84             (./engine/object-m):00094 [5+0]           ldx ,x                         ; get a the free slot from the slot stack, X points this free slot
69FB FF697F           (./engine/object-m):00095 [6]             stu STACK_POINTER              ; updating the slot stack pointer
69FE FE6955           (./engine/object-m):00096 [6]             ldu   object_list_last
6A01 2709             (./engine/object-m):00097 [3]             beq   >
6A03 AF45             (./engine/object-m):00098 [5+1]           stx   run_object_next,u
6A05 BF6955           (./engine/object-m):00099 [6]             stx   object_list_last
6A08 EF03             (./engine/object-m):00100 [5+1]           stu   run_object_prev,x
6A0A 35C0             (./engine/object-m):00101 [5+4]           puls  u,pc                     ; return z=0 when found
6A0C BF6955           (./engine/object-m):00102 [6]     !       stx   object_list_last
6A0F BF6953           (./engine/object-m):00103 [6]             stx   object_list_first
6A12 35C0             (./engine/object-m):00104 [5+4]           puls  u,pc                     ; return z=0 when found
                      (./engine/object-m):00105         
6A14                  (./engine/object-m):00106         UnloadObject_u
6A14 3476             (./engine/object-m):00107 [5+8]           pshs  d,x,y,u
                      (./engine/object-m):00108                 ; let's update the stack
6A16 1F30             (./engine/object-m):00109 [6]             tfr U,D
6A18 FE697F           (./engine/object-m):00110 [6]             ldu STACK_POINTER
6A1B 3606             (./engine/object-m):00111 [5+2]           pshu D
6A1D FF697F           (./engine/object-m):00112 [6]             stu STACK_POINTER
6A20 1F03             (./engine/object-m):00113 [6]             tfr D,U
                      (./engine/object-m):00114                 ; done
6A22 11B369B9         (./engine/object-m):00115 [8]             cmpu  object_list_next         ; if current object to delete
6A26 2609             (./engine/object-m):00116 [3]             bne   >                        ; is the following to execute
6A28 10AE45           (./engine/object-m):00117 [6+1]           ldy   run_object_next,u
6A2B 10BF69B9         (./engine/object-m):00118 [7]             sty   object_list_next         ; then update the next object in RunObjects routine
6A2F 2716             (./engine/object-m):00119 [3]             beq   @noNext
6A31 10AE45           (./engine/object-m):00120 [6+1]   !       ldy   run_object_next,u
6A34 2711             (./engine/object-m):00121 [3]             beq   @noNext
6A36 AE43             (./engine/object-m):00122 [5+1]           ldx   run_object_prev,u
6A38 AF23             (./engine/object-m):00123 [5+1]           stx   run_object_prev,y
6A3A 2705             (./engine/object-m):00124 [3]             beq   @noPrev
6A3C 10AF05           (./engine/object-m):00125 [6+1]           sty   run_object_next,x
6A3F 2015             (./engine/object-m):00126 [3]             bra   @clearObj
6A41 10BF6953         (./engine/object-m):00127 [7]     @noPrev sty   object_list_first
6A45 200F             (./engine/object-m):00128 [3]             bra   @clearObj
6A47 AE43             (./engine/object-m):00129 [5+1]   @noNext ldx   run_object_prev,u
6A49 2703             (./engine/object-m):00130 [3]             beq   >
6A4B 10AF05           (./engine/object-m):00131 [6+1]           sty   run_object_next,x
6A4E BF6955           (./engine/object-m):00132 [6]     !       stx   object_list_last
6A51 2603             (./engine/object-m):00133 [3]             bne   @clearObj
6A53 BF6953           (./engine/object-m):00134 [6]             stx   object_list_first
6A56                  (./engine/object-m):00135         @clearObj
6A56 33C83F           (./engine/object-m):00136 [4+1]           leau  object_size,u ; move to end of data object structure
6A59                  (./engine/object-m):00137         UnloadObject_clear
6A59 CC0000           (./engine/object-m):00138 [3]             ldd   #$0000        ; init regs to zero
6A5C 8E0000           (./engine/object-m):00139 [3]             ldx   #$0000
6A5F 3184             (./engine/object-m):00140 [4+0]           leay  ,x
                      (./engine/object-m):00141         
6A61 3636363636363636 (./engine/object-m):00142                 fill $36,(object_size/6)*2 ; generate object_size/6 assembly instructions $3636 (pshu  d,x,y) 
     3636363636363636
     36363636
                      (./engine/object-m):00143         
                      (./engine/object-m):00144                 IFEQ object_size%6-5
                      (./engine/object-m):00145                 pshu  a,x,y
                      (./engine/object-m):00146                 ENDC
                      (./engine/object-m):00147         
                      (./engine/object-m):00148                 IFEQ object_size%6-4
                      (./engine/object-m):00149                 pshu  d,x
                      (./engine/object-m):00150                 ENDC
                      (./engine/object-m):00151         
                      (./engine/object-m):00152                 IFEQ object_size%6-3
6A75 3612             (./engine/object-m):00153 [5+3]           pshu  a,x
                      (./engine/object-m):00154                 ENDC
                      (./engine/object-m):00155         
                      (./engine/object-m):00156                 IFEQ object_size%6-2
                      (./engine/object-m):00157                 pshu  d
                      (./engine/object-m):00158                 ENDC
                      (./engine/object-m):00159         
                      (./engine/object-m):00160                 IFEQ object_size%6-1
                      (./engine/object-m):00161                 pshu  a
                      (./engine/object-m):00162                 ENDC
                      (./engine/object-m):00163         
                      (./engine/object-m):00164                 
                      (./engine/object-m):00165         
6A77 35F6             (./engine/object-m):00166 [5+10]          puls  d,x,y,u,pc
                      (./engine/object-m):00167         
6A79                  (./engine/object-m):00168         UnloadObject_x
6A79 3476             (./engine/object-m):00169 [5+8]           pshs  d,x,y,u
                      (./engine/object-m):00170                 ; let's update the stack
6A7B FE697F           (./engine/object-m):00171 [6]             ldu STACK_POINTER
6A7E 3610             (./engine/object-m):00172 [5+2]           pshu X
6A80 FF697F           (./engine/object-m):00173 [6]             stu STACK_POINTER
                      (./engine/object-m):00174                 ; done
6A83 BC69B9           (./engine/object-m):00175 [7]             cmpx  object_list_next         ; if current object to delete
6A86 2626             (./engine/object-m):00176 [3]             bne   >                        ; is the following to execute
6A88 10AE05           (./engine/object-m):00177 [6+1]           ldy   run_object_next,x
6A8B 10BF69B9         (./engine/object-m):00178 [7]             sty   object_list_next         ; then update the next object in RunObjects routine
6A8F 2716             (./engine/object-m):00179 [3]             beq   @noNext
6A91 10AE05           (./engine/object-m):00180 [6+1]           ldy   run_object_next,x 
6A94 2711             (./engine/object-m):00181 [3]             beq   @noNext
6A96 EE03             (./engine/object-m):00182 [5+1]           ldu   run_object_prev,x
6A98 EF23             (./engine/object-m):00183 [5+1]           stu   run_object_prev,y
6A9A 2705             (./engine/object-m):00184 [3]             beq   @noPrev
6A9C 10AF45           (./engine/object-m):00185 [6+1]           sty   run_object_next,u
6A9F 2015             (./engine/object-m):00186 [3]             bra   @clearObj
6AA1 10BF6953         (./engine/object-m):00187 [7]     @noPrev sty   object_list_first
6AA5 200F             (./engine/object-m):00188 [3]             bra   @clearObj
6AA7 EE03             (./engine/object-m):00189 [5+1]   @noNext ldu   run_object_prev,x
6AA9 2703             (./engine/object-m):00190 [3]             beq   >
6AAB 10AF45           (./engine/object-m):00191 [6+1]           sty   run_object_next,u
6AAE FF6955           (./engine/object-m):00192 [6]     !       stu   object_list_last
6AB1 2603             (./engine/object-m):00193 [3]             bne   @clearObj
6AB3 FF6953           (./engine/object-m):00194 [6]             stu   object_list_first
6AB6                  (./engine/object-m):00195         @clearObj
6AB6 33883F           (./engine/object-m):00196 [4+1]           leau  object_size,x ; move to end of data object structure
6AB9 209E             (./engine/object-m):00197 [3]             bra   UnloadObject_clear
                      (./engine/object-m):00198         
6ABB                  (./engine/object-m):00199         ManagedObjects_ClearAll
6ABB CC0000           (./engine/object-m):00200 [3]             ldd   #0
6ABE 8E0000           (./engine/object-m):00201 [3]             ldx   #0
6AC1 3184             (./engine/object-m):00202 [4+0]           leay  ,x
6AC3 CE6676           (./engine/object-m):00203 [3]             ldu   #Dynamic_Object_RAM_End
6AC6 11836190         (./engine/object-m):00204 [5]     !       cmpu  #Dynamic_Object_RAM+6
6ACA 2304             (./engine/object-m):00205 [3]             bls   >
6ACC 3636             (./engine/object-m):00206 [5+6]           pshu  d,x,y
6ACE 20F6             (./engine/object-m):00207 [3]             bra   <
6AD0 3602             (./engine/object-m):00208 [5+1]   !       pshu  a
6AD2 1183618A         (./engine/object-m):00209 [5]             cmpu  #Dynamic_Object_RAM
6AD6 26F8             (./engine/object-m):00210 [3]             bne   <
6AD8 FD6953           (./engine/object-m):00211 [6]             std   object_list_first
6ADB FD6955           (./engine/object-m):00212 [6]             std   object_list_last
6ADE 39               (./engine/object-m):00213 [5]             rts
                      (./global/global-t):00008             INCLUDE "./engine/level-management/LoadGameMode.asm"
                      (./engine/level-ma):00001         ********************************************************************************
                      (./engine/level-ma):00002         * LoadGameMode - Charge un nouveau niveau de jeu si requis
                      (./engine/level-ma):00003         * ------------------------------------------------------------------------------
                      (./engine/level-ma):00004         * 
                      (./engine/level-ma):00005         *
                      (./engine/level-ma):00006         ********************************************************************************
                      (./engine/level-ma):00007         
6ADF 00               (./engine/level-ma):00008         GameMode           fcb   $00
6AE0 00               (./engine/level-ma):00009         ChangeGameMode     fcb   $00
6AE1 00               (./engine/level-ma):00010         glb_Cur_Game_Mode  fcb   $00
6AE2 00               (./engine/level-ma):00011         glb_Next_Game_Mode fcb   $00
                      (./engine/level-ma):00012         
6AE3                  (./engine/level-ma):00013         LoadGameMode
6AE3 B66AE0           (./engine/level-ma):00014 [5]             lda   ChangeGameMode
6AE6 2601             (./engine/level-ma):00015 [3]             bne   LoadGameModeNow
6AE8 39               (./engine/level-ma):00016 [5]             rts
                      (./engine/level-ma):00017                 
6AE9                  (./engine/level-ma):00018         LoadGameModeNow
                      (./engine/level-ma):00019         
                      (./engine/level-ma):00020          IFDEF T2
6AE9 8680             (./engine/level-ma):00021 [2]             lda   #$80                     ; ROM page 0
                      (./engine/level-ma):00022                 _SetCartPageA
                      (    _SetCartPageA):00001          IFDEF T2
6AEB BD6809           (    _SetCartPageA):00002 [8]             jsr   SetCartPageA
                      (    _SetCartPageA):00003          ELSE
                      (    _SetCartPageA):00004                 sta   $E7E6                    ; selection de la page RAM en zone cartouche
                      (    _SetCartPageA):00005          ENDC
                      (./engine/level-ma):00023                        
6AEE B66ADF           (./engine/level-ma):00024 [5]             lda   GameMode
6AF1 F66AE1           (./engine/level-ma):00025 [5]             ldb   glb_Cur_Game_Mode
6AF4 7E0112           (./engine/level-ma):00026 [4]             jmp   Build_RAMLoaderManager          
                      (./engine/level-ma):00027          ELSE
                      (./engine/level-ma):00028                 ldb   #$64                     ; Page 4 contains RAMLoaderManager
                      (./engine/level-ma):00029                 stb   $E7E6
                      (./engine/level-ma):00030                 lda   GameMode
                      (./engine/level-ma):00031                 ldb   glb_Cur_Game_Mode
                      (./engine/level-ma):00032                 jmp   >$0000          
                      (./engine/level-ma):00033          ENDC
                      (./engine/level-ma):00034                     
                      (./global/global-t):00009             
                      (./global/global-t):00010         ; IRQ
                      (./global/global-t):00011             INCLUDE "./engine/irq/Irq.asm"        
                      (./engine/irq/Irq.):00001         
                      (./engine/irq/Irq.):00002         * ---------------------------------------------------------------------------
                      (./engine/irq/Irq.):00003         * IRQ Manager
                      (./engine/irq/Irq.):00004         * ---------------------------------------------------------------------------
                      (./engine/irq/Irq.):00005         *
                      (./engine/irq/Irq.):00006         * IrqSet50Hz
                      (./engine/irq/Irq.):00007         * -----------------------------------
                      (./engine/irq/Irq.):00008         * input REG : [none]
                      (./engine/irq/Irq.):00009         * reset REG : [d]
                      (./engine/irq/Irq.):00010         *
                      (./engine/irq/Irq.):00011         * IrqOn
                      (./engine/irq/Irq.):00012         * -----------------------------------
                      (./engine/irq/Irq.):00013         * reset REG : [a]
                      (./engine/irq/Irq.):00014         *
                      (./engine/irq/Irq.):00015         * IrqOff
                      (./engine/irq/Irq.):00016         * -----------------------------------
                      (./engine/irq/Irq.):00017         * reset REG : [a]
                      (./engine/irq/Irq.):00018         *
                      (./engine/irq/Irq.):00019         * IrqSync
                      (./engine/irq/Irq.):00020         * -----------------------------------
                      (./engine/irq/Irq.):00021         * This routine sync irq timer with a desired screen line refresh
                      (./engine/irq/Irq.):00022         * The timer (irq duration) is an input parameter (usually Irq_one_frame)
                      (./engine/irq/Irq.):00023         * input REG : [a] screen line (0-255)
                      (./engine/irq/Irq.):00024         *             [x] timer value
                      (./engine/irq/Irq.):00025         * reset REG : [d]
                      (./engine/irq/Irq.):00026         * feature request - implement a screen line range of 0-311
                      (./engine/irq/Irq.):00027         *
                      (./engine/irq/Irq.):00028         * IrqManager (irq call)
                      (./engine/irq/Irq.):00029         * -----------------------------------
                      (./engine/irq/Irq.):00030         * This routine run all requested engine code before and after the user irq
                      (./engine/irq/Irq.):00031         * routine (in Irq_user_routine)
                      (./engine/irq/Irq.):00032         * input REG : [dp] $E7 (set by the monitor)
                      (./engine/irq/Irq.):00033         * reset REG : [none]
                      (./engine/irq/Irq.):00034         *
                      (./engine/irq/Irq.):00035         * Special mode (glb_Page==0) is when page switching does not need to test
                      (./engine/irq/Irq.):00036         * if RAM or ROM is in use. In this case RAM is always expected as page type.
                      (./engine/irq/Irq.):00037         * This allows the use of <$E6 register without calling engine macro for
                      (./engine/irq/Irq.):00038         * page switch, thus it reduces the cycles cost. Used in tile rendering.
                      (./engine/irq/Irq.):00039         *
                      (./engine/irq/Irq.):00040         * Example of user routines (may be grouped in a subroutine) :
                      (./engine/irq/Irq.):00041         * - PalUpdateNow
                      (./engine/irq/Irq.):00042         * - PalCycling
                      (./engine/irq/Irq.):00043         * - PalRaster_1c
                      (./engine/irq/Irq.):00044         * - MusicFrame
                      (./engine/irq/Irq.):00045         * - PSGFrame
                      (./engine/irq/Irq.):00046         * - IrqObjSmps
                      (./engine/irq/Irq.):00047         * - IrqTimer
                      (./engine/irq/Irq.):00048         *
                      (./engine/irq/Irq.):00049         * ---------------------------------------------------------------------------
                      (./engine/irq/Irq.):00050         
6AF7 0000             (./engine/irq/Irq.):00051         Irq_user_routine fdb 0                 ; user irq routine called by IrqManager 
     4DFF             (./engine/irq/Irq.):00052         Irq_one_frame    equ 312*64-1          ; one frame timer (lines*cycles_per_lines-1), timer launch at -1
     0040             (./engine/irq/Irq.):00053         Irq_one_line     equ 64
                      (./engine/irq/Irq.):00054                
6AF9                  (./engine/irq/Irq.):00055         IrqInit
6AF9 CC6B6C           (./engine/irq/Irq.):00056 [3]             ldd   #IrqManager
6AFC FD6027           (./engine/irq/Irq.):00057 [6]             std   TIMERPT
6AFF 39               (./engine/irq/Irq.):00058 [5]             rts
                      (./engine/irq/Irq.):00059         
6B00                  (./engine/irq/Irq.):00060         IrqSet50Hz
6B00 C642             (./engine/irq/Irq.):00061 [2]             ldb   #$42
6B02 F7E7C5           (./engine/irq/Irq.):00062 [5]             stb   MC6846.TCR               ; timer precision x8
6B05 CC4DFF           (./engine/irq/Irq.):00063 [3]             ldd   #Irq_one_frame           ; on every frame
6B08 FDE7C6           (./engine/irq/Irq.):00064 [6]             std   MC6846.TMSB
6B0B BD6B0F           (./engine/irq/Irq.):00065 [8]             jsr   IrqOn   
6B0E 39               (./engine/irq/Irq.):00066 [5]             rts
                      (./engine/irq/Irq.):00067                
6B0F                  (./engine/irq/Irq.):00068         IrqOn         
6B0F B66019           (./engine/irq/Irq.):00069 [5]             lda   $6019                           
6B12 8A20             (./engine/irq/Irq.):00070 [2]             ora   #$20
6B14 B76019           (./engine/irq/Irq.):00071 [5]             sta   $6019                    ; STATUS register
6B17 1CEF             (./engine/irq/Irq.):00072 [3]             andcc #$EF                     ; tell 6809 to activate irq
6B19 39               (./engine/irq/Irq.):00073 [5]             rts
                      (./engine/irq/Irq.):00074                 
6B1A                  (./engine/irq/Irq.):00075         IrqOff 
6B1A B66019           (./engine/irq/Irq.):00076 [5]             lda   $6019                           
6B1D 84DF             (./engine/irq/Irq.):00077 [2]             anda  #$DF
6B1F B76019           (./engine/irq/Irq.):00078 [5]             sta   $6019                    ; STATUS register
6B22 1A10             (./engine/irq/Irq.):00079 [3]             orcc  #$10                     ; tell 6809 to inactivate irq
6B24 39               (./engine/irq/Irq.):00080 [5]             rts
                      (./engine/irq/Irq.):00081         
6B25                  (./engine/irq/Irq.):00082         IrqPause
6B25 3402             (./engine/irq/Irq.):00083 [5+1]           pshs  a
6B27 B66019           (./engine/irq/Irq.):00084 [5]             lda   $6019
6B2A 8420             (./engine/irq/Irq.):00085 [2]             anda  #$20
6B2C 2607             (./engine/irq/Irq.):00086 [3]             bne   @irqoff
6B2E 8600             (./engine/irq/Irq.):00087 [2]             lda   #0
6B30 B76B42           (./engine/irq/Irq.):00088 [5]             sta   @irqst
6B33 2008             (./engine/irq/Irq.):00089 [3]             bra   >
6B35 8601             (./engine/irq/Irq.):00090 [2]     @irqoff lda   #1
6B37 B76B42           (./engine/irq/Irq.):00091 [5]             sta   @irqst
6B3A BD6B1A           (./engine/irq/Irq.):00092 [8]             jsr   IrqOff
6B3D 3582             (./engine/irq/Irq.):00093 [5+3]   !       puls  a,pc
6B3F                  (./engine/irq/Irq.):00094         IrqUnpause
6B3F 3402             (./engine/irq/Irq.):00095 [5+1]           pshs  a
6B41 8600             (./engine/irq/Irq.):00096 [2]             lda   #0
     6B42             (./engine/irq/Irq.):00097         @irqst  equ   *-1
6B43 2703             (./engine/irq/Irq.):00098 [3]             beq   >
6B45 BD6B0F           (./engine/irq/Irq.):00099 [8]             jsr   IrqOn
6B48 7F6B42           (./engine/irq/Irq.):00100 [7]     !       clr   @irqst
6B4B 3582             (./engine/irq/Irq.):00101 [5+3]           puls  a,pc
                      (./engine/irq/Irq.):00102         
6B4D                  (./engine/irq/Irq.):00103         IrqSync 
6B4D C642             (./engine/irq/Irq.):00104 [2]             ldb   #$42
6B4F F7E7C5           (./engine/irq/Irq.):00105 [5]             stb   MC6846.TCR
                      (./engine/irq/Irq.):00106                 
6B52 C608             (./engine/irq/Irq.):00107 [2]             ldb   #8                       ; ligne * 64 (cycles per line) / 8 (nb tempo loop cycles)
6B54 3D               (./engine/irq/Irq.):00108 [11]            mul
6B55 1F02             (./engine/irq/Irq.):00109 [6]             tfr   d,y
6B57 31A8E0           (./engine/irq/Irq.):00110 [4+1]           leay  -32,y                    ; manual adjustment
                      (./engine/irq/Irq.):00111         !
6B5A 7DE7E7           (./engine/irq/Irq.):00112 [7]             tst   $E7E7                    ;
6B5D 2BFB             (./engine/irq/Irq.):00113 [3]             bmi   <                        ; while spot is in a visible screen line        
6B5F 7DE7E7           (./engine/irq/Irq.):00114 [7]     !       tst   $E7E7                    ;
6B62 2AFB             (./engine/irq/Irq.):00115 [3]             bpl   <                        ; while spot is not in a visible screen line
6B64 313F             (./engine/irq/Irq.):00116 [4+1]   !       leay  -1,y                     ;
6B66 26FC             (./engine/irq/Irq.):00117 [3]             bne   <                        ; wait until desired line
                      (./engine/irq/Irq.):00118                
6B68 BFE7C6           (./engine/irq/Irq.):00119 [6]             stx   MC6846.TMSB              ; spot is at the end of desired line
6B6B 39               (./engine/irq/Irq.):00120 [5]             rts  
                      (./engine/irq/Irq.):00121         
     E7               (./engine/irq/Irq.):00122                 setdp $E7
6B6C                  (./engine/irq/Irq.):00123         IrqManager
6B6C 10FF6B92         (./engine/irq/Irq.):00124 [7]             sts   @stack                   ; backup system stack
6B70 10CE6BCB         (./engine/irq/Irq.):00125 [4]             lds   #Irq_sys_stack           ; set tmp system stack for IRQ 
6B74 7C66FF           (./engine/irq/Irq.):00126 [7]             inc   gfxlock.frame.count+1
6B77 2603             (./engine/irq/Irq.):00127 [3]             bne   >
6B79 7C66FE           (./engine/irq/Irq.):00128 [7]             inc   gfxlock.frame.count
                      (./engine/irq/Irq.):00129         !
6B7C 7D9FD1           (./engine/irq/Irq.):00130 [7]             tst   glb_Page                 ; test special mode (glb_Page==0)
6B7F 2716             (./engine/irq/Irq.):00131 [3]             beq   @smode                   ; branch if rendering tiles - force RAM use instead of testing ROM or RAM
                      (./engine/irq/Irq.):00132                 _GetCartPageB
                      (    _GetCartPageB):00001          IFDEF T2
6B81 BD686E           (    _GetCartPageB):00002 [8]             jsr   GetCartPageB
                      (    _GetCartPageB):00003          ELSE
                      (    _GetCartPageB):00004                 ldb   $E7E6
                      (    _GetCartPageB):00005          ENDC
6B84 F76B8C           (./engine/irq/Irq.):00133 [5]             stb   @page                    ; backup data page normally
6B87 AD9F6AF7         (./engine/irq/Irq.):00134 [7+5]           jsr   [Irq_user_routine]
6B8B 8600             (./engine/irq/Irq.):00135 [2]             lda   #0                       ; (dynamic)
     6B8C             (./engine/irq/Irq.):00136         @page   equ   *-1
                      (./engine/irq/Irq.):00137                 _SetCartPageA                  ; restore data page
                      (    _SetCartPageA):00001          IFDEF T2
6B8D BD6809           (    _SetCartPageA):00002 [8]             jsr   SetCartPageA
                      (    _SetCartPageA):00003          ELSE
                      (    _SetCartPageA):00004                 sta   $E7E6                    ; selection de la page RAM en zone cartouche
                      (    _SetCartPageA):00005          ENDC
6B90 10CE0000         (./engine/irq/Irq.):00138 [4]     @end    lds   #0                       ; (dynamic) restore system stack   
     6B92             (./engine/irq/Irq.):00139         @stack  equ   *-2
6B94 7EE830           (./engine/irq/Irq.):00140 [4]             jmp   $E830                    ; return to caller
6B97                  (./engine/irq/Irq.):00141         @smode
6B97 D6E6             (./engine/irq/Irq.):00142 [4]             ldb   <$E6
6B99 F76BA6           (./engine/irq/Irq.):00143 [5]             stb   @page2                   ; backup data page
6B9C AD9F6AF7         (./engine/irq/Irq.):00144 [7+5]           jsr   [Irq_user_routine]
6BA0 8400             (./engine/irq/Irq.):00145 [2]             anda  #0
6BA2 B79FD1           (./engine/irq/Irq.):00146 [5]             sta   glb_Page                 ; restore special page mode
6BA5 8600             (./engine/irq/Irq.):00147 [2]             lda   #0                       ; (dynamic)
     6BA6             (./engine/irq/Irq.):00148         @page2  equ   *-1
6BA7 97E6             (./engine/irq/Irq.):00149 [4]             sta   <$E6                     ; restore data page
6BA9 20E5             (./engine/irq/Irq.):00150 [3]             bra   @end
                      (./engine/irq/Irq.):00151         
                      (./engine/irq/Irq.):00152         ; This space allow the use of system stack inside IRQ calls
                      (./engine/irq/Irq.):00153         ; otherwise the writes in sys stack will erase data when S is in use
                      (./engine/irq/Irq.):00154         ; (outside of IRQ) for another task than sys stack, ex: stack blast copy 
6BAB 0000000000000000 (./engine/irq/Irq.):00155                 fill  0,32
     0000000000000000
     0000000000000000
     0000000000000000
6BCB                  (./engine/irq/Irq.):00156         Irq_sys_stack
                      (./engine/irq/Irq.):00157         
     9F               (./engine/irq/Irq.):00158                 setdp dp/256
                      (./global/global-t):00012         
                      (./global/global-t):00013         
                      (/home/robin/githu):00067                 
                      (/home/robin/githu):00068                 INCLUDE "./generated-code/scrollscreen/BuilderMainGenCode.asm"
                      (./generated-code/):00001         * Generated Code
                      (./generated-code/):00002         
6BCB                  (./generated-code/):00003         Palette_scrollscreen
6BCB 0F00             (./generated-code/):00004                 fdb   $0f00
6BCD FF0F             (./generated-code/):00005                 fdb   $ff0f
6BCF 0002             (./generated-code/):00006                 fdb   $0002
6BD1 FF00             (./generated-code/):00007                 fdb   $ff00
6BD3 F20F             (./generated-code/):00008                 fdb   $f20f
6BD5 000F             (./generated-code/):00009                 fdb   $000f
6BD7 2000             (./generated-code/):00010                 fdb   $2000
6BD9 F000             (./generated-code/):00011                 fdb   $f000
6BDB 0300             (./generated-code/):00012                 fdb   $0300
6BDD 2E00             (./generated-code/):00013                 fdb   $2e00
6BDF EE02             (./generated-code/):00014                 fdb   $ee02
6BE1 E002             (./generated-code/):00015                 fdb   $e002
6BE3 2202             (./generated-code/):00016                 fdb   $2202
6BE5 020E             (./generated-code/):00017                 fdb   $020e
6BE7 200C             (./generated-code/):00018                 fdb   $200c
6BE9 0000             (./generated-code/):00019                 fdb   $0000
                      (./generated-code/):00020         
6BEB                  (./generated-code/):00021         Obj_Index_Page
6BEB 00               (./generated-code/):00022                 fcb   $00
6BEC 64               (./generated-code/):00023                 fcb   $64
6BED 65               (./generated-code/):00024                 fcb   $65
6BEE                  (./generated-code/):00025         Obj_Index_Address
6BEE 0000             (./generated-code/):00026                 fcb   $00,$00
6BF0 017F             (./generated-code/):00027                 fcb   $01,$7F
6BF2 0000             (./generated-code/):00028                 fcb   $00,$00
6BF4                  (./generated-code/):00029         Img_Page_Index
6BF4 00               (./generated-code/):00030                 fcb   $00
6BF5 80               (./generated-code/):00031                 fcb   $80
6BF6 80               (./generated-code/):00032                 fcb   $80
6BF7                  (./generated-code/):00033         Ani_Page_Index
6BF7 00               (./generated-code/):00034                 fcb   $00
6BF8 80               (./generated-code/):00035                 fcb   $80
6BF9 80               (./generated-code/):00036                 fcb   $80
6BFA                  (./generated-code/):00037         Ani_Asd_Index
6BFA 0000             (./generated-code/):00038                 fdb   $0000
6BFC 0000             (./generated-code/):00039                 fdb   $0000
6BFE 0000             (./generated-code/):00040                 fdb   $0000
6C00                  (./generated-code/):00041         LoadAct
6C00 39               (./generated-code/):00042 [5]             rts
