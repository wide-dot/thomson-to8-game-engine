                      (C:\Users\bhrou\gi):00001                 INCLUDE "./generated-code/Game.glb"
                      (./generated-code/):00001         * Generated Code
                      (./generated-code/):00002         
     010E             (./generated-code/):00003         Build_RAMLoaderManager equ $010E
     0000             (./generated-code/):00004         GmID_EHZ equ 0
     0000             (./generated-code/):00005         gmboot equ 0
     0300             (./generated-code/):00006         Build_BootLastBlock equ $0300
                      (C:\Users\bhrou\gi):00002         
                      (C:\Users\bhrou\gi):00003         ********************************************************************************
                      (C:\Users\bhrou\gi):00004         * Boot loader T.2 - Benoit Rousseau 26/04/2021
                      (C:\Users\bhrou\gi):00005         * ------------------------------------------------------------------------------
                      (C:\Users\bhrou\gi):00006         * 
                      (C:\Users\bhrou\gi):00007         * Description
                      (C:\Users\bhrou\gi):00008         * -----------
                      (C:\Users\bhrou\gi):00009         * Animation de la palette: fondu vers une couleur cible PAL_TO
                      (C:\Users\bhrou\gi):00010         * Initialisation de la commutation de page pour l'espace Donnees (Mode registre)
                      (C:\Users\bhrou\gi):00011         * Appel du Game Mode Engine
                      (C:\Users\bhrou\gi):00012         *
                      (C:\Users\bhrou\gi):00013         ********************************************************************************
                      (C:\Users\bhrou\gi):00014         
                      (C:\Users\bhrou\gi):00015                 INCLUDE "./Engine/Macros.asm"          
0000                  (./Engine/Macros.a):00001         _ldd MACRO
                      (./Engine/Macros.a):00002                 ldd   #((\1)*256)+\2
                      (./Engine/Macros.a):00003          ENDM
                      (./Engine/Macros.a):00004          
0000                  (./Engine/Macros.a):00005         _ldx MACRO
                      (./Engine/Macros.a):00006                 ldx   #((\1)*256)+\2
                      (./Engine/Macros.a):00007          ENDM
                      (./Engine/Macros.a):00008          
0000                  (./Engine/Macros.a):00009         _ldy MACRO
                      (./Engine/Macros.a):00010                 ldy   #((\1)*256)+\2
                      (./Engine/Macros.a):00011          ENDM
                      (./Engine/Macros.a):00012          
0000                  (./Engine/Macros.a):00013         _ldu MACRO
                      (./Engine/Macros.a):00014                 ldu   #((\1)*256)+\2
                      (./Engine/Macros.a):00015          ENDM  
                      (./Engine/Macros.a):00016          
0000                  (./Engine/Macros.a):00017         _lds MACRO
                      (./Engine/Macros.a):00018                 lds   #((\1)*256)+\2
                      (./Engine/Macros.a):00019          ENDM   
                      (./Engine/Macros.a):00020          
0000                  (./Engine/Macros.a):00021         _SetCartPageA MACRO
                      (./Engine/Macros.a):00022          IFDEF T2
                      (./Engine/Macros.a):00023                 jsr   SetCartPageA
                      (./Engine/Macros.a):00024          ELSE
                      (./Engine/Macros.a):00025                 sta   $E7E6                    ; selection de la page RAM en zone cartouche
                      (./Engine/Macros.a):00026          ENDC
                      (./Engine/Macros.a):00027          ENDM      
                      (./Engine/Macros.a):00028          
0000                  (./Engine/Macros.a):00029         _GetCartPageA MACRO
                      (./Engine/Macros.a):00030          IFDEF T2
                      (./Engine/Macros.a):00031                 jsr   GetCartPageA
                      (./Engine/Macros.a):00032          ELSE
                      (./Engine/Macros.a):00033                 lda   $E7E6
                      (./Engine/Macros.a):00034          ENDC
                      (./Engine/Macros.a):00035          ENDM
                      (./Engine/Macros.a):00036         
0000                  (./Engine/Macros.a):00037         _SetCartPageB MACRO
                      (./Engine/Macros.a):00038          IFDEF T2
                      (./Engine/Macros.a):00039                 jsr   SetCartPageB
                      (./Engine/Macros.a):00040          ELSE
                      (./Engine/Macros.a):00041                 stb   $E7E6                    ; selection de la page RAM en zone cartouche
                      (./Engine/Macros.a):00042          ENDC
                      (./Engine/Macros.a):00043          ENDM      
                      (./Engine/Macros.a):00044          
0000                  (./Engine/Macros.a):00045         _GetCartPageB MACRO
                      (./Engine/Macros.a):00046          IFDEF T2
                      (./Engine/Macros.a):00047                 jsr   GetCartPageB
                      (./Engine/Macros.a):00048          ELSE
                      (./Engine/Macros.a):00049                 ldb   $E7E6
                      (./Engine/Macros.a):00050          ENDC
                      (./Engine/Macros.a):00051          ENDM     
                      (./Engine/Macros.a):00052         
0000                  (./Engine/Macros.a):00053         _RunObjectSwap MACRO
                      (./Engine/Macros.a):00054                 ; param 1 : ObjID_
                      (./Engine/Macros.a):00055                 ; param 2 : Object data RAM address
                      (./Engine/Macros.a):00056                 ; manual launch of an object from a different dynamic memory page and not from the resident page 1
                      (./Engine/Macros.a):00057                 lda   Obj_Index_Page+\1   
                      (./Engine/Macros.a):00058                 ldu   Obj_Index_Address+2*\1
                      (./Engine/Macros.a):00059                 stu   glb_Address       
                      (./Engine/Macros.a):00060                 ldu   \2             
                      (./Engine/Macros.a):00061                 jsr   RunPgSubRoutine
                      (./Engine/Macros.a):00062          ENDM    
                      (./Engine/Macros.a):00063         
0000                  (./Engine/Macros.a):00064         _RunObjectSwapRoutine MACRO
                      (./Engine/Macros.a):00065                 ; param 1 : ObjID_
                      (./Engine/Macros.a):00066                 ; param 2 : Object routine
                      (./Engine/Macros.a):00067                 ; manual launch of an object from a different dynamic memory page and not from the resident page 1
                      (./Engine/Macros.a):00068                 lda   Obj_Index_Page+\1   
                      (./Engine/Macros.a):00069                 ldu   Obj_Index_Address+2*\1
                      (./Engine/Macros.a):00070                 stu   glb_Address       
                      (./Engine/Macros.a):00071                 lda   \2        
                      (./Engine/Macros.a):00072                 jsr   RunPgSubRoutine
                      (./Engine/Macros.a):00073          ENDM 
                      (./Engine/Macros.a):00074          
0000                  (./Engine/Macros.a):00075         _MountObject MACRO 
                      (./Engine/Macros.a):00076                 ; param 1 : ObjID_
                      (./Engine/Macros.a):00077                 ; manual mount of an object from the resident page 1
                      (./Engine/Macros.a):00078                 lda   Obj_Index_Page+\1
                      (./Engine/Macros.a):00079                 _SetCartPageA
                      (./Engine/Macros.a):00080                 ldx   Obj_Index_Address+2*\1
                      (./Engine/Macros.a):00081          ENDM
                      (./Engine/Macros.a):00082         
0000                  (./Engine/Macros.a):00083         _RunObject MACRO 
                      (./Engine/Macros.a):00084                 ; param 1 : ObjID_
                      (./Engine/Macros.a):00085                 ; param 2 : Object data RAM address
                      (./Engine/Macros.a):00086                 ; manual launch of an object from the resident page 1
                      (./Engine/Macros.a):00087                 _MountObject \1
                      (./Engine/Macros.a):00088                 ldu   \2        
                      (./Engine/Macros.a):00089                 jsr   ,x
                      (./Engine/Macros.a):00090          ENDM
                      (./Engine/Macros.a):00091         
0000                  (./Engine/Macros.a):00092         _RunObjectRoutine MACRO 
                      (./Engine/Macros.a):00093                 ; param 1 : ObjID_
                      (./Engine/Macros.a):00094                 ; param 2 : Object routine
                      (./Engine/Macros.a):00095                 ; manual launch of an object from the resident page 1
                      (./Engine/Macros.a):00096                 ; this object does not need or have a data structure for this routine
                      (./Engine/Macros.a):00097                 _MountObject \1
                      (./Engine/Macros.a):00098                 lda   \2        
                      (./Engine/Macros.a):00099                 jsr   ,x
                      (./Engine/Macros.a):00100          ENDM
                      (./Engine/Macros.a):00101         
0000                  (./Engine/Macros.a):00102         _asld MACRO
                      (./Engine/Macros.a):00103                 aslb
                      (./Engine/Macros.a):00104                 rola
                      (./Engine/Macros.a):00105          ENDM        
                      (./Engine/Macros.a):00106          
0000                  (./Engine/Macros.a):00107         _asrd MACRO
                      (./Engine/Macros.a):00108                 asra
                      (./Engine/Macros.a):00109                 rorb
                      (./Engine/Macros.a):00110          ENDM      
                      (./Engine/Macros.a):00111          
0000                  (./Engine/Macros.a):00112         _lsld MACRO
                      (./Engine/Macros.a):00113                 lslb
                      (./Engine/Macros.a):00114                 rola
                      (./Engine/Macros.a):00115          ENDM        
                      (./Engine/Macros.a):00116          
0000                  (./Engine/Macros.a):00117         _lsrd MACRO
                      (./Engine/Macros.a):00118                 lsra
                      (./Engine/Macros.a):00119                 rorb
                      (./Engine/Macros.a):00120          ENDM
                      (./Engine/Macros.a):00121          
0000                  (./Engine/Macros.a):00122         _rold MACRO
                      (./Engine/Macros.a):00123                 rolb
                      (./Engine/Macros.a):00124                 rola
                      (./Engine/Macros.a):00125          ENDM    
                      (./Engine/Macros.a):00126          
0000                  (./Engine/Macros.a):00127         _rord MACRO
                      (./Engine/Macros.a):00128                 rora
                      (./Engine/Macros.a):00129                 rorb
                      (./Engine/Macros.a):00130          ENDM
                      (./Engine/Macros.a):00131         
0000                  (./Engine/Macros.a):00132         _negd MACRO
                      (./Engine/Macros.a):00133                 nega
                      (./Engine/Macros.a):00134                 negb
                      (./Engine/Macros.a):00135                 sbca  #0
                      (./Engine/Macros.a):00136          ENDM
                      (./Engine/Macros.a):00137         
0000                  (./Engine/Macros.a):00138         _cba MACRO
                      (./Engine/Macros.a):00139                 pshs  b
                      (./Engine/Macros.a):00140                 cmpa  ,s+
                      (./Engine/Macros.a):00141          ENDM
                      (./Engine/Macros.a):00142         
0000                  (./Engine/Macros.a):00143         _aba MACRO
                      (./Engine/Macros.a):00144                 pshs  b
                      (./Engine/Macros.a):00145                 adda  ,s+
                      (./Engine/Macros.a):00146          ENDM
                      (./Engine/Macros.a):00147         
0000                  (./Engine/Macros.a):00148         _sba MACRO
                      (./Engine/Macros.a):00149                 pshs  b
                      (./Engine/Macros.a):00150                 suba  ,s+
                      (./Engine/Macros.a):00151          ENDM
                      (./Engine/Macros.a):00152         
0000                  (./Engine/Macros.a):00153         _cab MACRO
                      (./Engine/Macros.a):00154                 pshs  a
                      (./Engine/Macros.a):00155                 cmpb  ,s+
                      (./Engine/Macros.a):00156          ENDM
                      (./Engine/Macros.a):00157         
0000                  (./Engine/Macros.a):00158         _aab MACRO
                      (./Engine/Macros.a):00159                 pshs  a
                      (./Engine/Macros.a):00160                 addb  ,s+
                      (./Engine/Macros.a):00161          ENDM
                      (./Engine/Macros.a):00162         
0000                  (./Engine/Macros.a):00163         _sab MACRO
                      (./Engine/Macros.a):00164                 pshs  a
                      (./Engine/Macros.a):00165                 subb  ,s+
                      (./Engine/Macros.a):00166          ENDM
                      (C:\Users\bhrou\gi):00016                 
                      (C:\Users\bhrou\gi):00017                 org   $0000
                      (C:\Users\bhrou\gi):00018         
                      (C:\Users\bhrou\gi):00019         ********************************************************************************  
                      (C:\Users\bhrou\gi):00020         * Header Megarom T.2
                      (C:\Users\bhrou\gi):00021         ********************************************************************************
                      (C:\Users\bhrou\gi):00022         
0000 20               (C:\Users\bhrou\gi):00023                 fcb   $20                      * caractere espace
0001 53               (C:\Users\bhrou\gi):00024                 fcb   $53                      * S
0002 6F               (C:\Users\bhrou\gi):00025                 fcb   $6F                      * o        
0003 6E               (C:\Users\bhrou\gi):00026                 fcb   $6E                      * n        
0004 69               (C:\Users\bhrou\gi):00027                 fcb   $69                      * i
0005 63               (C:\Users\bhrou\gi):00028                 fcb   $63                      * c
0006 20               (C:\Users\bhrou\gi):00029                 fcb   $20                      *          
0007 74               (C:\Users\bhrou\gi):00030                 fcb   $74                      * t
0008 68               (C:\Users\bhrou\gi):00031                 fcb   $68                      * h
0009 65               (C:\Users\bhrou\gi):00032                 fcb   $65                      * e
000A 20               (C:\Users\bhrou\gi):00033                 fcb   $20                      *
000B 48               (C:\Users\bhrou\gi):00034                 fcb   $48                      * H
000C 65               (C:\Users\bhrou\gi):00035                 fcb   $65                      * e
000D 64               (C:\Users\bhrou\gi):00036                 fcb   $64                      * d
000E 67               (C:\Users\bhrou\gi):00037                 fcb   $67                      * g
000F 65               (C:\Users\bhrou\gi):00038                 fcb   $65                      * e
0010 68               (C:\Users\bhrou\gi):00039                 fcb   $68                      * h
0011 6F               (C:\Users\bhrou\gi):00040                 fcb   $6F                      * o
0012 67               (C:\Users\bhrou\gi):00041                 fcb   $67                      * g                               
0013 20               (C:\Users\bhrou\gi):00042                 fcb   $20                      *
0014 32               (C:\Users\bhrou\gi):00043                 fcb   $32                      * 2
0015 20               (C:\Users\bhrou\gi):00044                 fcb   $20                      *
0016 20               (C:\Users\bhrou\gi):00045                 fcb   $20                      *
0017 04               (C:\Users\bhrou\gi):00046                 fcb   $04                      * caractere de fin
                      (C:\Users\bhrou\gi):00047                 
0018 0000             (C:\Users\bhrou\gi):00048                 fdb   $0000                    * reserve TO7/70
001A A3               (C:\Users\bhrou\gi):00049                 fcb   $A3                      * checksum (somme des $19 premiers octets a laquelle on ajoute $55)
001B 00               (C:\Users\bhrou\gi):00050                 fcb   $00                      * libre
001C 0020             (C:\Users\bhrou\gi):00051                 fdb   PalFadeInit              * point entree (reset a chaud) 
001E 0020             (C:\Users\bhrou\gi):00052                 fdb   PalFadeInit              * point entree (reset a froid)
                      (C:\Users\bhrou\gi):00053         
                      (C:\Users\bhrou\gi):00054         * donnees pour le fondu de palette
                      (C:\Users\bhrou\gi):00055         ********************************************************************************
0020                  (C:\Users\bhrou\gi):00056         PalFadeInit
0020 8661             (C:\Users\bhrou\gi):00057                 lda   #$61
0022 1F8B             (C:\Users\bhrou\gi):00058                 tfr   a,dp                     * positionne la direct page
                      (C:\Users\bhrou\gi):00059                 
     6100             (C:\Users\bhrou\gi):00060         pal_from equ $6100
0024 8E6100           (C:\Users\bhrou\gi):00061                 ldx   #pal_from
0027 CC0000           (C:\Users\bhrou\gi):00062                 ldd   #$0000                   * couleur $00 Noir (Thomson) => 06 change bordure
002A ED81             (C:\Users\bhrou\gi):00063                 std   ,x++ 
002C CCF00F           (C:\Users\bhrou\gi):00064                 ldd   #$F00F                   * couleur $0C Turquoise (Bordure ecran)
002F ED81             (C:\Users\bhrou\gi):00065                 std   ,x++        
0031 CCFF0F           (C:\Users\bhrou\gi):00066                 ldd   #$FF0F                   * couleur $0E Blanc (TO8)
0034 ED81             (C:\Users\bhrou\gi):00067                 std   ,x++        
0036 CC7707           (C:\Users\bhrou\gi):00068                 ldd   #$7707                   * couleur $10 Gris (Fond Bas)
0039 ED81             (C:\Users\bhrou\gi):00069                 std   ,x++        
003B CCAA03           (C:\Users\bhrou\gi):00070                 ldd   #$AA03                   * couleur $16 Jaune (Interieur case)
003E ED81             (C:\Users\bhrou\gi):00071                 std   ,x++        
0040 CC330A           (C:\Users\bhrou\gi):00072                 ldd   #$330A                   * couleur $18 Mauve (Fond TO8)
0043 ED81             (C:\Users\bhrou\gi):00073                 std   ,x++        
                      (C:\Users\bhrou\gi):00074                                                                                
     610C             (C:\Users\bhrou\gi):00075         pal_len equ pal_from+12                              
0045 CC0C0E           (C:\Users\bhrou\gi):00076                 ldd   #$0C0E                   * pour chaque couleur on defini un index limite
0048 ED81             (C:\Users\bhrou\gi):00077                 std   ,x++                     * (exclu) de chargement. ex: 0C, 0E, ... 
004A CC1016           (C:\Users\bhrou\gi):00078                 ldd   #$1016                   * la premiere couleur de PAL_FROM est chargee
004D ED81             (C:\Users\bhrou\gi):00079                 std   ,x++                     * pour les couleurs 0(00) a 5(0A)
004F CC1820           (C:\Users\bhrou\gi):00080                 ldd   #$1820                   * la seconde couleur de PAL_FORM  est chargee
0052 ED81             (C:\Users\bhrou\gi):00081                 std   ,x++                     * pour la couleur 6(0C)
     6112             (C:\Users\bhrou\gi):00082         end_pal_len equ pal_len+6 
                      (C:\Users\bhrou\gi):00083            
     6112             (C:\Users\bhrou\gi):00084         pal_cycles equ pal_len+6
0054 8610             (C:\Users\bhrou\gi):00085                 lda   #$10                     * nombre de frames de la transition (VSYNC)
0056 A780             (C:\Users\bhrou\gi):00086                 sta   ,x+
                      (C:\Users\bhrou\gi):00087                                                                                
     6113             (C:\Users\bhrou\gi):00088         pal_mask equ pal_cycles+1                              
0058 860F             (C:\Users\bhrou\gi):00089                 lda   #$0F                     * masque pour l'aternance du traitemet vert/rouge
005A A780             (C:\Users\bhrou\gi):00090                 sta   ,x+                
                      (C:\Users\bhrou\gi):00091                 
     6114             (C:\Users\bhrou\gi):00092         pal_buffer equ pal_mask+1                           
005C 8642             (C:\Users\bhrou\gi):00093                 lda   #$42                     * buffer de comparaison
005E A780             (C:\Users\bhrou\gi):00094                 sta   ,x+        
0060 8641             (C:\Users\bhrou\gi):00095                 lda   #$41                     * buffer de comparaison
0062 A780             (C:\Users\bhrou\gi):00096                 sta   ,x+        
                      (C:\Users\bhrou\gi):00097                                                                                
     6116             (C:\Users\bhrou\gi):00098         pal_idx equ pal_buffer+2                                 
0064 8600             (C:\Users\bhrou\gi):00099                 lda   #$00                     * index de la couleur courante dans le traitement
0066 A784             (C:\Users\bhrou\gi):00100                 sta   ,x        
                      (C:\Users\bhrou\gi):00101                 
                      (C:\Users\bhrou\gi):00102         ********************************************************************************  
                      (C:\Users\bhrou\gi):00103         * Fondu palette
                      (C:\Users\bhrou\gi):00104         ********************************************************************************
                      (C:\Users\bhrou\gi):00105         
0068                  (C:\Users\bhrou\gi):00106         PalFade        
0068 0F16             (C:\Users\bhrou\gi):00107                 clr   <pal_idx
006A 8E610C           (C:\Users\bhrou\gi):00108                 ldx   #pal_len                 * index limite de chargement pour couleur courante 
006D CE6100           (C:\Users\bhrou\gi):00109                 ldu   #pal_from                * chargement pointeur valeur des couleurs actuelles
                      (C:\Users\bhrou\gi):00110                 
0070                  (C:\Users\bhrou\gi):00111         Vsync_1                                
0070 7DE7E7           (C:\Users\bhrou\gi):00112                 tst   $E7E7                    * le faisceau n'est pas dans l'ecran utile
0073 2AFB             (C:\Users\bhrou\gi):00113                 bpl   Vsync_1                  * tant que le bit est a 0 on boucle
0075                  (C:\Users\bhrou\gi):00114         Vsync_2                                 
0075 7DE7E7           (C:\Users\bhrou\gi):00115                 tst   $E7E7                    * le faisceau est dans l'ecran utile
0078 2BFB             (C:\Users\bhrou\gi):00116                 bmi   Vsync_2                  * tant que le bit est a 1 on boucle
                      (C:\Users\bhrou\gi):00117                 
007A 108E0140         (C:\Users\bhrou\gi):00118                 ldy   #0320                    * 40 lignes * 8 cycles
007E                  (C:\Users\bhrou\gi):00119         Tempo        
007E 313F             (C:\Users\bhrou\gi):00120                 leay  -1,y
0080 26FC             (C:\Users\bhrou\gi):00121                 bne   Tempo                    * tempo pour etre dans la bordure invisible   
                      (C:\Users\bhrou\gi):00122                                                                                 
0082 0A12             (C:\Users\bhrou\gi):00123                 dec   <pal_cycles              * decremente le compteur du nombre de frame
0084 2756             (C:\Users\bhrou\gi):00124                 beq   InitVideo                * si termine
                      (C:\Users\bhrou\gi):00125                 
0086                  (C:\Users\bhrou\gi):00126         PalRun
0086 A6C4             (C:\Users\bhrou\gi):00127                 lda   ,u                                   * chargement de la composante verte et rouge
0088 9413             (C:\Users\bhrou\gi):00128                 anda  <pal_mask                * on efface la valeur vert ou rouge par masque
008A C6FF             (C:\Users\bhrou\gi):00129                 ldb   #$FF                     * composante verte et rouge couleur cible
008C D413             (C:\Users\bhrou\gi):00130                 andb  <pal_mask                * on efface la valeur vert ou rouge par masque
008E D714             (C:\Users\bhrou\gi):00131                 stb   <pal_buffer              * on stocke la valeur cible pour comparaison
0090 C611             (C:\Users\bhrou\gi):00132                 ldb   #$11                     * preparation de la valeur d'increment de couleur
0092 D413             (C:\Users\bhrou\gi):00133                 andb  <pal_mask                * on efface la valeur non utile par masque
0094 D715             (C:\Users\bhrou\gi):00134                 stb   <pal_buffer+1            * on stocke la valeur pour ADD ou SUB ulterieur
0096 9114             (C:\Users\bhrou\gi):00135                 cmpa  <pal_buffer              * comparaison de la composante courante et cible
0098 270E             (C:\Users\bhrou\gi):00136                 beq   PalVRSuivante            * si composante est egale a la cible on passe
009A 2206             (C:\Users\bhrou\gi):00137                 bhi   PalVRDec                 * si la composante est superieure on branche
009C A6C4             (C:\Users\bhrou\gi):00138                 lda   ,u                       * on recharge la valeur avec vert et rouge
009E 9B15             (C:\Users\bhrou\gi):00139                 adda  <pal_buffer+1            * on incremente la composante verte ou rouge
00A0 2004             (C:\Users\bhrou\gi):00140                 bra   PalVRSave                * on branche pour sauvegarder
00A2                  (C:\Users\bhrou\gi):00141         PalVRDec
00A2 A6C4             (C:\Users\bhrou\gi):00142                 lda   ,u                       * on recharge la valeur avec vert et rouge
00A4 9015             (C:\Users\bhrou\gi):00143                 suba  <pal_buffer+1            * on decremente la composante verte ou rouge
00A6                  (C:\Users\bhrou\gi):00144         PalVRSave                             
00A6 A7C4             (C:\Users\bhrou\gi):00145                 sta   ,u                       * sauvegarde de la nouvelle valeur vert ou rouge
00A8                  (C:\Users\bhrou\gi):00146         PalVRSuivante                         
00A8 0313             (C:\Users\bhrou\gi):00147                 com   <pal_mask                * inversion du masque pour traiter l'autre semioctet
00AA 2BDA             (C:\Users\bhrou\gi):00148                 bmi   PalRun                   * si on traite $F0 on branche sinon on continue
                      (C:\Users\bhrou\gi):00149                     
00AC                  (C:\Users\bhrou\gi):00150         SetPalBleu
00AC E641             (C:\Users\bhrou\gi):00151                 ldb   1,u                                   * chargement composante bleue courante
00AE C10F             (C:\Users\bhrou\gi):00152                 cmpb  #$0F                     * comparaison composante courante et cible
00B0 2708             (C:\Users\bhrou\gi):00153                 beq   SetPalNext               * si composante est egale a la cible on passe
00B2 2203             (C:\Users\bhrou\gi):00154                 bhi   SetPalBleudec            * si la composante est superieure on branche
00B4 5C               (C:\Users\bhrou\gi):00155                 incb                           * on incremente la composante bleue
00B5 2001             (C:\Users\bhrou\gi):00156                 bra   SetPalSaveBleu           * on branche pour sauvegarder
00B7                  (C:\Users\bhrou\gi):00157         SetPalBleudec                       
00B7 5A               (C:\Users\bhrou\gi):00158                 decb                           * on decremente la composante bleue
00B8                  (C:\Users\bhrou\gi):00159         SetPalSaveBleu                         
00B8 E741             (C:\Users\bhrou\gi):00160                 stb   1,u                      * sauvegarde de la nouvelle valeur bleue
                      (C:\Users\bhrou\gi):00161                                                                                
00BA                  (C:\Users\bhrou\gi):00162         SetPalNext                             
00BA 9616             (C:\Users\bhrou\gi):00163                 lda   <pal_idx                 * Lecture index couleur
00BC B7E7DB           (C:\Users\bhrou\gi):00164                 sta   $E7DB                    * selectionne l'indice de couleur a ecrire
00BF 8B02             (C:\Users\bhrou\gi):00165                 adda  #$02                     * increment de l'indice de couleur (x2)
00C1 9716             (C:\Users\bhrou\gi):00166                 sta   <pal_idx                 * stockage du nouvel index
00C3 A6C4             (C:\Users\bhrou\gi):00167                 lda   ,u                       * chargement de la nouvelle couleur courante
00C5 B7E7DA           (C:\Users\bhrou\gi):00168                 sta   $E7DA                    * positionne la nouvelle couleur (Vert et Rouge)
00C8 F7E7DA           (C:\Users\bhrou\gi):00169                 stb   $E7DA                    * positionne la nouvelle couleur (Bleu)
00CB 9616             (C:\Users\bhrou\gi):00170                 lda   <pal_idx                 * rechargement de l'index couleur
00CD A184             (C:\Users\bhrou\gi):00171                 cmpa  ,x                       * comparaison avec l'index limite pour cette couleur
00CF 26E9             (C:\Users\bhrou\gi):00172                 bne   SetPalNext               * si inferieur on continue avec la meme couleur
00D1 3342             (C:\Users\bhrou\gi):00173                 leau  2,u                      * on avance le pointeur vers la nouvelle couleur
00D3 3001             (C:\Users\bhrou\gi):00174                 leax  1,x                      * on avance le pointeur vers la nouvelle limite
00D5 8C6112           (C:\Users\bhrou\gi):00175                 cmpx  #end_pal_len             * test de fin de liste
00D8 26AC             (C:\Users\bhrou\gi):00176                 bne   PalRun                   * on reboucle si fin de liste pas atteinte
00DA 208C             (C:\Users\bhrou\gi):00177                 bra   PalFade
                      (C:\Users\bhrou\gi):00178                 
                      (C:\Users\bhrou\gi):00179         ********************************************************************************  
                      (C:\Users\bhrou\gi):00180         * Initialisation du mode video
                      (C:\Users\bhrou\gi):00181         ********************************************************************************
00DC                  (C:\Users\bhrou\gi):00182         InitVideo
00DC 1A50             (C:\Users\bhrou\gi):00183                 orcc  #$50                     * desactive les interruptions
00DE 867B             (C:\Users\bhrou\gi):00184                 lda   #$7B                     * passage en mode 160x200x16c
00E0 B7E7DC           (C:\Users\bhrou\gi):00185                 sta   $E7DC
                      (C:\Users\bhrou\gi):00186           
                      (C:\Users\bhrou\gi):00187         ********************************************************************************
                      (C:\Users\bhrou\gi):00188         * Initialisation de la commutation de page pour l espace Donnees (Mode registre)
                      (C:\Users\bhrou\gi):00189         ********************************************************************************
00E3 F66081           (C:\Users\bhrou\gi):00190                 ldb   $6081                    * $6081 est l'image "lisible" de $E7E7
00E6 CA10             (C:\Users\bhrou\gi):00191                 orb   #$10                     * positionne le bit d4 a 1
00E8 F76081           (C:\Users\bhrou\gi):00192                 stb   $6081                    * maintient une image coherente de $E7E7
00EB F7E7E7           (C:\Users\bhrou\gi):00193                 stb   $E7E7                    * bit d4 a 1 pour pages donnees en mode registre
                      (C:\Users\bhrou\gi):00194          
                      (C:\Users\bhrou\gi):00195         * Positionnement de la page 3 a l'ecran et de la page 2 en zone A000-DFFF
                      (C:\Users\bhrou\gi):00196         ***********************************************************
00EE CCC002           (C:\Users\bhrou\gi):00197                 ldd   #$C002                   ; page 3, couleur de cadre 0 et page 2
00F1 B7E7DD           (C:\Users\bhrou\gi):00198                 sta   $E7DD                    ; affiche la page a l'ecran
00F4 F7E7E5           (C:\Users\bhrou\gi):00199                 stb   $E7E5                    ; visible dans l'espace donnees
                      (C:\Users\bhrou\gi):00200                 
00F7 86AA             (C:\Users\bhrou\gi):00201                 lda   #$AA
00F9 B70555           (C:\Users\bhrou\gi):00202                 sta   $0555
00FC 8655             (C:\Users\bhrou\gi):00203                 lda   #$55
00FE B702AA           (C:\Users\bhrou\gi):00204                 sta   $02AA
0101 86B0             (C:\Users\bhrou\gi):00205                 lda   #$B0
0103 B70555           (C:\Users\bhrou\gi):00206                 sta   $0555
0106 8602             (C:\Users\bhrou\gi):00207                 lda   #$02                     ; mode neutre pour la T.2
0108 B70556           (C:\Users\bhrou\gi):00208                         sta   $0556
                      (C:\Users\bhrou\gi):00209                 
                      (C:\Users\bhrou\gi):00210                 _ldd  gmboot,$FF               ; level to boot and flag for first level load
010B CC00FF           (             _ldd):00001                 ldd   #((gmboot)*256)+$FF
