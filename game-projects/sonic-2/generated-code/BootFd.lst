                      (C:\Users\bhrou\gi):00001                 INCLUDE "./generated-code/Game.glb"
                      (./generated-code/):00001         * Generated Code
                      (./generated-code/):00002         
     010E             (./generated-code/):00003         Build_RAMLoaderManager equ $010E
     0000             (./generated-code/):00004         GmID_EHZ equ 0
     0000             (./generated-code/):00005         gmboot equ 0
     0300             (./generated-code/):00006         Build_BootLastBlock equ $0300
                      (C:\Users\bhrou\gi):00002                 INCLUDE "./generated-code/RAMLoaderManagerFd.glb"
     0004             (./generated-code/):00001         anim EQU $0004
     000A             (./generated-code/):00002         anim_flags EQU $000A
     0008             (./generated-code/):00003         anim_frame EQU $0008
     0009             (./generated-code/):00004         anim_frame_duration EQU $0009
     0001             (./generated-code/):00005         anim_link_mask EQU $0001
     40B2             (./generated-code/):00006         biba EQU $40B2
     408C             (./generated-code/):00007         bitbuf EQU $408C
     000B             (./generated-code/):00008         buf_bgdata EQU $000B
     0007             (./generated-code/):00009         buf_erase_nb_cell EQU $0007
     0009             (./generated-code/):00010         buf_erase_routine EQU $0009
     0008             (./generated-code/):00011         buf_page_erase_routine EQU $0008
     0005             (./generated-code/):00012         buf_prev_mapping_frame EQU $0005
     0013             (./generated-code/):00013         buf_prev_render_flags EQU $0013
     000F             (./generated-code/):00014         buf_prev_x1_pixel EQU $000F
     0011             (./generated-code/):00015         buf_prev_x2_pixel EQU $0011
     000D             (./generated-code/):00016         buf_prev_x_pixel EQU $000D
     000F             (./generated-code/):00017         buf_prev_xy1_pixel EQU $000F
     0011             (./generated-code/):00018         buf_prev_xy2_pixel EQU $0011
     000D             (./generated-code/):00019         buf_prev_xy_pixel EQU $000D
     0010             (./generated-code/):00020         buf_prev_y1_pixel EQU $0010
     0012             (./generated-code/):00021         buf_prev_y2_pixel EQU $0012
     000E             (./generated-code/):00022         buf_prev_y_pixel EQU $000E
     0000             (./generated-code/):00023         buf_priority EQU $0000
     0003             (./generated-code/):00024         buf_priority_next_obj EQU $0003
     0001             (./generated-code/):00025         buf_priority_prev_obj EQU $0001
     405B             (./generated-code/):00026         coffs EQU $405B
     40A1             (./generated-code/):00027         cook EQU $40A1
     404F             (./generated-code/):00028         cpy EQU $404F
     4073             (./generated-code/):00029         cpy2 EQU $4073
     4051             (./generated-code/):00030         cpyl EQU $4051
     6049             (./generated-code/):00031         dk_drive EQU $6049
     604C             (./generated-code/):00032         dk_sector EQU $604C
     604A             (./generated-code/):00033         dk_track EQU $604A
     604B             (./generated-code/):00034         dk_track_lsb EQU $604B
     604F             (./generated-code/):00035         dk_write_location EQU $604F
     0001             (./generated-code/):00036         draw_routine EQU $0001
     4081             (./generated-code/):00037         endr EQU $4081
     0006             (./generated-code/):00038         erase_nb_cell EQU $0006
     0004             (./generated-code/):00039         erase_routine EQU $0004
     4000             (./generated-code/):00040         exo2 EQU $4000
     005D             (./generated-code/):00041         ext_variables EQU $005D
     41D0             (./generated-code/):00042         fill EQU $41D0
     4090             (./generated-code/):00043         get1 EQU $4090
     4092             (./generated-code/):00044         get2 EQU $4092
     4099             (./generated-code/):00045         get3 EQU $4099
     4088             (./generated-code/):00046         getbits EQU $4088
     4086             (./generated-code/):00047         getbix EQU $4086
     9FE6             (./generated-code/):00048         glb_alphaTiles EQU $9FE6
     9FE7             (./generated-code/):00049         glb_camera_move EQU $9FE7
     9FEB             (./generated-code/):00050         glb_camera_x_max_pos EQU $9FEB
     9FEF             (./generated-code/):00051         glb_camera_x_min_pos EQU $9FEF
     9FF3             (./generated-code/):00052         glb_camera_x_pos EQU $9FF3
     9FE9             (./generated-code/):00053         glb_camera_y_max_pos EQU $9FE9
     9FED             (./generated-code/):00054         glb_camera_y_min_pos EQU $9FED
     9FF1             (./generated-code/):00055         glb_camera_y_pos EQU $9FF1
     9FF9             (./generated-code/):00056         glb_cur_priority EQU $9FF9
     9FF5             (./generated-code/):00057         glb_cur_ptr_sub_obj_draw EQU $9FF5
     9FF7             (./generated-code/):00058         glb_cur_ptr_sub_obj_erase EQU $9FF7
     009F             (./generated-code/):00059         glb_direct_page EQU $009F
     9FE8             (./generated-code/):00060         glb_force_sprite_refresh EQU $9FE8
     9FFE             (./generated-code/):00061         glb_register_s EQU $9FFE
     9FFC             (./generated-code/):00062         glb_screen_location_1 EQU $9FFC
     9FFA             (./generated-code/):00063         glb_screen_location_2 EQU $9FFA
     9F00             (./generated-code/):00064         glb_system_stack EQU $9F00
     9F00             (./generated-code/):00065         glb_tmp_var EQU $9F00
     0236             (./generated-code/):00066         gm_EHZ EQU $0236
     0387             (./generated-code/):00067         Gm_Index EQU $0387
     4031             (./generated-code/):00068         go EQU $4031
     0000             (./generated-code/):00069         id EQU $0000
     4044             (./generated-code/):00070         idx EQU $4044
     0006             (./generated-code/):00071         image_center_offset EQU $0006
     000C             (./generated-code/):00072         image_set EQU $000C
     0004             (./generated-code/):00073         image_subset_x1_offset EQU $0004
     0005             (./generated-code/):00074         image_subset_y1_offset EQU $0005
     0004             (./generated-code/):00075         image_x_size EQU $0004
     0005             (./generated-code/):00076         image_y_size EQU $0005
     4034             (./generated-code/):00077         mloop EQU $4034
     0008             (./generated-code/):00078         nb_priority_levels EQU $0008
     0000             (./generated-code/):00079         next_object EQU $0000
     400D             (./generated-code/):00080         nxt EQU $400D
     005D             (./generated-code/):00081         object_core_size EQU $005D
     0000             (./generated-code/):00082         object_size EQU $0000
     4075             (./generated-code/):00083         offs EQU $4075
     0000             (./generated-code/):00084         page_draw_routine EQU $0000
     0003             (./generated-code/):00085         page_erase_routine EQU $0003
     0006             (./generated-code/):00086         prev_anim EQU $0006
     0003             (./generated-code/):00087         priority EQU $0003
     414E             (./generated-code/):00088         RAMLoader EQU $414E
     415B             (./generated-code/):00089         RAMLoader_continue EQU $415B
     005F             (./generated-code/):00090         RAMLoaderBin EQU $005F
     0000             (./generated-code/):00091         RAMLoaderManager EQU $0000
     403D             (./generated-code/):00092         rbl EQU $403D
     0002             (./generated-code/):00093         render_flags EQU $0002
     0020             (./generated-code/):00094         render_hide_mask EQU $0020
     0008             (./generated-code/):00095         render_motionless_mask EQU $0008
     0004             (./generated-code/):00096         render_overlay_mask EQU $0004
     0010             (./generated-code/):00097         render_playfieldcoord_mask EQU $0010
     0040             (./generated-code/):00098         render_todelete_mask EQU $0040
     0080             (./generated-code/):00099         render_xloop_mask EQU $0080
     0001             (./generated-code/):00100         render_xmirror_mask EQU $0001
     0002             (./generated-code/):00101         render_ymirror_mask EQU $0002
     416E             (./generated-code/):00102         RL_Continue EQU $416E
     4192             (./generated-code/):00103         RL_DKCO EQU $4192
     41AD             (./generated-code/):00104         RL_DKContinue EQU $41AD
     41B1             (./generated-code/):00105         RL_DKDernierBloc EQU $41B1
     41C0             (./generated-code/):00106         RL_NegOffset EQU $41C0
     41C4             (./generated-code/):00107         RL_Page EQU $41C4
     41D5             (./generated-code/):00108         RL_RAM_index EQU $41D5
     004E             (./generated-code/):00109         RLM_CopyCode EQU $004E
     0058             (./generated-code/):00110         RLM_CopyCode_restore_s EQU $0058
     0042             (./generated-code/):00111         RLM_CopyData EQU $0042
     0036             (./generated-code/):00112         RLM_SetPage EQU $0036
     0013             (./generated-code/):00113         RLM_SkipCommon EQU $0013
     401E             (./generated-code/):00114         roll EQU $401E
     001E             (./generated-code/):00115         routine EQU $001E
     0021             (./generated-code/):00116         routine_quaternary EQU $0021
     001F             (./generated-code/):00117         routine_secondary EQU $001F
     0020             (./generated-code/):00118         routine_tertiary EQU $0020
     0040             (./generated-code/):00119         rsv_bgdata_0 EQU $0040
     0054             (./generated-code/):00120         rsv_bgdata_1 EQU $0054
     0035             (./generated-code/):00121         rsv_buffer_0 EQU $0035
     0049             (./generated-code/):00122         rsv_buffer_1 EQU $0049
     002C             (./generated-code/):00123         rsv_draw_routine EQU $002C
     002A             (./generated-code/):00124         rsv_erase_nb_cell EQU $002A
     002F             (./generated-code/):00125         rsv_erase_routine EQU $002F
     0025             (./generated-code/):00126         rsv_image_center_offset EQU $0025
     0026             (./generated-code/):00127         rsv_image_subset EQU $0026
     0028             (./generated-code/):00128         rsv_mapping_frame EQU $0028
     002B             (./generated-code/):00129         rsv_page_draw_routine EQU $002B
     002E             (./generated-code/):00130         rsv_page_erase_routine EQU $002E
     0023             (./generated-code/):00131         rsv_prev_anim EQU $0023
     003C             (./generated-code/):00132         rsv_prev_erase_nb_cell_0 EQU $003C
     0050             (./generated-code/):00133         rsv_prev_erase_nb_cell_1 EQU $0050
     003E             (./generated-code/):00134         rsv_prev_erase_routine_0 EQU $003E
     0052             (./generated-code/):00135         rsv_prev_erase_routine_1 EQU $0052
     003A             (./generated-code/):00136         rsv_prev_mapping_frame_0 EQU $003A
     004E             (./generated-code/):00137         rsv_prev_mapping_frame_1 EQU $004E
     003D             (./generated-code/):00138         rsv_prev_page_erase_routine_0 EQU $003D
     0051             (./generated-code/):00139         rsv_prev_page_erase_routine_1 EQU $0051
     0048             (./generated-code/):00140         rsv_prev_render_flags_0 EQU $0048
     005C             (./generated-code/):00141         rsv_prev_render_flags_1 EQU $005C
     0080             (./generated-code/):00142         rsv_prev_render_onscreen_mask EQU $0080
     0001             (./generated-code/):00143         rsv_prev_render_overlay_mask EQU $0001
     0044             (./generated-code/):00144         rsv_prev_x1_pixel_0 EQU $0044
     0058             (./generated-code/):00145         rsv_prev_x1_pixel_1 EQU $0058
     0046             (./generated-code/):00146         rsv_prev_x2_pixel_0 EQU $0046
     005A             (./generated-code/):00147         rsv_prev_x2_pixel_1 EQU $005A
     0042             (./generated-code/):00148         rsv_prev_x_pixel_0 EQU $0042
     0056             (./generated-code/):00149         rsv_prev_x_pixel_1 EQU $0056
     0044             (./generated-code/):00150         rsv_prev_xy1_pixel_0 EQU $0044
     0058             (./generated-code/):00151         rsv_prev_xy1_pixel_1 EQU $0058
     0046             (./generated-code/):00152         rsv_prev_xy2_pixel_0 EQU $0046
     005A             (./generated-code/):00153         rsv_prev_xy2_pixel_1 EQU $005A
     0042             (./generated-code/):00154         rsv_prev_xy_pixel_0 EQU $0042
     0056             (./generated-code/):00155         rsv_prev_xy_pixel_1 EQU $0056
     0045             (./generated-code/):00156         rsv_prev_y1_pixel_0 EQU $0045
     0059             (./generated-code/):00157         rsv_prev_y1_pixel_1 EQU $0059
     0047             (./generated-code/):00158         rsv_prev_y2_pixel_0 EQU $0047
     005B             (./generated-code/):00159         rsv_prev_y2_pixel_1 EQU $005B
     0043             (./generated-code/):00160         rsv_prev_y_pixel_0 EQU $0043
     0057             (./generated-code/):00161         rsv_prev_y_pixel_1 EQU $0057
     0035             (./generated-code/):00162         rsv_priority_0 EQU $0035
     0049             (./generated-code/):00163         rsv_priority_1 EQU $0049
     0038             (./generated-code/):00164         rsv_priority_next_obj_0 EQU $0038
     004C             (./generated-code/):00165         rsv_priority_next_obj_1 EQU $004C
     0036             (./generated-code/):00166         rsv_priority_prev_obj_0 EQU $0036
     004A             (./generated-code/):00167         rsv_priority_prev_obj_1 EQU $004A
     0001             (./generated-code/):00168         rsv_render_checkrefresh_mask EQU $0001
     0004             (./generated-code/):00169         rsv_render_displaysprite_mask EQU $0004
     0002             (./generated-code/):00170         rsv_render_erasesprite_mask EQU $0002
     0022             (./generated-code/):00171         rsv_render_flags EQU $0022
     0080             (./generated-code/):00172         rsv_render_onscreen_mask EQU $0080
     0008             (./generated-code/):00173         rsv_render_outofrange_mask EQU $0008
     0031             (./generated-code/):00174         rsv_x1_pixel EQU $0031
     0033             (./generated-code/):00175         rsv_x2_pixel EQU $0033
     0031             (./generated-code/):00176         rsv_xy1_pixel EQU $0031
     0033             (./generated-code/):00177         rsv_xy2_pixel EQU $0033
     0032             (./generated-code/):00178         rsv_y1_pixel EQU $0032
     0034             (./generated-code/):00179         rsv_y2_pixel EQU $0034
     4069             (./generated-code/):00180         scof EQU $4069
     00E3             (./generated-code/):00181         screen_bottom EQU $00E3
     0030             (./generated-code/):00182         screen_left EQU $0030
     00CF             (./generated-code/):00183         screen_right EQU $00CF
     001C             (./generated-code/):00184         screen_top EQU $001C
     00A0             (./generated-code/):00185         screen_width EQU $00A0
     4017             (./generated-code/):00186         skp EQU $4017
     0003             (./generated-code/):00187         sound_end_addr EQU $0003
     0005             (./generated-code/):00188         sound_meta_size EQU $0005
     0000             (./generated-code/):00189         sound_page EQU $0000
     0001             (./generated-code/):00190         sound_start_addr EQU $0001
     4000             (./generated-code/):00191         start EQU $4000
     000B             (./generated-code/):00192         status_flags EQU $000B
     0001             (./generated-code/):00193         status_xflip_mask EQU $0001
     0002             (./generated-code/):00194         status_yflip_mask EQU $0002
     0001             (./generated-code/):00195         subtype EQU $0001
     40AC             (./generated-code/):00196         tab1 EQU $40AC
     001A             (./generated-code/):00197         x_acl EQU $001A
     0014             (./generated-code/):00198         x_pixel EQU $0014
     000E             (./generated-code/):00199         x_pos EQU $000E
     0010             (./generated-code/):00200         x_sub EQU $0010
     0016             (./generated-code/):00201         x_vel EQU $0016
     0014             (./generated-code/):00202         xy_pixel EQU $0014
     001C             (./generated-code/):00203         y_acl EQU $001C
     0015             (./generated-code/):00204         y_pixel EQU $0015
     0011             (./generated-code/):00205         y_pos EQU $0011
     0013             (./generated-code/):00206         y_sub EQU $0013
     0018             (./generated-code/):00207         y_vel EQU $0018
                      (C:\Users\bhrou\gi):00003         
                      (C:\Users\bhrou\gi):00004         ********************************************************************************
                      (C:\Users\bhrou\gi):00005         * Boot loader FD - Benoit Rousseau 05/11/2020
                      (C:\Users\bhrou\gi):00006         * ------------------------------------------------------------------------------
                      (C:\Users\bhrou\gi):00007         * 
                      (C:\Users\bhrou\gi):00008         * Description
                      (C:\Users\bhrou\gi):00009         * -----------
                      (C:\Users\bhrou\gi):00010         * Animation de la palette: fondu vers une couleur cible PAL_TO
                      (C:\Users\bhrou\gi):00011         * Initialisation de la commutation de page pour l'espace Donnees (Mode registre)
                      (C:\Users\bhrou\gi):00012         * Chargement du code de Game Mode Engine en page 4 sur espace donnees
                      (C:\Users\bhrou\gi):00013         * Appel du Game Mode Engine
                      (C:\Users\bhrou\gi):00014         *
                      (C:\Users\bhrou\gi):00015         ********************************************************************************
                      (C:\Users\bhrou\gi):00016         
                      (C:\Users\bhrou\gi):00017                 INCLUDE "./Engine/Macros.asm"          
0000                  (./Engine/Macros.a):00001         _ldd MACRO
                      (./Engine/Macros.a):00002                 ldd   #((\1)*256)+\2
                      (./Engine/Macros.a):00003          ENDM
                      (./Engine/Macros.a):00004          
0000                  (./Engine/Macros.a):00005         _ldx MACRO
                      (./Engine/Macros.a):00006                 ldx   #((\1)*256)+\2
                      (./Engine/Macros.a):00007          ENDM
                      (./Engine/Macros.a):00008          
0000                  (./Engine/Macros.a):00009         _ldy MACRO
                      (./Engine/Macros.a):00010                 ldy   #((\1)*256)+\2
                      (./Engine/Macros.a):00011          ENDM
                      (./Engine/Macros.a):00012          
0000                  (./Engine/Macros.a):00013         _ldu MACRO
                      (./Engine/Macros.a):00014                 ldu   #((\1)*256)+\2
                      (./Engine/Macros.a):00015          ENDM  
                      (./Engine/Macros.a):00016          
0000                  (./Engine/Macros.a):00017         _lds MACRO
                      (./Engine/Macros.a):00018                 lds   #((\1)*256)+\2
                      (./Engine/Macros.a):00019          ENDM   
                      (./Engine/Macros.a):00020          
0000                  (./Engine/Macros.a):00021         _SetCartPageA MACRO
                      (./Engine/Macros.a):00022          IFDEF T2
                      (./Engine/Macros.a):00023                 jsr   SetCartPageA
                      (./Engine/Macros.a):00024          ELSE
                      (./Engine/Macros.a):00025                 sta   $E7E6                    ; selection de la page RAM en zone cartouche
                      (./Engine/Macros.a):00026          ENDC
                      (./Engine/Macros.a):00027          ENDM      
                      (./Engine/Macros.a):00028          
0000                  (./Engine/Macros.a):00029         _GetCartPageA MACRO
                      (./Engine/Macros.a):00030          IFDEF T2
                      (./Engine/Macros.a):00031                 jsr   GetCartPageA
                      (./Engine/Macros.a):00032          ELSE
                      (./Engine/Macros.a):00033                 lda   $E7E6
                      (./Engine/Macros.a):00034          ENDC
                      (./Engine/Macros.a):00035          ENDM
                      (./Engine/Macros.a):00036         
0000                  (./Engine/Macros.a):00037         _SetCartPageB MACRO
                      (./Engine/Macros.a):00038          IFDEF T2
                      (./Engine/Macros.a):00039                 jsr   SetCartPageB
                      (./Engine/Macros.a):00040          ELSE
                      (./Engine/Macros.a):00041                 stb   $E7E6                    ; selection de la page RAM en zone cartouche
                      (./Engine/Macros.a):00042          ENDC
                      (./Engine/Macros.a):00043          ENDM      
                      (./Engine/Macros.a):00044          
0000                  (./Engine/Macros.a):00045         _GetCartPageB MACRO
                      (./Engine/Macros.a):00046          IFDEF T2
                      (./Engine/Macros.a):00047                 jsr   GetCartPageB
                      (./Engine/Macros.a):00048          ELSE
                      (./Engine/Macros.a):00049                 ldb   $E7E6
                      (./Engine/Macros.a):00050          ENDC
                      (./Engine/Macros.a):00051          ENDM     
                      (./Engine/Macros.a):00052         
0000                  (./Engine/Macros.a):00053         _RunObjectSwap MACRO
                      (./Engine/Macros.a):00054                 ; param 1 : ObjID_
                      (./Engine/Macros.a):00055                 ; param 2 : Object data RAM address
                      (./Engine/Macros.a):00056                 ; manual launch of an object from a different dynamic memory page and not from the resident page 1
                      (./Engine/Macros.a):00057                 lda   Obj_Index_Page+\1   
                      (./Engine/Macros.a):00058                 ldu   Obj_Index_Address+2*\1
                      (./Engine/Macros.a):00059                 stu   glb_Address       
                      (./Engine/Macros.a):00060                 ldu   \2             
                      (./Engine/Macros.a):00061                 jsr   RunPgSubRoutine
                      (./Engine/Macros.a):00062          ENDM    
                      (./Engine/Macros.a):00063         
0000                  (./Engine/Macros.a):00064         _RunObjectSwapRoutine MACRO
                      (./Engine/Macros.a):00065                 ; param 1 : ObjID_
                      (./Engine/Macros.a):00066                 ; param 2 : Object routine
                      (./Engine/Macros.a):00067                 ; manual launch of an object from a different dynamic memory page and not from the resident page 1
                      (./Engine/Macros.a):00068                 lda   Obj_Index_Page+\1   
                      (./Engine/Macros.a):00069                 ldu   Obj_Index_Address+2*\1
                      (./Engine/Macros.a):00070                 stu   glb_Address       
                      (./Engine/Macros.a):00071                 lda   \2        
                      (./Engine/Macros.a):00072                 jsr   RunPgSubRoutine
                      (./Engine/Macros.a):00073          ENDM 
                      (./Engine/Macros.a):00074          
0000                  (./Engine/Macros.a):00075         _MountObject MACRO 
                      (./Engine/Macros.a):00076                 ; param 1 : ObjID_
                      (./Engine/Macros.a):00077                 ; manual mount of an object from the resident page 1
                      (./Engine/Macros.a):00078                 lda   Obj_Index_Page+\1
                      (./Engine/Macros.a):00079                 _SetCartPageA
                      (./Engine/Macros.a):00080                 ldx   Obj_Index_Address+2*\1
                      (./Engine/Macros.a):00081          ENDM
                      (./Engine/Macros.a):00082         
0000                  (./Engine/Macros.a):00083         _RunObject MACRO 
                      (./Engine/Macros.a):00084                 ; param 1 : ObjID_
                      (./Engine/Macros.a):00085                 ; param 2 : Object data RAM address
                      (./Engine/Macros.a):00086                 ; manual launch of an object from the resident page 1
                      (./Engine/Macros.a):00087                 _MountObject \1
                      (./Engine/Macros.a):00088                 ldu   \2        
                      (./Engine/Macros.a):00089                 jsr   ,x
                      (./Engine/Macros.a):00090          ENDM
                      (./Engine/Macros.a):00091         
0000                  (./Engine/Macros.a):00092         _RunObjectRoutine MACRO 
                      (./Engine/Macros.a):00093                 ; param 1 : ObjID_
                      (./Engine/Macros.a):00094                 ; param 2 : Object routine
                      (./Engine/Macros.a):00095                 ; manual launch of an object from the resident page 1
                      (./Engine/Macros.a):00096                 ; this object does not need or have a data structure for this routine
                      (./Engine/Macros.a):00097                 _MountObject \1
                      (./Engine/Macros.a):00098                 lda   \2        
                      (./Engine/Macros.a):00099                 jsr   ,x
                      (./Engine/Macros.a):00100          ENDM
                      (./Engine/Macros.a):00101         
0000                  (./Engine/Macros.a):00102         _asld MACRO
                      (./Engine/Macros.a):00103                 aslb
                      (./Engine/Macros.a):00104                 rola
                      (./Engine/Macros.a):00105          ENDM        
                      (./Engine/Macros.a):00106          
0000                  (./Engine/Macros.a):00107         _asrd MACRO
                      (./Engine/Macros.a):00108                 asra
                      (./Engine/Macros.a):00109                 rorb
                      (./Engine/Macros.a):00110          ENDM      
                      (./Engine/Macros.a):00111          
0000                  (./Engine/Macros.a):00112         _lsld MACRO
                      (./Engine/Macros.a):00113                 lslb
                      (./Engine/Macros.a):00114                 rola
                      (./Engine/Macros.a):00115          ENDM        
                      (./Engine/Macros.a):00116          
0000                  (./Engine/Macros.a):00117         _lsrd MACRO
                      (./Engine/Macros.a):00118                 lsra
                      (./Engine/Macros.a):00119                 rorb
                      (./Engine/Macros.a):00120          ENDM
                      (./Engine/Macros.a):00121          
0000                  (./Engine/Macros.a):00122         _rold MACRO
                      (./Engine/Macros.a):00123                 rolb
                      (./Engine/Macros.a):00124                 rola
                      (./Engine/Macros.a):00125          ENDM    
                      (./Engine/Macros.a):00126          
0000                  (./Engine/Macros.a):00127         _rord MACRO
                      (./Engine/Macros.a):00128                 rora
                      (./Engine/Macros.a):00129                 rorb
                      (./Engine/Macros.a):00130          ENDM
                      (./Engine/Macros.a):00131         
0000                  (./Engine/Macros.a):00132         _negd MACRO
                      (./Engine/Macros.a):00133                 nega
                      (./Engine/Macros.a):00134                 negb
                      (./Engine/Macros.a):00135                 sbca  #0
                      (./Engine/Macros.a):00136          ENDM
                      (./Engine/Macros.a):00137         
0000                  (./Engine/Macros.a):00138         _cba MACRO
                      (./Engine/Macros.a):00139                 pshs  b
                      (./Engine/Macros.a):00140                 cmpa  ,s+
                      (./Engine/Macros.a):00141          ENDM
                      (./Engine/Macros.a):00142         
0000                  (./Engine/Macros.a):00143         _aba MACRO
                      (./Engine/Macros.a):00144                 pshs  b
                      (./Engine/Macros.a):00145                 adda  ,s+
                      (./Engine/Macros.a):00146          ENDM
                      (./Engine/Macros.a):00147         
0000                  (./Engine/Macros.a):00148         _sba MACRO
                      (./Engine/Macros.a):00149                 pshs  b
                      (./Engine/Macros.a):00150                 suba  ,s+
                      (./Engine/Macros.a):00151          ENDM
                      (./Engine/Macros.a):00152         
0000                  (./Engine/Macros.a):00153         _cab MACRO
                      (./Engine/Macros.a):00154                 pshs  a
                      (./Engine/Macros.a):00155                 cmpb  ,s+
                      (./Engine/Macros.a):00156          ENDM
                      (./Engine/Macros.a):00157         
0000                  (./Engine/Macros.a):00158         _aab MACRO
                      (./Engine/Macros.a):00159                 pshs  a
                      (./Engine/Macros.a):00160                 addb  ,s+
                      (./Engine/Macros.a):00161          ENDM
                      (./Engine/Macros.a):00162         
0000                  (./Engine/Macros.a):00163         _sab MACRO
                      (./Engine/Macros.a):00164                 pshs  a
                      (./Engine/Macros.a):00165                 subb  ,s+
                      (./Engine/Macros.a):00166          ENDM
                      (C:\Users\bhrou\gi):00018                 
                      (C:\Users\bhrou\gi):00019                 org   $6200
                      (C:\Users\bhrou\gi):00020         
6200                  (C:\Users\bhrou\gi):00021         PalInit
     62               (C:\Users\bhrou\gi):00022                 setdp $62
6200 8662             (C:\Users\bhrou\gi):00023                 lda   #$62
6202 1F8B             (C:\Users\bhrou\gi):00024                 tfr   a,dp                     * positionne la direct page a 62
                      (C:\Users\bhrou\gi):00025                 
6204                  (C:\Users\bhrou\gi):00026         PalFade        
6204 0F7E             (C:\Users\bhrou\gi):00027                 clr   <pal_idx
6206 8E62F8           (C:\Users\bhrou\gi):00028                 ldx   #pal_len                 * index limite de chargement pour couleur courante 
6209 CE62EC           (C:\Users\bhrou\gi):00029                 ldu   #pal_from                * chargement pointeur valeur des couleurs actuelles
                      (C:\Users\bhrou\gi):00030                 
620C                  (C:\Users\bhrou\gi):00031         Vsync_1                                
620C 7DE7E7           (C:\Users\bhrou\gi):00032                 tst   $E7E7                    * le faisceau n'est pas dans l'ecran utile
620F 2AFB             (C:\Users\bhrou\gi):00033                 bpl   Vsync_1                  * tant que le bit est a 0 on boucle
6211                  (C:\Users\bhrou\gi):00034         Vsync_2                                 
6211 7DE7E7           (C:\Users\bhrou\gi):00035                 tst   $E7E7                    * le faisceau est dans l'ecran utile
6214 2BFB             (C:\Users\bhrou\gi):00036                 bmi   Vsync_2                  * tant que le bit est a 1 on boucle
                      (C:\Users\bhrou\gi):00037                 
6216 108E0140         (C:\Users\bhrou\gi):00038                 ldy   #0320                    * 40 lignes * 8 cycles
621A                  (C:\Users\bhrou\gi):00039         Tempo        
621A 313F             (C:\Users\bhrou\gi):00040                 leay  -1,y
621C 26FC             (C:\Users\bhrou\gi):00041                 bne   Tempo                    * tempo pour etre dans la bordure invisible   
                      (C:\Users\bhrou\gi):00042                                                                                 
621E 0AFE             (C:\Users\bhrou\gi):00043                 dec   <pal_cycles              * decremente le compteur du nombre de frame
6220 275E             (C:\Users\bhrou\gi):00044                 beq   InitVideo                * si termine
                      (C:\Users\bhrou\gi):00045                 
6222                  (C:\Users\bhrou\gi):00046         PalRun
6222 A6C4             (C:\Users\bhrou\gi):00047                 lda   ,u                                   * chargement de la composante verte et rouge
6224 94FF             (C:\Users\bhrou\gi):00048                 anda  <pal_mask                * on efface la valeur vert ou rouge par masque
6226 C6FF             (C:\Users\bhrou\gi):00049                 ldb   #$FF                     * composante verte et rouge couleur cible
6228 D4FF             (C:\Users\bhrou\gi):00050                 andb  <pal_mask                * on efface la valeur vert ou rouge par masque
622A D778             (C:\Users\bhrou\gi):00051                 stb   <pal_buffer              * on stocke la valeur cible pour comparaison
622C C611             (C:\Users\bhrou\gi):00052                 ldb   #$11                     * preparation de la valeur d'increment de couleur
622E D4FF             (C:\Users\bhrou\gi):00053                 andb  <pal_mask                * on efface la valeur non utile par masque
6230 D779             (C:\Users\bhrou\gi):00054                 stb   <pal_buffer+1            * on stocke la valeur pour ADD ou SUB ulterieur
6232 9178             (C:\Users\bhrou\gi):00055                 cmpa  <pal_buffer              * comparaison de la composante courante et cible
6234 270E             (C:\Users\bhrou\gi):00056                 beq   PalVRSuivante            * si composante est egale a la cible on passe
6236 2206             (C:\Users\bhrou\gi):00057                 bhi   PalVRDec                 * si la composante est superieure on branche
6238 A6C4             (C:\Users\bhrou\gi):00058                 lda   ,u                       * on recharge la valeur avec vert et rouge
623A 9B79             (C:\Users\bhrou\gi):00059                 adda  <pal_buffer+1            * on incremente la composante verte ou rouge
623C 2004             (C:\Users\bhrou\gi):00060                 bra   PalVRSave                * on branche pour sauvegarder
623E                  (C:\Users\bhrou\gi):00061         PalVRDec
623E A6C4             (C:\Users\bhrou\gi):00062                 lda   ,u                       * on recharge la valeur avec vert et rouge
6240 9079             (C:\Users\bhrou\gi):00063                 suba  <pal_buffer+1            * on decremente la composante verte ou rouge
6242                  (C:\Users\bhrou\gi):00064         PalVRSave                             
6242 A7C4             (C:\Users\bhrou\gi):00065                 sta   ,u                       * sauvegarde de la nouvelle valeur vert ou rouge
6244                  (C:\Users\bhrou\gi):00066         PalVRSuivante                         
6244 03FF             (C:\Users\bhrou\gi):00067                 com   <pal_mask                * inversion du masque pour traiter l'autre semioctet
6246 2BDA             (C:\Users\bhrou\gi):00068                 bmi   PalRun                   * si on traite $F0 on branche sinon on continue
                      (C:\Users\bhrou\gi):00069                     
6248                  (C:\Users\bhrou\gi):00070         SetPalBleu
6248 E641             (C:\Users\bhrou\gi):00071                 ldb   1,u                                   * chargement composante bleue courante
624A C10F             (C:\Users\bhrou\gi):00072                 cmpb  #$0F                     * comparaison composante courante et cible
624C 2708             (C:\Users\bhrou\gi):00073                 beq   SetPalNext               * si composante est egale a la cible on passe
624E 2203             (C:\Users\bhrou\gi):00074                 bhi   SetPalBleudec            * si la composante est superieure on branche
6250 5C               (C:\Users\bhrou\gi):00075                 incb                           * on incremente la composante bleue
6251 2001             (C:\Users\bhrou\gi):00076                 bra   SetPalSaveBleu           * on branche pour sauvegarder
6253                  (C:\Users\bhrou\gi):00077         SetPalBleudec                       
6253 5A               (C:\Users\bhrou\gi):00078                 decb                           * on decremente la composante bleue
6254                  (C:\Users\bhrou\gi):00079         SetPalSaveBleu                         
6254 E741             (C:\Users\bhrou\gi):00080                 stb   1,u                      * sauvegarde de la nouvelle valeur bleue
                      (C:\Users\bhrou\gi):00081                                                                                
6256                  (C:\Users\bhrou\gi):00082         SetPalNext                             
6256 967E             (C:\Users\bhrou\gi):00083                 lda   <pal_idx                 * Lecture index couleur
6258 B7E7DB           (C:\Users\bhrou\gi):00084                 sta   $E7DB                    * selectionne l'indice de couleur a ecrire
625B 8B02             (C:\Users\bhrou\gi):00085                 adda  #$02                     * increment de l'indice de couleur (x2)
625D 977E             (C:\Users\bhrou\gi):00086                 sta   <pal_idx                 * stockage du nouvel index
625F A6C4             (C:\Users\bhrou\gi):00087                 lda   ,u                       * chargement de la nouvelle couleur courante
6261 B7E7DA           (C:\Users\bhrou\gi):00088                 sta   $E7DA                    * positionne la nouvelle couleur (Vert et Rouge)
6264 F7E7DA           (C:\Users\bhrou\gi):00089                 stb   $E7DA                    * positionne la nouvelle couleur (Bleu)
6267 967E             (C:\Users\bhrou\gi):00090                 lda   <pal_idx                 * rechargement de l'index couleur
6269 A184             (C:\Users\bhrou\gi):00091                 cmpa  ,x                       * comparaison avec l'index limite pour cette couleur
626B 26E9             (C:\Users\bhrou\gi):00092                 bne   SetPalNext               * si inferieur on continue avec la meme couleur
626D 3342             (C:\Users\bhrou\gi):00093                 leau  2,u                      * on avance le pointeur vers la nouvelle couleur
626F 3001             (C:\Users\bhrou\gi):00094                 leax  1,x                      * on avance le pointeur vers la nouvelle limite
6271 8C62FE           (C:\Users\bhrou\gi):00095                 cmpx  #end_pal_len             * test de fin de liste
6274 26AC             (C:\Users\bhrou\gi):00096                 bne   PalRun                   * on reboucle si fin de liste pas atteinte
6276 208C             (C:\Users\bhrou\gi):00097                 bra   PalFade
                      (C:\Users\bhrou\gi):00098                 
6278                  (C:\Users\bhrou\gi):00099         pal_buffer                             
6278 42               (C:\Users\bhrou\gi):00100                 fcb   $42                      * B et buffer de comparaison
6279 41               (C:\Users\bhrou\gi):00101                 fcb   $41                      * A et buffer de comparaison
627A 53               (C:\Users\bhrou\gi):00102                 fcb   $53                      * S
627B 49               (C:\Users\bhrou\gi):00103                 fcb   $49                      * I
627C 43               (C:\Users\bhrou\gi):00104                 fcb   $43                      * C
627D 32               (C:\Users\bhrou\gi):00105                 fcb   $32                      * 2
                      (C:\Users\bhrou\gi):00106                                                                                
627E                  (C:\Users\bhrou\gi):00107         pal_idx                                
627E 00               (C:\Users\bhrou\gi):00108                 fcb   $00                      * index de la couleur courante dans le traitement
627F 00               (C:\Users\bhrou\gi):00109                 fcb   $00                      * espace reserve pour somme de controle
                      (C:\Users\bhrou\gi):00110            
                      (C:\Users\bhrou\gi):00111         *-------------------------------------------------------------------------------
                      (C:\Users\bhrou\gi):00112         * A partir de ce point le code doit commencer a l'adresse $6280
                      (C:\Users\bhrou\gi):00113         *-------------------------------------------------------------------------------
                      (C:\Users\bhrou\gi):00114         
                      (C:\Users\bhrou\gi):00115         ********************************************************************************  
                      (C:\Users\bhrou\gi):00116         * Initialisation du mode video
                      (C:\Users\bhrou\gi):00117         ********************************************************************************
6280                  (C:\Users\bhrou\gi):00118         InitVideo
6280 1A50             (C:\Users\bhrou\gi):00119                 orcc  #$50                     * desactive les interruptions
6282 10CE9F00         (C:\Users\bhrou\gi):00120                 lds   #glb_system_stack         * positionnement pile systeme
6286 867B             (C:\Users\bhrou\gi):00121                 lda   #$7B                     * passage en mode 160x200x16c
6288 B7E7DC           (C:\Users\bhrou\gi):00122                 sta   $E7DC
                      (C:\Users\bhrou\gi):00123           
                      (C:\Users\bhrou\gi):00124         ********************************************************************************
                      (C:\Users\bhrou\gi):00125         * Initialisation de la commutation de page pour l espace Donnees (Mode registre)
                      (C:\Users\bhrou\gi):00126         ********************************************************************************
628B F66081           (C:\Users\bhrou\gi):00127                 ldb   $6081                    * $6081 est l'image "lisible" de $E7E7
628E CA10             (C:\Users\bhrou\gi):00128                 orb   #$10                     * positionne le bit d4 a 1
6290 F76081           (C:\Users\bhrou\gi):00129                 stb   $6081                    * maintient une image coherente de $E7E7
6293 F7E7E7           (C:\Users\bhrou\gi):00130                 stb   $E7E7                    * bit d4 a 1 pour pages donnees en mode registre
6296 C664             (C:\Users\bhrou\gi):00131                 ldb   #$64                     * bit7=0, bit6=1 : ecriture autorisee, bit5=1 : espace cartouche recouvert par de la RAM, bit4-0 : numero de page 
6298 F7E7E6           (C:\Users\bhrou\gi):00132                 stb   $E7E6                    * changement page 4 dans l'espace cartouche        
                      (C:\Users\bhrou\gi):00133          
                      (C:\Users\bhrou\gi):00134         ********************************************************************************
                      (C:\Users\bhrou\gi):00135         * Lecture des donnees depuis la disquette et decompression par exomizer
                      (C:\Users\bhrou\gi):00136         ********************************************************************************
629B                  (C:\Users\bhrou\gi):00137         DKLecture
     60               (C:\Users\bhrou\gi):00138                 setdp $60
629B 8660             (C:\Users\bhrou\gi):00139                 lda   #$60
629D 1F8B             (C:\Users\bhrou\gi):00140                 tfr   a,dp                     * positionne la direct page a 60
                      (C:\Users\bhrou\gi):00141                 
629F CC0000           (C:\Users\bhrou\gi):00142                 ldd   #$0000
62A2 DD4F             (C:\Users\bhrou\gi):00143                 std   <$604F                   * DK.BUF $0000 Destination des donnees lues
62A4 9749             (C:\Users\bhrou\gi):00144                 sta   <$6049                   * DK.DRV $00 Lecteur
62A6 DD4A             (C:\Users\bhrou\gi):00145                 std   <$604A                   * DK.TRK $00 Piste
62A8 8602             (C:\Users\bhrou\gi):00146                 lda   #$02
62AA 974C             (C:\Users\bhrou\gi):00147                 sta   <$604C                   * DK.SEC $02 Secteur
62AC 9748             (C:\Users\bhrou\gi):00148                 sta   <$6048                   * DK.OPC $02 Operation - lecture d'un secteur
62AE                  (C:\Users\bhrou\gi):00149         DKCO
62AE BDE82A           (C:\Users\bhrou\gi):00150                 jsr   $E82A                    * DKCO Appel Moniteur - lecture d'un secteur
62B1 0C4C             (C:\Users\bhrou\gi):00151                 inc   <$604C                   * increment du registre Moniteur DK.SEC
62B3 964C             (C:\Users\bhrou\gi):00152                 lda   <$604C                   * chargement de DK.SEC
62B5 8110             (C:\Users\bhrou\gi):00153                 cmpa  #$10                     * si DK.SEC est inferieur ou egal a 16
62B7 2310             (C:\Users\bhrou\gi):00154                 bls   DKContinue               * on continue le traitement
62B9 8601             (C:\Users\bhrou\gi):00155                 lda   #$01                     * sinon on a depasse le secteur 16
62BB 974C             (C:\Users\bhrou\gi):00156                 sta   <$604C                   * positionnement du secteur a 1
62BD 0C4B             (C:\Users\bhrou\gi):00157                 inc   <$604B                   * increment du registre Moniteur DK.TRK
62BF 964B             (C:\Users\bhrou\gi):00158                 lda   <$604B
62C1 814F             (C:\Users\bhrou\gi):00159                 cmpa  #$4F                     * si DK.SEC est inferieur ou egal a 79
62C3 2304             (C:\Users\bhrou\gi):00160                 bls   DKContinue               * on continue le traitement
62C5 0F4B             (C:\Users\bhrou\gi):00161                 clr   <$604B                   * positionnement de la piste a 0
62C7 0C49             (C:\Users\bhrou\gi):00162                 inc   <$6049                   * increment du registre Moniteur DK.DRV
62C9                  (C:\Users\bhrou\gi):00163         DKContinue                            
62C9 0C4F             (C:\Users\bhrou\gi):00164                 inc   <$604F                   * increment de 256 octets de la zone a ecrire DK.BUF
62CB DC4F             (C:\Users\bhrou\gi):00165                 ldd   <$604F                   * chargement de la zone a ecrire DK.BUF
62CD                  (C:\Users\bhrou\gi):00166         dk_dernier_bloc                        
62CD 10830300         (C:\Users\bhrou\gi):00167                 cmpd  #Build_BootLastBlock     * test debut du dernier bloc de 256 octets a ecrire
62D1 23DB             (C:\Users\bhrou\gi):00168                 bls   DKCO                     * si DK.BUF inferieur ou egal a la limite alors DKCO
                      (C:\Users\bhrou\gi):00169         
62D3                  (C:\Users\bhrou\gi):00170         BOO_WaitVBL
62D3 7DE7E7           (C:\Users\bhrou\gi):00171                 tst   $E7E7                    ; le faisceau n'est pas dans l'ecran
62D6 2AFB             (C:\Users\bhrou\gi):00172                 bpl   BOO_WaitVBL              ; tant que le bit est a 0 on boucle
62D8                  (C:\Users\bhrou\gi):00173         BOO_WaitVBL1
62D8 7DE7E7           (C:\Users\bhrou\gi):00174                 tst   $E7E7                    ; le faisceau est dans l'ecran
62DB 2BFB             (C:\Users\bhrou\gi):00175                 bmi   BOO_WaitVBL1             ; tant que le bit est a 1 on boucle
                      (C:\Users\bhrou\gi):00176         
                      (C:\Users\bhrou\gi):00177         * Positionnement de la page 3 a l'ecran et de la page 2 en zone A000-DFFF
                      (C:\Users\bhrou\gi):00178         ***********************************************************
62DD CCC002           (C:\Users\bhrou\gi):00179                 ldd   #$C002                   ; page 3, couleur de cadre 0 et page 2
62E0 B7E7DD           (C:\Users\bhrou\gi):00180                 sta   $E7DD                    ; affiche la page a l'ecran
62E3 F7E7E5           (C:\Users\bhrou\gi):00181                 stb   $E7E5                    ; visible dans l'espace donnees
                      (C:\Users\bhrou\gi):00182                 
                      (C:\Users\bhrou\gi):00183                 _ldd  gmboot,$FF               ; level to boot and flag for first level load 
62E6 CC00FF           (             _ldd):00001                 ldd   #((gmboot)*256)+$FF
62E9 7E0000           (C:\Users\bhrou\gi):00184                 jmp   $0000
                      (C:\Users\bhrou\gi):00185         
                      (C:\Users\bhrou\gi):00186         * donnees pour le fondu de palette
                      (C:\Users\bhrou\gi):00187         ********************************************************************************
                      (C:\Users\bhrou\gi):00188         
62EC                  (C:\Users\bhrou\gi):00189         pal_from
62EC 0000             (C:\Users\bhrou\gi):00190                 fdb   $0000                    * couleur $00 Noir (Thomson) => 06 change bordure
62EE F00F             (C:\Users\bhrou\gi):00191                 fdb   $F00F                    * couleur $0C Turquoise (Bordure ecran)
62F0 FF0F             (C:\Users\bhrou\gi):00192                 fdb   $FF0F                    * couleur $0E Blanc (TO8)
62F2 7707             (C:\Users\bhrou\gi):00193                 fdb   $7707                    * couleur $10 Gris (Fond Bas)
62F4 AA03             (C:\Users\bhrou\gi):00194                 fdb   $AA03                    * couleur $16 Jaune (Interieur case)
62F6 330A             (C:\Users\bhrou\gi):00195                 fdb   $330A                    * couleur $18 Mauve (Fond TO8)
                      (C:\Users\bhrou\gi):00196                                                                                
62F8                  (C:\Users\bhrou\gi):00197         pal_len                                
62F8 0C               (C:\Users\bhrou\gi):00198                 fcb   $0C                      * pour chaque couleur on defini un index limite
62F9 0E               (C:\Users\bhrou\gi):00199                 fcb   $0E                      * (exclu) de chargement. ex: 0C, 0E, ... 
62FA 10               (C:\Users\bhrou\gi):00200                 fcb   $10                      * la premiere couleur de PAL_FROM est chargee
62FB 16               (C:\Users\bhrou\gi):00201                 fcb   $16                      * pour les couleurs 0(00) a 5(0A)
62FC 18               (C:\Users\bhrou\gi):00202                 fcb   $18                      * la seconde couleur de PAL_FORM  est chargee
62FD 20               (C:\Users\bhrou\gi):00203                 fcb   $20                      * pour la couleur 6(0C)
62FE                  (C:\Users\bhrou\gi):00204         end_pal_len
                      (C:\Users\bhrou\gi):00205            
62FE                  (C:\Users\bhrou\gi):00206         pal_cycles
62FE 10               (C:\Users\bhrou\gi):00207                 fcb   $10                      * nombre de frames de la transition (VSYNC)
                      (C:\Users\bhrou\gi):00208                                                                                
62FF                  (C:\Users\bhrou\gi):00209         pal_mask                               
62FF 0F               (C:\Users\bhrou\gi):00210                 fcb   $0F                      * masque pour l'aternance du traitemet vert/rouge
