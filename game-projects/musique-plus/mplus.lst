                      (        mplus.asm):00001         
                      (        mplus.asm):00002                 INCLUDE "./engine/macros.asm"        
0000                  (./engine/macros.a):00001         _ldd MACRO
                      (./engine/macros.a):00002                 ldd   #((\1)*256)+\2
                      (./engine/macros.a):00003          ENDM
                      (./engine/macros.a):00004          
0000                  (./engine/macros.a):00005         _ldx MACRO
                      (./engine/macros.a):00006                 ldx   #((\1)*256)+\2
                      (./engine/macros.a):00007          ENDM
                      (./engine/macros.a):00008          
0000                  (./engine/macros.a):00009         _ldy MACRO
                      (./engine/macros.a):00010                 ldy   #((\1)*256)+\2
                      (./engine/macros.a):00011          ENDM
                      (./engine/macros.a):00012          
0000                  (./engine/macros.a):00013         _ldu MACRO
                      (./engine/macros.a):00014                 ldu   #((\1)*256)+\2
                      (./engine/macros.a):00015          ENDM  
                      (./engine/macros.a):00016          
0000                  (./engine/macros.a):00017         _lds MACRO
                      (./engine/macros.a):00018                 lds   #((\1)*256)+\2
                      (./engine/macros.a):00019          ENDM   
                      (./engine/macros.a):00020          
0000                  (./engine/macros.a):00021         _SetCartPageA MACRO
                      (./engine/macros.a):00022          IFDEF T2
                      (./engine/macros.a):00023                 jsr   SetCartPageA
                      (./engine/macros.a):00024          ELSE
                      (./engine/macros.a):00025                 sta   $E7E6                    ; selection de la page RAM en zone cartouche
                      (./engine/macros.a):00026          ENDC
                      (./engine/macros.a):00027          ENDM      
                      (./engine/macros.a):00028          
0000                  (./engine/macros.a):00029         _GetCartPageA MACRO
                      (./engine/macros.a):00030          IFDEF T2
                      (./engine/macros.a):00031                 jsr   GetCartPageA
                      (./engine/macros.a):00032          ELSE
                      (./engine/macros.a):00033                 lda   $E7E6
                      (./engine/macros.a):00034          ENDC
                      (./engine/macros.a):00035          ENDM
                      (./engine/macros.a):00036         
0000                  (./engine/macros.a):00037         _SetCartPageB MACRO
                      (./engine/macros.a):00038          IFDEF T2
                      (./engine/macros.a):00039                 jsr   SetCartPageB
                      (./engine/macros.a):00040          ELSE
                      (./engine/macros.a):00041                 stb   $E7E6                    ; selection de la page RAM en zone cartouche
                      (./engine/macros.a):00042          ENDC
                      (./engine/macros.a):00043          ENDM      
                      (./engine/macros.a):00044          
0000                  (./engine/macros.a):00045         _GetCartPageB MACRO
                      (./engine/macros.a):00046          IFDEF T2
                      (./engine/macros.a):00047                 jsr   GetCartPageB
                      (./engine/macros.a):00048          ELSE
                      (./engine/macros.a):00049                 ldb   $E7E6
                      (./engine/macros.a):00050          ENDC
                      (./engine/macros.a):00051          ENDM     
                      (./engine/macros.a):00052         
0000                  (./engine/macros.a):00053         _RunObjectSwap MACRO
                      (./engine/macros.a):00054                 ; param 1 : ObjID_
                      (./engine/macros.a):00055                 ; param 2 : Object data RAM address
                      (./engine/macros.a):00056                 ; manual launch of an object from a different dynamic memory page and not from the resident page 1
                      (./engine/macros.a):00057                 lda   Obj_Index_Page+\1
                      (./engine/macros.a):00058                 sta   PSR_Page   
                      (./engine/macros.a):00059                 ldd   Obj_Index_Address+2*\1
                      (./engine/macros.a):00060                 std   PSR_Address       
                      (./engine/macros.a):00061                 ldu   \2             
                      (./engine/macros.a):00062                 jsr   RunPgSubRoutine
                      (./engine/macros.a):00063          ENDM    
                      (./engine/macros.a):00064         
0000                  (./engine/macros.a):00065         _RunObjectSwapRoutine MACRO
                      (./engine/macros.a):00066                 ; param 1 : ObjID_
                      (./engine/macros.a):00067                 ; param 2 : Object routine
                      (./engine/macros.a):00068                 ; manual launch of an object from a different dynamic memory page and not from the resident page 1
                      (./engine/macros.a):00069                 lda   Obj_Index_Page+\1   
                      (./engine/macros.a):00070                 sta   PSR_Page   
                      (./engine/macros.a):00071                 ldd   Obj_Index_Address+2*\1
                      (./engine/macros.a):00072                 std   PSR_Address       
                      (./engine/macros.a):00073                 ldb   \2        
                      (./engine/macros.a):00074                 jsr   RunPgSubRoutine
                      (./engine/macros.a):00075          ENDM 
                      (./engine/macros.a):00076          
0000                  (./engine/macros.a):00077         _MountObject MACRO 
                      (./engine/macros.a):00078                 ; param 1 : ObjID_
                      (./engine/macros.a):00079                 ; manual mount of an object from the resident page 1
                      (./engine/macros.a):00080                 lda   Obj_Index_Page+\1
                      (./engine/macros.a):00081                 _SetCartPageA
                      (./engine/macros.a):00082                 ldx   Obj_Index_Address+2*\1
                      (./engine/macros.a):00083          ENDM
                      (./engine/macros.a):00084         
0000                  (./engine/macros.a):00085         _RunObject MACRO 
                      (./engine/macros.a):00086                 ; param 1 : ObjID_
                      (./engine/macros.a):00087                 ; param 2 : Object data RAM address
                      (./engine/macros.a):00088                 ; manual launch of an object from the resident page 1
                      (./engine/macros.a):00089                 _MountObject \1
                      (./engine/macros.a):00090                 ldu   \2        
                      (./engine/macros.a):00091                 jsr   ,x
                      (./engine/macros.a):00092          ENDM
                      (./engine/macros.a):00093         
0000                  (./engine/macros.a):00094         _RunObjectRoutineA MACRO 
                      (./engine/macros.a):00095                 ; param 1 : ObjID_
                      (./engine/macros.a):00096                 ; param 2 : Object routine
                      (./engine/macros.a):00097                 ; manual launch of an object from the resident page 1
                      (./engine/macros.a):00098                 ; this object does not need or have a data structure for this routine
                      (./engine/macros.a):00099                 _MountObject \1
                      (./engine/macros.a):00100                 lda   \2        
                      (./engine/macros.a):00101                 jsr   ,x
                      (./engine/macros.a):00102          ENDM
                      (./engine/macros.a):00103         
0000                  (./engine/macros.a):00104         _RunObjectRoutineB MACRO 
                      (./engine/macros.a):00105                 ; param 1 : ObjID_
                      (./engine/macros.a):00106                 ; param 2 : Object routine
                      (./engine/macros.a):00107                 ; manual launch of an object from the resident page 1
                      (./engine/macros.a):00108                 ; this object does not need or have a data structure for this routine
                      (./engine/macros.a):00109                 _MountObject \1
                      (./engine/macros.a):00110                 ldb   \2        
                      (./engine/macros.a):00111                 jsr   ,x
                      (./engine/macros.a):00112          ENDM
                      (./engine/macros.a):00113         
0000                  (./engine/macros.a):00114         _asld MACRO
                      (./engine/macros.a):00115                 aslb
                      (./engine/macros.a):00116                 rola
                      (./engine/macros.a):00117          ENDM        
                      (./engine/macros.a):00118          
0000                  (./engine/macros.a):00119         _asrd MACRO
                      (./engine/macros.a):00120                 asra
                      (./engine/macros.a):00121                 rorb
                      (./engine/macros.a):00122          ENDM      
                      (./engine/macros.a):00123          
0000                  (./engine/macros.a):00124         _lsld MACRO
                      (./engine/macros.a):00125                 lslb
                      (./engine/macros.a):00126                 rola
                      (./engine/macros.a):00127          ENDM        
                      (./engine/macros.a):00128          
0000                  (./engine/macros.a):00129         _lsrd MACRO
                      (./engine/macros.a):00130                 lsra
                      (./engine/macros.a):00131                 rorb
                      (./engine/macros.a):00132          ENDM
                      (./engine/macros.a):00133          
0000                  (./engine/macros.a):00134         _rold MACRO
                      (./engine/macros.a):00135                 rolb
                      (./engine/macros.a):00136                 rola
                      (./engine/macros.a):00137          ENDM    
                      (./engine/macros.a):00138          
0000                  (./engine/macros.a):00139         _rord MACRO
                      (./engine/macros.a):00140                 rora
                      (./engine/macros.a):00141                 rorb
                      (./engine/macros.a):00142          ENDM
                      (./engine/macros.a):00143         
0000                  (./engine/macros.a):00144         _negd MACRO
                      (./engine/macros.a):00145                 nega
                      (./engine/macros.a):00146                 negb
                      (./engine/macros.a):00147                 sbca  #0
                      (./engine/macros.a):00148          ENDM
                      (./engine/macros.a):00149         
0000                  (./engine/macros.a):00150         _cba MACRO
                      (./engine/macros.a):00151                 pshs  b
                      (./engine/macros.a):00152                 cmpa  ,s+
                      (./engine/macros.a):00153          ENDM
                      (./engine/macros.a):00154         
0000                  (./engine/macros.a):00155         _aba MACRO
                      (./engine/macros.a):00156                 pshs  b
                      (./engine/macros.a):00157                 adda  ,s+
                      (./engine/macros.a):00158          ENDM
                      (./engine/macros.a):00159         
0000                  (./engine/macros.a):00160         _sba MACRO
                      (./engine/macros.a):00161                 pshs  b
                      (./engine/macros.a):00162                 suba  ,s+
                      (./engine/macros.a):00163          ENDM
                      (./engine/macros.a):00164         
0000                  (./engine/macros.a):00165         _cab MACRO
                      (./engine/macros.a):00166                 pshs  a
                      (./engine/macros.a):00167                 cmpb  ,s+
                      (./engine/macros.a):00168          ENDM
                      (./engine/macros.a):00169         
0000                  (./engine/macros.a):00170         _aab MACRO
                      (./engine/macros.a):00171                 pshs  a
                      (./engine/macros.a):00172                 addb  ,s+
                      (./engine/macros.a):00173          ENDM
                      (./engine/macros.a):00174         
0000                  (./engine/macros.a):00175         _sab MACRO
                      (./engine/macros.a):00176                 pshs  a
                      (./engine/macros.a):00177                 subb  ,s+
                      (./engine/macros.a):00178          ENDM
                      (        mplus.asm):00003                 org   $A000
                      (        mplus.asm):00004         
     FF               (        mplus.asm):00005                 setdp $FF
                      (        mplus.asm):00006         
A000 347E             (        mplus.asm):00007                 pshs d,x,y,u,dp
                      (        mplus.asm):00008         
                      (        mplus.asm):00009                 ; init music
A002 BDB6B1           (        mplus.asm):00010                 jsr   IrqInit
A005 86FF             (        mplus.asm):00011                 lda   #255
A007 8E4DFF           (        mplus.asm):00012                 ldx   #Irq_one_frame
A00A BDB6DD           (        mplus.asm):00013                 jsr   IrqSync
A00D BDB6C7           (        mplus.asm):00014                 jsr   IrqOn 
                      (        mplus.asm):00015         
A010 8601             (        mplus.asm):00016                 lda   #$01
A012 B7A746           (        mplus.asm):00017                 sta   Smps.60HzData 
A015 BDAA6F           (        mplus.asm):00018                 jsr   YM2413_DrumModeOn
A018 8EA02E           (        mplus.asm):00019                 ldx   #Smps_ARZ
A01B BDAB5C           (        mplus.asm):00020                 jsr   PlayMusic 
                      (        mplus.asm):00021         
                      (        mplus.asm):00022         * ==============================================================================
                      (        mplus.asm):00023         * Main Loop
                      (        mplus.asm):00024         * ==============================================================================
A01E                  (        mplus.asm):00025         LevelMainLoop
A01E B6E7C8           (        mplus.asm):00026                 lda   $E7C8
A021 44               (        mplus.asm):00027                 lsra
A022 2502             (        mplus.asm):00028                 bcs   @exit   
A024 20F8             (        mplus.asm):00029                 bra   LevelMainLoop
A026                  (        mplus.asm):00030         @exit
A026 BDB6D2           (        mplus.asm):00031                 jsr   IrqOff
A029 BDAAAB           (        mplus.asm):00032                 jsr   InitMusicPlayback
A02C 35FE             (        mplus.asm):00033                 puls  d,x,y,u,dp,pc
                      (        mplus.asm):00034         
A02E                  (        mplus.asm):00035         Smps_ARZ
A02E 06F7060301E0044E (        mplus.asm):00036                 INCLUDEBIN "./2-06 Aquatic Ruin Zone.1380.smp"
     000000B3000C01BA
     000F0240001302F0
     000F0393000C04DE
     D004000105D6D006
     000106C900010002
     BF06BDBF12C2BF0C
     C1800612C40CC206
     80C9C630E70CE3BD
     12BBB8BD0680BBBD
     80BB80BB12BAB6BB
     0680BABB80BA80BA
     12B8B5BA0680B8BA
     80B880E3C712C9CB
     CB0680CBC980C780
     C6308006C980C9C7
     80C680C4308006C7
     80C7C680C480E3C2
     12C4C6C40680C4C2
     80C480C2308006C6
     80C6C480C280C130
     8006C480C4C180C1
     8006E3EF00F00602
     020299069B8F30E7
     30E78F8012960696
     80999B8F30E730E7
     8F80129606968012
     8094970680189912
     9406808012929606
     8018971292068080
     1291940680189612
     9A068080128F9308
     8016960691929496
     8012949708801699
     1294098003801292
     9606801897129207
     800580129D9A0880
     1696129D08800480
     129B060C96068096
     960C069B9612940C
     80069B12940C9480
     069B12940C928006
     9912920C92800699
     12920C9180069D12
     9A0C968006911296
     0C9B80069612930C
     80088F9193949694
     0C80069B12A00C80
     06A0809B12940C92
     800699129E0C9E80
     069912960C918006
     96129A0C9D129A96
     0C9B03809B809B06
     80129B0380039B80
     9B06801E99069BF6
     FF05800CEF01F004
     020302BF12C1C20C
     C630E730E70C8006
     BEBE8012BFC1C206
     BFC630E730E70C80
     06BEBE80EF02E606
     F8FE478006C680C7
     12C6C406C2C118C4
     C330E718800CF8FE
     3180060CC712C6C4
     06C2C118BEBF30E7
     188018EF01E6F8F8
     FE2FB780B780B8B8
     80BA308006F8FE21
     B30380B380B30680
     12B3038003B380B3
     06802AE602F6FF7E
     EF01F00402030280
     0CE0808007BF12C1
     C20CC630E730E70B
     C406C480128007BF
     12C1C206BFC630E7
     30E70BC406C48080
     07EF02E606F8FDBA
     8006C680C712C6C4
     06C2C118C4C330E7
     18800CF8FDA48006
     0CC712C6C406C2C1
     18BEBF30E7188018
     EF01E6F8F8FDA2B7
     80B780B8B880BA30
     8006BD12BBB8BD06
     80BBBD80BB80BB12
     BAB6BB0680BABB80
     BA80BA12B8B5BA06
     80B8BA80B805E6FC
     C20380C280C20680
     12C2038003C280C2
     06802AE606F6FF5D
     800CEF03E040B30C
     B606B180B580B30C
     B30680B6B10CB5B3
     B606B10CB50680B3
     18EF05AE06AE8012
     EF03F70002FFD5AF
     0CB306B60CAFB106
     80B10CB506B80CB1
     0680B60CBA06B10C
     B5B6BA0680BAAF0C
     B3B5B806B20CB3B5
     B80680B8B20CB5B3
     B706AE0CB1B3B706
     80B7AE0CB1F70002
     FFBFEF01E604F002
     020102F8FD00C606
     80C680C7C780C980
     8002C308C4C6C7C9
     F8FCEBC2C2C28012
     C206C2C2802AE6FC
     F6FF61800CF00601
     0605E9F4E0C08030
     80EF04CB06D2CBD2
     CB188012CA06CA80
     12F70002FFEA8030
     8080C206C2C9C61E
     8030808006CB80CB
     C980C980C780C780
     C60380C680098006
     80308080C206C2C9
     C61E8030808006CB
     80CBCB80C980CB0C
     C906CB12C902C8C6
     C4C2C1E604E90CEF
     01F002020102E080
     F8FC86C30680C380
     C4C480C6808002BF
     08C1C3C4C6F8FC71
     C606C6C68012C606
     C6C6802AE6FCF6FF
     66810C8206811281
     0681128C06820C83
     068180E3810C8206
     81128C068CE38306
     8381121E121E121E
     1283068280800C81
     12818C068D811281
     8D068E8112068C8C
     8D8D8E8E8082060C
     81F8FFB7F70003FF
     FA83068281828280
     8280828082808282
     8383F8FF9EF70003
     FFFA820483838383
     83830C0683838383
     838383830CF8FF96
     F70006FFFA810C82
     8106830C06810882
     82828282F8FF7FF7
     0006FFFA83068282
     188206828218810C
     830683F6FF75800C
     E90CAE0CB306AC80
     B180AE0CAE0680B3
     AC0CB1AEB306AC80
     B180AE18AA06AA80
     12F70002FFDEAC0C
     AF06B30CACAC0680
     AC0CAF06B50CAC06
     8006B10CB606AE0C
     B1B3B60680B6AA0C
     AFAFB506AC0CAFB2
     B50680B5AE0CB2AE
     B306AC0CAEAEB306
     80B3AB0CAEF70002
     FFBEE9F4C40CC706
     BF0CC2C40680C780
     BFC20CC40680C20C
     C606BD0CC1C20680
     C680BDC10CC20680
     C10CC406BE0CBFC1
     0680C480BEBF0CC1
     0680C30CC606BF0C
     C1C30680C680BFC1
     0CC30680C40CC706
     BF0CC2C4C70680BF
     C20CC40680C20CC6
     06BD0CC1C2C60680
     BDC10CC20680C10C
     C406BE0CBFC1C406
     80BEBF0CC10680C6
     C6C68012C606C6C6
     802AF6FF0DF2800C
     F003020105803080
     F50AC606CDC6CDC6
     188012C206C28012
     F70002FFEA803080
     80BD06BFC6C21E80
     30808006C680C6C4
     80C480C380C380BF
     0380BF8009800680
     308080BD06BFC6C2
     1E8030808006C680
     C4C680C480C60CC4
     06C612C402C2C1BF
     BDBCF501E6FEBF0C
     C406BB0CBFBF0680
     C280B8BF0CBF0680
     BD0CC206BA0CBDBD
     0680C280BABD0CBD
     0680BE0CC106BA0C
     BBBE0680C180BABA
     0CBA0680BF0CC306
     BA0CBDBF0680C380
     BABD0CBF0680BF0C
     C406BB0CBFBFC206
     80B8BF0CBF0680BD
     0CC206BA0CBDBDC2
     0680BABD0CBD0680
     BE0CC106BA0CBBBE
     C10680BABA0CBA06
     80C1C1C18012C106
     C1C1802AE602F6FF
     16F3E7800CF50280
     0CC6068007C60680
     11C60C8006C60C80
     06C680F70013FFE9
     C606C6C68012C606
     C6C6802AF6FFDAE1
     0071009100E10061
     F4E100
                      (        mplus.asm):00037                 INCLUDE "./smps.asm" 
                      (       ./smps.asm):00001         * ---------------------------------------------------------------------------
                      (       ./smps.asm):00002         * SMPS 6809 - Sample Music Playback System for 6809 (LWASM)
                      (       ./smps.asm):00003         * ---------------------------------------------------------------------------
                      (       ./smps.asm):00004         * by Bentoc June 2021, based on
                      (       ./smps.asm):00005         * Sonic the Hedgehog 2 disassembled Z80 sound driver
                      (       ./smps.asm):00006         * Disassembled by Xenowhirl for AS
                      (       ./smps.asm):00007         * Additional disassembly work by RAS Oct 2008
                      (       ./smps.asm):00008         * RAS' work merged into SVN by Flamewing
                      (       ./smps.asm):00009         *
                      (       ./smps.asm):00010         * TODO
                      (       ./smps.asm):00011         * - Test real hardware wait time and adjust the code
                      (       ./smps.asm):00012         * ---------------------------------------------------------------------------
                      (       ./smps.asm):00013         
                      (       ./smps.asm):00014         ; SMPS Header
     0000             (       ./smps.asm):00015         SMPS_VOICE                   equ   0
     0002             (       ./smps.asm):00016         SMPS_NB_FM                   equ   2
     0003             (       ./smps.asm):00017         SMPS_NB_PSG                  equ   3
     0004             (       ./smps.asm):00018         SMPS_TEMPO                   equ   4
     0004             (       ./smps.asm):00019         SMPS_TEMPO_DELAY             equ   4
     0005             (       ./smps.asm):00020         SMPS_DELAY                   equ   5
     0006             (       ./smps.asm):00021         SMPS_TRK_HEADER              equ   6
     0008             (       ./smps.asm):00022         SMPS_DAC_FLAG                equ   8
                      (       ./smps.asm):00023         
                      (       ./smps.asm):00024         ; SMPS Header (each track)
     0000             (       ./smps.asm):00025         SMPS_TRK_DATA_PTR            equ   0 
     0002             (       ./smps.asm):00026         SMPS_TRK_TR_VOL_PTR          equ   2
     0005             (       ./smps.asm):00027         SMPS_TRK_ENV_PTR             equ   5
     0004             (       ./smps.asm):00028         SMPS_TRK_FM_HDR_LEN          equ   4
     0006             (       ./smps.asm):00029         SMPS_TRK_PSG_HDR_LEN         equ   6
                      (       ./smps.asm):00030         
                      (       ./smps.asm):00031         ; SMPS SFX Header
     0000             (       ./smps.asm):00032         SMPS_SFX_VOICE               equ   0
     0002             (       ./smps.asm):00033         SMPS_SFX_TEMPO               equ   2
     0002             (       ./smps.asm):00034         SMPS_SFX_TEMPO_NB_CH         equ   2
     0003             (       ./smps.asm):00035         SMPS_SFX_NB_CH               equ   3
     0004             (       ./smps.asm):00036         SMPS_SFX_HDR_LEN             equ   4
                      (       ./smps.asm):00037         
                      (       ./smps.asm):00038         ; SMPS SFX Header (each track)
     0000             (       ./smps.asm):00039         SMPS_SFX_TRK_CH              equ   0
     0002             (       ./smps.asm):00040         SMPS_SFX_TRK_DATA_PTR        equ   2 
     0004             (       ./smps.asm):00041         SMPS_SFX_TRK_TR_VOL_PTR      equ   4
     0006             (       ./smps.asm):00042         SMPS_SFX_TRK_HDR_LEN         equ   6
                      (       ./smps.asm):00043         
                      (       ./smps.asm):00044         ; Hardware Addresses
     E7FE             (       ./smps.asm):00045         PSG                          equ   $E7FE
     E7FC             (       ./smps.asm):00046         YM2413_A0                    equ   $E7FC
     E7FD             (       ./smps.asm):00047         YM2413_D0                    equ   $E7FD
                      (       ./smps.asm):00048         
                      (       ./smps.asm):00049         ******************************************************************************
                      (       ./smps.asm):00050         
                      (       ./smps.asm):00051         Track STRUCT
                      (       ./smps.asm):00052                                                               ;         "playback control"; bits 
                      (       ./smps.asm):00053                                                               ;         1 (02h)  seems to be "track is at rest"
                      (       ./smps.asm):00054                                                               ;         2 (04h)  SFX is overriding this track
                      (       ./smps.asm):00055                                                               ;         3 (08h)  modulation on
                      (       ./smps.asm):00056                                                               ;         4 (10h)  do not attack next note
                      (       ./smps.asm):00057                                                               ;         7 (80h)  track is playing
0000s                 (       ./smps.asm):00058         PlaybackControl                rmb   1
                      (       ./smps.asm):00059                                                               ;         "voice control"; bits 
                      (       ./smps.asm):00060                                                               ;         0-3 (00h-0Fh) Channel number
                      (       ./smps.asm):00061                                                               ;         7   (80h) PSG Track
                      (       ./smps.asm):00062                                                               ;         PSG    Chn    |a| |00000|
                      (       ./smps.asm):00063                                                               ;         Voice1 0x80 = 100  00000
                      (       ./smps.asm):00064                                                               ;         Voice2 0xa0 = 101  00000
                      (       ./smps.asm):00065                                                               ;         Voice3 0xc0 = 110  00000                                                      
                      (       ./smps.asm):00066                                                               ;         Voice4 0xe0 = 111  00000                                                      
0001s                 (       ./smps.asm):00067         VoiceControl                   rmb   1
                      (       ./smps.asm):00068                                                               ;         "note control"; bits
                      (       ./smps.asm):00069                                                               ;         0-3 (00h-0Fh) Current Block(0-2) and FNum(8)
                      (       ./smps.asm):00070                                                               ;         4   (10h) Key On
                      (       ./smps.asm):00071                                                               ;         5   (20h) Sustain On
0002s                 (       ./smps.asm):00072         NoteControl                    rmb   1
0003s                 (       ./smps.asm):00073         TempoDivider                   rmb   1                ; timing divisor; 1 = Normal, 2 = Half, 3 = Third...
0004s                 (       ./smps.asm):00074         DataPointer                    rmb   2                ; Track's position
0006s                 (       ./smps.asm):00075         Transpose                      rmb   1                ; Transpose (from coord flag E9)
0007s                 (       ./smps.asm):00076         Volume                         rmb   1                ; Attenuation - (Dependency) Should follow Transpose
0008s                 (       ./smps.asm):00077         VoiceIndex                     rmb   1                ; Current voice in use OR current PSG tone
0009s                 (       ./smps.asm):00078         VolFlutter                     rmb   1                ; PSG flutter (dynamically effects PSG volume for decay effects)
000As                 (       ./smps.asm):00079         StackPointer                   rmb   1                ; "Gosub" stack position offset (starts at 2Ah, i.e. end of track, and each jump decrements by 2)
000Bs                 (       ./smps.asm):00080         DurationTimeout                rmb   1                ; current duration timeout; counting down to zero
000Cs                 (       ./smps.asm):00081         SavedDuration                  rmb   1                ; last set duration (if a note follows a note, this is reapplied to 0Bh)
                      (       ./smps.asm):00082                                                               ; 0Dh / 0Eh change a little depending on track -- essentially they hold data relevant to the next note to play
000Ds                 (       ./smps.asm):00083         NextData                       rmb   2                ; DAC Next drum to play - FM/PSG  frequency
000Fs                 (       ./smps.asm):00084         NoteFillTimeout                rmb   1                ; Currently set note fill; counts down to zero and then cuts off note
0010s                 (       ./smps.asm):00085         NoteFillMaster                 rmb   1                ; Reset value for current note fill
0011s                 (       ./smps.asm):00086         ModulationPtr                  rmb   2                ; address of current modulation setting
0013s                 (       ./smps.asm):00087         ModulationWait                 rmb   1                ; Wait for ww period of time before modulation starts
0014s                 (       ./smps.asm):00088         ModulationSpeed                rmb   1                ; Modulation Speed
0015s                 (       ./smps.asm):00089         ModulationDelta                rmb   1                ; Modulation change per Mod. Step
0016s                 (       ./smps.asm):00090         ModulationSteps                rmb   1                ; Number of steps in modulation (divided by 2)
0017s                 (       ./smps.asm):00091         ModulationVal                  rmb   2                ; Current modulation value
0019s                 (       ./smps.asm):00092         Detune                         rmb   1                ; Set by detune coord flag E1; used to add directly to FM/PSG frequency
001As                 (       ./smps.asm):00093         VolTLMask                      rmb   1                ; zVolTLMaskTbl value set during voice setting (value based on algorithm indexing zGain table)
001Bs                 (       ./smps.asm):00094         PSGNoise                       rmb   1                ; PSG noise setting
001Cs                 (       ./smps.asm):00095         TLPtr                          rmb   2                ; where TL bytes of current voice begin (set during voice setting)
001Es                 (       ./smps.asm):00096         InstrTranspose                 rmb   1                ; instrument transpose
                      (       ./smps.asm):00097                                                               ;         "InstrAndVolume"; bits
                      (       ./smps.asm):00098                                                               ;          FM Instr.  Attnenuation
                      (       ./smps.asm):00099                                                               ; FM       0000       xxxx
                      (       ./smps.asm):00100                                                               ; FM       0001       xxxx 
                      (       ./smps.asm):00101                                                               ; ...  
                      (       ./smps.asm):00102                                                               ; PSG      Chn    |a| |1Fh|
                      (       ./smps.asm):00103                                                               ; VOL1     0x90 = 100 1xxxx        vol 4b xxxx = attenuation value
                      (       ./smps.asm):00104                                                               ; VOL2     0xb0 = 101 1xxxx        vol 4b
                      (       ./smps.asm):00105                                                               ; VOL3     0xd0 = 110 1xxxx        vol 4b
                      (       ./smps.asm):00106                                                               ; VOL4     0xf0 = 111 1xxxx        vol 4b       
001Fs                 (       ./smps.asm):00107         InstrAndVolume                 rmb   1                ; current instrument and volume
0020s                 (       ./smps.asm):00108         LoopCounters                   rmb   $A               ; Loop counter index 0
                      (       ./smps.asm):00109                                                               ;   ... open ...
                      (       ./smps.asm):00110                                                               ; start of next track, every two bytes below this is a coord flag "gosub" (F8h) return stack
                      (       ./smps.asm):00111                                                               ;
                      (       ./smps.asm):00112                                                               ;        The bytes between +20h and +29h are "open"; starting at +20h and going up are possible loop counters
                      (       ./smps.asm):00113                                                               ;        (for coord flag F7) while +2Ah going down (never AT 2Ah though) are stacked return addresses going
                      (       ./smps.asm):00114                                                               ;        down after calling coord flag F8h.  Of course, this does mean collisions are possible with either
                      (       ./smps.asm):00115                                                               ;        or other track memory if you're not careful with these!  No range checking is performed!
                      (       ./smps.asm):00116                                                               ;
                      (       ./smps.asm):00117                                                               ;        All tracks are 2Ah bytes long
002As                 (       ./smps.asm):00118          ENDSTRUCT
                      (       ./smps.asm):00119         
                      (       ./smps.asm):00120         ; Track STRUCT Constants
     0000             (       ./smps.asm):00121         PlaybackControl              equ   0
     0001             (       ./smps.asm):00122         VoiceControl                 equ   1
     0002             (       ./smps.asm):00123         NoteControl                  equ   2
     0003             (       ./smps.asm):00124         TempoDivider                 equ   3
     0004             (       ./smps.asm):00125         DataPointer                  equ   4
     0006             (       ./smps.asm):00126         TranspAndVolume              equ   6
     0006             (       ./smps.asm):00127         Transpose                    equ   6
     0007             (       ./smps.asm):00128         Volume                       equ   7
     0008             (       ./smps.asm):00129         VoiceIndex                   equ   8
     0009             (       ./smps.asm):00130         VolFlutter                   equ   9
     000A             (       ./smps.asm):00131         StackPointer                 equ   10
     000B             (       ./smps.asm):00132         DurationTimeout              equ   11
     000C             (       ./smps.asm):00133         SavedDuration                equ   12
     000D             (       ./smps.asm):00134         NextData                     equ   13
     000F             (       ./smps.asm):00135         NoteFillTimeout              equ   15
     0010             (       ./smps.asm):00136         NoteFillMaster               equ   16
     0011             (       ./smps.asm):00137         ModulationPtr                equ   17
     0013             (       ./smps.asm):00138         ModulationWait               equ   19
     0014             (       ./smps.asm):00139         ModulationSpeed              equ   20
     0015             (       ./smps.asm):00140         ModulationDelta              equ   21
     0016             (       ./smps.asm):00141         ModulationSteps              equ   22
     0017             (       ./smps.asm):00142         ModulationVal                equ   23
     0019             (       ./smps.asm):00143         Detune                       equ   25
     001A             (       ./smps.asm):00144         VolTLMask                    equ   26
     001B             (       ./smps.asm):00145         PSGNoise                     equ   27
     001C             (       ./smps.asm):00146         TLPtr                        equ   28
     001E             (       ./smps.asm):00147         InstrTranspose               equ   30 
     001F             (       ./smps.asm):00148         InstrAndVolume               equ   31 
     0020             (       ./smps.asm):00149         LoopCounters                 equ   32   
     002A             (       ./smps.asm):00150         GoSubStack                   equ   42
                      (       ./smps.asm):00151         
                      (       ./smps.asm):00152         ******************************************************************************
                      (       ./smps.asm):00153         
                      (       ./smps.asm):00154         SmpsVar STRUCT
0000s                 (       ./smps.asm):00155         SFXPriorityVal                 rmb   1        
0001s                 (       ./smps.asm):00156         TempoTimeout                   rmb   1        
0002s                 (       ./smps.asm):00157         CurrentTempo                   rmb   1                ; Stores current tempo value here
0003s                 (       ./smps.asm):00158         StopMusic                      rmb   1                ; Set to 7Fh to pause music, set to 80h to unpause. Otherwise 00h
0004s                 (       ./smps.asm):00159         FadeOutCounter                 rmb   1        
0005s                 (       ./smps.asm):00160         FadeOutDelay                   rmb   1        
0006s                 (       ./smps.asm):00161         QueueToPlay                    rmb   1                ; if NOT set to 80h, means new index was requested by 68K
0007s                 (       ./smps.asm):00162         SFXToPlay                      rmb   2                ; When Genesis wants to play "normal" sound, it writes it here
0009s                 (       ./smps.asm):00163         VoiceTblPtr                    rmb   2                ; address of the voices
000Bs                 (       ./smps.asm):00164         SFXVoiceTblPtr                 rmb   2                ; address of the SFX voices
000Ds                 (       ./smps.asm):00165         FadeInFlag                     rmb   1        
000Es                 (       ./smps.asm):00166         FadeInDelay                    rmb   1        
000Fs                 (       ./smps.asm):00167         FadeInCounter                  rmb   1        
0010s                 (       ./smps.asm):00168         1upPlaying                     rmb   1        
0011s                 (       ./smps.asm):00169         TempoMod                       rmb   1        
0012s                 (       ./smps.asm):00170         TempoTurbo                     rmb   1                ; Stores the tempo if speed shoes are acquired (or 7Bh is played anywho)
0013s                 (       ./smps.asm):00171         SpeedUpFlag                    rmb   1        
0014s                 (       ./smps.asm):00172         DACEnabled                     rmb   1                
0015s                 (       ./smps.asm):00173         60HzData                       rmb   1                ; 1: play 60hz track at 50hz, 0: do not skip frames
0016s                 (       ./smps.asm):00174          ENDSTRUCT
                      (       ./smps.asm):00175         
     0000             (       ./smps.asm):00176         SFXPriorityVal                 equ   0
     0001             (       ./smps.asm):00177         TempoTimeout                   equ   1        
     0002             (       ./smps.asm):00178         CurrentTempo                   equ   2
     0003             (       ./smps.asm):00179         StopMusic                      equ   3
     0004             (       ./smps.asm):00180         FadeOutCounter                 equ   4        
     0005             (       ./smps.asm):00181         FadeOutDelay                   equ   5        
     0006             (       ./smps.asm):00182         QueueToPlay                    equ   6
     0007             (       ./smps.asm):00183         SFXToPlay                      equ   7
     0009             (       ./smps.asm):00184         VoiceTblPtr                    equ   9
     000B             (       ./smps.asm):00185         SFXVoiceTblPtr                 equ   11
     000D             (       ./smps.asm):00186         FadeInFlag                     equ   13       
     000E             (       ./smps.asm):00187         FadeInDelay                    equ   14        
     000F             (       ./smps.asm):00188         FadeInCounter                  equ   15        
     0010             (       ./smps.asm):00189         _1upPlaying                    equ   16        
     0011             (       ./smps.asm):00190         TempoMod                       equ   17        
     0012             (       ./smps.asm):00191         TempoTurbo                     equ   18
     0013             (       ./smps.asm):00192         SpeedUpFlag                    equ   19        
     0014             (       ./smps.asm):00193         DACEnabled                     equ   20                
     0015             (       ./smps.asm):00194         _60HzData                      equ   21
                      (       ./smps.asm):00195         
                      (       ./smps.asm):00196         ******************************************************************************
                      (       ./smps.asm):00197         
A731                  (       ./smps.asm):00198         StructStart
A731                  (       ./smps.asm):00199         Smps          SmpsVar
                      (       ./smps.asm):00200         
A747                  (       ./smps.asm):00201         tracksStart                ; This is the beginning of all BGM track memory
A747                  (       ./smps.asm):00202         SongDACFMStart
A747                  (       ./smps.asm):00203         SongDAC         Track
A771                  (       ./smps.asm):00204         SongFMStart
A771                  (       ./smps.asm):00205         SongFM1         Track
A79B                  (       ./smps.asm):00206         SongFM2         Track
A7C5                  (       ./smps.asm):00207         SongFM3         Track
A7EF                  (       ./smps.asm):00208         SongFM4         Track
A819                  (       ./smps.asm):00209         SongFM5         Track
A843                  (       ./smps.asm):00210         SongFM6         Track
A86D                  (       ./smps.asm):00211         SongFM7         Track
A897                  (       ./smps.asm):00212         SongFM8         Track
A8C1                  (       ./smps.asm):00213         SongFM9         Track
A8EB                  (       ./smps.asm):00214         SongFMEnd
A8EB                  (       ./smps.asm):00215         SongDACFMEnd
A8EB                  (       ./smps.asm):00216         SongPSGStart
A8EB                  (       ./smps.asm):00217         SongPSG1        Track
A915                  (       ./smps.asm):00218         SongPSG2        Track
A93F                  (       ./smps.asm):00219         SongPSG3        Track
                      (       ./smps.asm):00220         ;SongPSG4        Track
A969                  (       ./smps.asm):00221         SongPSGEnd
A969                  (       ./smps.asm):00222         tracksEnd
                      (       ./smps.asm):00223         
A969                  (       ./smps.asm):00224         tracksSFXStart
A969                  (       ./smps.asm):00225         SFXFMStart
A969                  (       ./smps.asm):00226         SFXFM3          Track
A993                  (       ./smps.asm):00227         SFXFM4          Track
A9BD                  (       ./smps.asm):00228         SFXFM5          Track
A9E7                  (       ./smps.asm):00229         SFXFMEnd
A9E7                  (       ./smps.asm):00230         SFXPSGStart
A9E7                  (       ./smps.asm):00231         SFXPSG1         Track
AA11                  (       ./smps.asm):00232         SFXPSG2         Track
AA3B                  (       ./smps.asm):00233         SFXPSG3         Track
AA65                  (       ./smps.asm):00234         SFXPSGEnd
AA65                  (       ./smps.asm):00235         tracksSFXEnd
AA65                  (       ./smps.asm):00236         StructEnd
                      (       ./smps.asm):00237         
                      (       ./smps.asm):00238                 ; I want struct data to be in binary please ...
                      (       ./smps.asm):00239                 ; VoiceControl is hardcoded
                      (       ./smps.asm):00240                 
                      (       ./smps.asm):00241                 org   StructStart                
A731 0000000000000000 (       ./smps.asm):00242                 fill  0,sizeof{SmpsVar}
     0000000000000000
     000000000000
A747 0006             (       ./smps.asm):00243                 fdb   $0006
A749 0000000000000000 (       ./smps.asm):00244                 fill  0,sizeof{Track}-2
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
A771 0000             (       ./smps.asm):00245                 fdb   $0000
A773 0000000000000000 (       ./smps.asm):00246                 fill  0,sizeof{Track}-2        
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
A79B 0001             (       ./smps.asm):00247                 fdb   $0001
A79D 0000000000000000 (       ./smps.asm):00248                 fill  0,sizeof{Track}-2
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
A7C5 0002             (       ./smps.asm):00249                 fdb   $0002
A7C7 0000000000000000 (       ./smps.asm):00250                 fill  0,sizeof{Track}-2
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
A7EF 0003             (       ./smps.asm):00251                 fdb   $0003
A7F1 0000000000000000 (       ./smps.asm):00252                 fill  0,sizeof{Track}-2
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
A819 0004             (       ./smps.asm):00253                 fdb   $0004
A81B 0000000000000000 (       ./smps.asm):00254                 fill  0,sizeof{Track}-2
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
A843 0005             (       ./smps.asm):00255                 fdb   $0005
A845 0000000000000000 (       ./smps.asm):00256                 fill  0,sizeof{Track}-2
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
A86D 0006             (       ./smps.asm):00257                 fdb   $0006
A86F 0000000000000000 (       ./smps.asm):00258                 fill  0,sizeof{Track}-2
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
A897 0007             (       ./smps.asm):00259                 fdb   $0007
A899 0000000000000000 (       ./smps.asm):00260                 fill  0,sizeof{Track}-2
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
A8C1 0008             (       ./smps.asm):00261                 fdb   $0008
A8C3 0000000000000000 (       ./smps.asm):00262                 fill  0,sizeof{Track}-2
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
A8EB 0080             (       ./smps.asm):00263                 fdb   $0080
A8ED 0000000000000000 (       ./smps.asm):00264                 fill  0,sizeof{Track}-2
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
A915 00A0             (       ./smps.asm):00265                 fdb   $00A0
A917 0000000000000000 (       ./smps.asm):00266                 fill  0,sizeof{Track}-2
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
A93F 00C0             (       ./smps.asm):00267                 fdb   $00C0
A941 0000000000000000 (       ./smps.asm):00268                 fill  0,sizeof{Track}-2
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
                      (       ./smps.asm):00269                 ;fdb   $00E0
                      (       ./smps.asm):00270                 ;fill  0,sizeof{Track}-2
A969 0002             (       ./smps.asm):00271                 fdb   $0002
A96B 0000000000000000 (       ./smps.asm):00272                 fill  0,sizeof{Track}-2
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
A993 0004             (       ./smps.asm):00273                 fdb   $0004
A995 0000000000000000 (       ./smps.asm):00274                 fill  0,sizeof{Track}-2
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
A9BD 0005             (       ./smps.asm):00275                 fdb   $0005
A9BF 0000000000000000 (       ./smps.asm):00276                 fill  0,sizeof{Track}-2
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
A9E7 0080             (       ./smps.asm):00277                 fdb   $0080
A9E9 0000000000000000 (       ./smps.asm):00278                 fill  0,sizeof{Track}-2
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
AA11 00A0             (       ./smps.asm):00279                 fdb   $00A0
AA13 0000000000000000 (       ./smps.asm):00280                 fill  0,sizeof{Track}-2
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
AA3B 00C0             (       ./smps.asm):00281                 fdb   $00C0
AA3D 0000000000000000 (       ./smps.asm):00282                 fill  0,sizeof{Track}-2
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
                      (       ./smps.asm):00283                         
                      (       ./smps.asm):00284         ******************************************************************************
                      (       ./smps.asm):00285         
AA65 00               (       ./smps.asm):00286         PALUpdTick      fcb   0     ; this counts from 0 to 5 to periodically "double update" for PAL systems (basically every 6 frames you need to update twice to keep up)
AA66 00               (       ./smps.asm):00287         DoSFXFlag       fcb   0     ; flag to indicate we're updating SFX (and thus use custom voice table); set to FFh while doing SFX, 0 when not.
AA67 00               (       ./smps.asm):00288         Paused          fcb   0     ; 0 = normal, -1 = pause all sound and music
AA68 00               (       ./smps.asm):00289         SongDelay       fcb   0     ; song header delay
                      (       ./smps.asm):00290         
AA69 00               (       ./smps.asm):00291         MusicPage       fcb   0     ; memory page of music data
AA6A 00               (       ./smps.asm):00292         SoundPage       fcb   0     ; memory page of sound data
AA6B 0000             (       ./smps.asm):00293         MusicData       fdb   0     ; address of song data
AA6D 0000             (       ./smps.asm):00294         SoundData       fdb   0     ; address of sound data
                      (       ./smps.asm):00295         
                      (       ./smps.asm):00296         
     000D             (       ./smps.asm):00297         MUSIC_TRACK_COUNT = (tracksEnd-tracksStart)/sizeof{Track}
     000A             (       ./smps.asm):00298         MUSIC_DAC_FM_TRACK_COUNT = (SongDACFMEnd-SongDACFMStart)/sizeof{Track}
     0009             (       ./smps.asm):00299         MUSIC_FM_TRACK_COUNT = (SongFMEnd-SongFMStart)/sizeof{Track}
     0003             (       ./smps.asm):00300         MUSIC_PSG_TRACK_COUNT = (SongPSGEnd-SongPSGStart)/sizeof{Track}
                      (       ./smps.asm):00301         
     0006             (       ./smps.asm):00302         SFX_TRACK_COUNT = (tracksSFXEnd-tracksSFXStart)/sizeof{Track}
     0003             (       ./smps.asm):00303         SFXFM_TRACK_COUNT = (SFXFMEnd-SFXFMStart)/sizeof{Track}
     0003             (       ./smps.asm):00304         SFXPSG_TRACK_COUNT = (SFXPSGEnd-SFXPSGStart)/sizeof{Track}
                      (       ./smps.asm):00305         
                      (       ./smps.asm):00306         ******************************************************************************
                      (       ./smps.asm):00307         * writes to YM2413 with required waits
                      (       ./smps.asm):00308         ******************************************************************************
                      (       ./smps.asm):00309         
AA6F                  (       ./smps.asm):00310         _WriteYM MACRO
                      (       ./smps.asm):00311                 sta   YM2413_A0
                      (       ./smps.asm):00312                 nop
                      (       ./smps.asm):00313                 nop
                      (       ./smps.asm):00314                 stb   YM2413_D0
                      (       ./smps.asm):00315          ENDM  
                      (       ./smps.asm):00316         
AA6F                  (       ./smps.asm):00317         _YMBusyWait5 MACRO
                      (       ./smps.asm):00318                 nop                                        
                      (       ./smps.asm):00319                 brn   *
                      (       ./smps.asm):00320          ENDM
                      (       ./smps.asm):00321         
AA6F                  (       ./smps.asm):00322         _YMBusyWait9 MACRO
                      (       ./smps.asm):00323                 nop
                      (       ./smps.asm):00324                 nop
                      (       ./smps.asm):00325                 nop
                      (       ./smps.asm):00326                 brn   *
                      (       ./smps.asm):00327          ENDM
                      (       ./smps.asm):00328          
AA6F                  (       ./smps.asm):00329         _YMBusyWait11 MACRO
                      (       ./smps.asm):00330                 nop
                      (       ./smps.asm):00331                 nop
                      (       ./smps.asm):00332                 nop
                      (       ./smps.asm):00333                 nop
                      (       ./smps.asm):00334                 brn   *
                      (       ./smps.asm):00335          ENDM
                      (       ./smps.asm):00336          
AA6F                  (       ./smps.asm):00337         _YMBusyWait19 MACRO
                      (       ./smps.asm):00338                 exg   a,b
                      (       ./smps.asm):00339                 exg   a,b
                      (       ./smps.asm):00340                 brn   *
                      (       ./smps.asm):00341          ENDM
                      (       ./smps.asm):00342         
                      (       ./smps.asm):00343         ******************************************************************************
                      (       ./smps.asm):00344         * Setup YM2413 for Drum Mode
                      (       ./smps.asm):00345         * destroys A, B
                      (       ./smps.asm):00346         ******************************************************************************
                      (       ./smps.asm):00347         
AA6F                  (       ./smps.asm):00348         YM2413_DrumModeOn
AA6F 3416             (       ./smps.asm):00349                 pshs  d,x
AA71 8EAA96           (       ./smps.asm):00350                 ldx   #@data
AA74 EC81             (       ./smps.asm):00351         @a      ldd   ,x++
AA76 2B0D             (       ./smps.asm):00352                 bmi   @end
                      (       ./smps.asm):00353                 _WriteYM
AA78 B7E7FC           (         _WriteYM):00001                 sta   YM2413_A0
AA7B 12               (         _WriteYM):00002                 nop
AA7C 12               (         _WriteYM):00003                 nop
AA7D F7E7FD           (         _WriteYM):00004                 stb   YM2413_D0
                      (       ./smps.asm):00354                 _YMBusyWait5
AA80 12               (     _YMBusyWait5):00001                 nop                                        
AA81 21FE             (     _YMBusyWait5):00002                 brn   *
AA83 20EF             (       ./smps.asm):00355                 bra   @a
AA85 8605             (       ./smps.asm):00356         @end    lda   #$05                     ; saves values for FMSilenceAll routine
AA87 B7A86F           (       ./smps.asm):00357                 sta   SongFM7.NoteControl 
AA8A 8605             (       ./smps.asm):00358                 lda   #$05
AA8C B7A899           (       ./smps.asm):00359                 sta   SongFM8.NoteControl
AA8F 8601             (       ./smps.asm):00360                 lda   #$01
AA91 B7A8C3           (       ./smps.asm):00361                 sta   SongFM9.NoteControl                
AA94 3596             (       ./smps.asm):00362                 puls  d,x,pc       
AA96                  (       ./smps.asm):00363         @data
AA96 0E20             (       ./smps.asm):00364                 fdb   $0E20
AA98 1620             (       ./smps.asm):00365                 fdb   $1620
AA9A 1750             (       ./smps.asm):00366                 fdb   $1750 ; recommended setting is $1750 and $2705 for snare but $1700 and $2700 gives better SD sound (noise), affects HH that will sound more like a cowbell 
AA9C 18C0             (       ./smps.asm):00367                 fdb   $18C0
AA9E 2605             (       ./smps.asm):00368                 fdb   $2605 ; (dependency) if modified, change hardcoded value at DrumModeOn end label
AAA0 2705             (       ./smps.asm):00369                 fdb   $2705 ; (dependency) if modified, change hardcoded value at DrumModeOn end label
AAA2 2801             (       ./smps.asm):00370                 fdb   $2801 ; (dependency) if modified, change hardcoded value at DrumModeOn end label
AAA4 36F2             (       ./smps.asm):00371                 fdb   $36F2 ; drum at max vol        
AAA6 3762             (       ./smps.asm):00372                 fdb   $3762 ; drum at max vol
AAA8 3844             (       ./smps.asm):00373                 fdb   $3844 ; drum at max vol
AAAA FF               (       ./smps.asm):00374                 fcb   $FF
                      (       ./smps.asm):00375                 
                      (       ./smps.asm):00376         ******************************************************************************
                      (       ./smps.asm):00377         * InitMusicPlayback
                      (       ./smps.asm):00378         * 
                      (       ./smps.asm):00379         ******************************************************************************
                      (       ./smps.asm):00380         
AAAB                  (       ./smps.asm):00381         InitMusicPlayback
AAAB BDAB1E           (       ./smps.asm):00382                 jsr   FMSilenceAll
AAAE BDAB47           (       ./smps.asm):00383                 jsr   PSGSilenceAll
                      (       ./smps.asm):00384         
AAB1 CEA79B           (       ./smps.asm):00385                 ldu   #SongFM1+sizeof{Track}
AAB4 BDB697           (       ./smps.asm):00386                 jsr   ClearTrack
AAB7 CEA7C5           (       ./smps.asm):00387                 ldu   #SongFM2+sizeof{Track}
AABA BDB697           (       ./smps.asm):00388                 jsr   ClearTrack  
AABD CEA7EF           (       ./smps.asm):00389                 ldu   #SongFM3+sizeof{Track}
AAC0 BDB697           (       ./smps.asm):00390                 jsr   ClearTrack  
AAC3 CEA819           (       ./smps.asm):00391                 ldu   #SongFM4+sizeof{Track}
AAC6 BDB697           (       ./smps.asm):00392                 jsr   ClearTrack  
AAC9 CEA843           (       ./smps.asm):00393                 ldu   #SongFM5+sizeof{Track}
AACC BDB697           (       ./smps.asm):00394                 jsr   ClearTrack  
AACF CEA86D           (       ./smps.asm):00395                 ldu   #SongFM6+sizeof{Track}
AAD2 BDB697           (       ./smps.asm):00396                 jsr   ClearTrack  
AAD5 CEA897           (       ./smps.asm):00397                 ldu   #SongFM7+sizeof{Track}
AAD8 BDB697           (       ./smps.asm):00398                 jsr   ClearTrack  
AADB CEA8C1           (       ./smps.asm):00399                 ldu   #SongFM8+sizeof{Track}
AADE BDB697           (       ./smps.asm):00400                 jsr   ClearTrack          
AAE1 CEA8EB           (       ./smps.asm):00401                 ldu   #SongFM9+sizeof{Track}
AAE4 BDB697           (       ./smps.asm):00402                 jsr   ClearTrack  
                      (       ./smps.asm):00403         
AAE7 CEA915           (       ./smps.asm):00404                 ldu   #SongPSG1+sizeof{Track}
AAEA BDB697           (       ./smps.asm):00405                 jsr   ClearTrack 
AAED CEA93F           (       ./smps.asm):00406                 ldu   #SongPSG2+sizeof{Track}
AAF0 BDB697           (       ./smps.asm):00407                 jsr   ClearTrack 
AAF3 CEA969           (       ./smps.asm):00408                 ldu   #SongPSG3+sizeof{Track}
AAF6 BDB697           (       ./smps.asm):00409                 jsr   ClearTrack 
                      (       ./smps.asm):00410         
AAF9 CEA993           (       ./smps.asm):00411                 ldu   #SFXFM3+sizeof{Track}
AAFC BDB697           (       ./smps.asm):00412                 jsr   ClearTrack 
AAFF CEA9BD           (       ./smps.asm):00413                 ldu   #SFXFM4+sizeof{Track}
AB02 BDB697           (       ./smps.asm):00414                 jsr   ClearTrack 
AB05 CEA9E7           (       ./smps.asm):00415                 ldu   #SFXFM5+sizeof{Track}
AB08 BDB697           (       ./smps.asm):00416                 jsr   ClearTrack 
                      (       ./smps.asm):00417         
AB0B CEAA11           (       ./smps.asm):00418                 ldu   #SFXPSG1+sizeof{Track}
AB0E BDB697           (       ./smps.asm):00419                 jsr   ClearTrack 
AB11 CEAA3B           (       ./smps.asm):00420                 ldu   #SFXPSG2+sizeof{Track}
AB14 BDB697           (       ./smps.asm):00421                 jsr   ClearTrack 
AB17 CEAA65           (       ./smps.asm):00422                 ldu   #SFXPSG3+sizeof{Track}
AB1A BDB697           (       ./smps.asm):00423                 jsr   ClearTrack 
AB1D 39               (       ./smps.asm):00424                 rts
                      (       ./smps.asm):00425         
                      (       ./smps.asm):00426         ******************************************************************************
                      (       ./smps.asm):00427         * FMSilenceAll
                      (       ./smps.asm):00428         * destroys A, B, Y
                      (       ./smps.asm):00429         ******************************************************************************
                      (       ./smps.asm):00430         
AB1E                  (       ./smps.asm):00431         FMSilenceAll
AB1E CC200E           (       ./smps.asm):00432                 ldd   #$200E
AB21 F7E7FC           (       ./smps.asm):00433                 stb   YM2413_A0
AB24 108EA773         (       ./smps.asm):00434                 ldy   #SongFM1.NoteControl
AB28 B7E7FD           (       ./smps.asm):00435                 sta   YM2413_D0                ; note off for all drums     
                      (       ./smps.asm):00436                 _YMBusyWait5
AB2B 12               (     _YMBusyWait5):00001                 nop                                        
AB2C 21FE             (     _YMBusyWait5):00002                 brn   *
                      (       ./smps.asm):00437                 _YMBusyWait5        
AB2E 12               (     _YMBusyWait5):00001                 nop                                        
AB2F 21FE             (     _YMBusyWait5):00002                 brn   *
                      (       ./smps.asm):00438                         
AB31                  (       ./smps.asm):00439         @a      _YMBusyWait5                   ; total wait btw two notes : 20 cycles
AB31 12               (     _YMBusyWait5):00001                 nop                                        
AB32 21FE             (     _YMBusyWait5):00002                 brn   *
AB34 E6A4             (       ./smps.asm):00440                 ldb   ,y                       ; (wait of 4 cycles)
AB36 B7E7FC           (       ./smps.asm):00441                 sta   YM2413_A0
AB39 C4EF             (       ./smps.asm):00442                 andb  #$EF                     ; note off for each track
AB3B 4C               (       ./smps.asm):00443                 inca
AB3C F7E7FD           (       ./smps.asm):00444                 stb   YM2413_D0
AB3F 31A82A           (       ./smps.asm):00445                 leay  sizeof{Track},y          ; (wait of 5 cycles)        
AB42 8129             (       ./smps.asm):00446                 cmpa  #$29                     ; (wait of 2 cycles)
AB44 26EB             (       ./smps.asm):00447                 bne   @a                       ; (wait of 3 cycles)
AB46 39               (       ./smps.asm):00448                 rts
                      (       ./smps.asm):00449         
                      (       ./smps.asm):00450         ******************************************************************************
                      (       ./smps.asm):00451         * PSGSilenceAll
                      (       ./smps.asm):00452         * destroys A
                      (       ./smps.asm):00453         ******************************************************************************
                      (       ./smps.asm):00454                 
AB47                  (       ./smps.asm):00455         PSGSilenceAll
AB47 869F             (       ./smps.asm):00456                 lda   #$9F
AB49 B7E7FE           (       ./smps.asm):00457                 sta   PSG
AB4C 86BF             (       ./smps.asm):00458                 lda   #$BF
AB4E B7E7FE           (       ./smps.asm):00459                 sta   PSG       
AB51 86DF             (       ./smps.asm):00460                 lda   #$DF
AB53 B7E7FE           (       ./smps.asm):00461                 sta   PSG
AB56 86FF             (       ./smps.asm):00462                 lda   #$FF
AB58 B7E7FE           (       ./smps.asm):00463                 sta   PSG                               
AB5B 39               (       ./smps.asm):00464                 rts        
                      (       ./smps.asm):00465         
                      (       ./smps.asm):00466         ******************************************************************************
                      (       ./smps.asm):00467         * PlayMusic - Load a new music and init all tracks
                      (       ./smps.asm):00468         *
                      (       ./smps.asm):00469         * receives in X the address of the song
                      (       ./smps.asm):00470         * destroys X
                      (       ./smps.asm):00471         ******************************************************************************
                      (       ./smps.asm):00472         
AB5C                  (       ./smps.asm):00473         PlayMusic
AB5C                  (       ./smps.asm):00474         BGMLoad
AB5C 3466             (       ./smps.asm):00475                 pshs  d,y,u
                      (       ./smps.asm):00476                 ;_GetCartPageA
                      (       ./smps.asm):00477                 ;sta   BGMLoad_end+1            ; backup data page
                      (       ./smps.asm):00478                         
                      (       ./smps.asm):00479                 ;lda   ,x                       ; get memory page that contains track data
                      (       ./smps.asm):00480                 ;sta   MusicPage
                      (       ./smps.asm):00481                 ;ldx   1,x                      ; get ptr to track data
AB5E BFAA6B           (       ./smps.asm):00482                 stx   MusicData
                      (       ./smps.asm):00483                 ;_SetCartPageA
                      (       ./smps.asm):00484         
AB61 BDAAAB           (       ./smps.asm):00485                 jsr   InitMusicPlayback
AB64 EC84             (       ./smps.asm):00486                 ldd   SMPS_VOICE,x
AB66 F3AA6B           (       ./smps.asm):00487                 addd  MusicData   
AB69 FDA73A           (       ./smps.asm):00488                 std   Smps.VoiceTblPtr
                      (       ./smps.asm):00489                 
AB6C EC04             (       ./smps.asm):00490                 ldd   SMPS_TEMPO_DELAY,x
AB6E B7AA68           (       ./smps.asm):00491                 sta   SongDelay
AB71 F7A742           (       ./smps.asm):00492                 stb   Smps.TempoMod
AB74 F7A733           (       ./smps.asm):00493                 stb   Smps.CurrentTempo
AB77 F7A732           (       ./smps.asm):00494                 stb   Smps.TempoTimeout
                      (       ./smps.asm):00495                 
AB7A 8605             (       ./smps.asm):00496                 lda   #$05
AB7C B7AA65           (       ./smps.asm):00497                 sta   PALUpdTick
                      (       ./smps.asm):00498                 
AB7F A602             (       ./smps.asm):00499                 lda   SMPS_NB_FM,x
AB81 B7AB95           (       ./smps.asm):00500                 sta   @fm+1
AB84 3306             (       ./smps.asm):00501                 leau  SMPS_TRK_HEADER,x
AB86 EC08             (       ./smps.asm):00502                 ldd   SMPS_DAC_FLAG,x
AB88 260A             (       ./smps.asm):00503                 bne   @fm                      ; no DRUM track found (should be $0000 to be DRUM)
AB8A 108EA747         (       ./smps.asm):00504                 ldy   #SongDAC
AB8E BDABBF           (       ./smps.asm):00505                 jsr   InitTrackFM              ; DRUM mode use channel 6-8
AB91 7AAB95           (       ./smps.asm):00506                 dec   @fm+1                    ; DAC track is part of FM nb channel count
AB94                  (       ./smps.asm):00507         @fm      
AB94 8600             (       ./smps.asm):00508                 lda   #$00                     ; (dynamic) nb of FM tracks to init
AB96 108EA771         (       ./smps.asm):00509                 ldy   #SongFM1                 ; Init all FM tracks
AB9A 7AAB95           (       ./smps.asm):00510         @fmlp   dec   @fm+1
AB9D 2B05             (       ./smps.asm):00511                 bmi   @psg     
AB9F BDABBF           (       ./smps.asm):00512                 jsr   InitTrackFM
ABA2 20F6             (       ./smps.asm):00513                 bra   @fmlp
ABA4                  (       ./smps.asm):00514         @psg    
ABA4 86C0             (       ./smps.asm):00515                 lda   #$C0                     ; set back Tone channel for PSG3 (can be switched to noise by cfSetPSGNoise)
ABA6 B7A940           (       ./smps.asm):00516                 sta   SongPSG3.VoiceControl
ABA9 A603             (       ./smps.asm):00517                 lda   SMPS_NB_PSG,x
ABAB B7ABBC           (       ./smps.asm):00518                 sta   @var                     ; nb of PSG tracks to init
ABAE 108EA8EB         (       ./smps.asm):00519                 ldy   #SongPSG1                ; Init all PSG tracks
ABB2 7AABBC           (       ./smps.asm):00520         @psglp  dec   @var
ABB5 2B06             (       ./smps.asm):00521                 bmi   BGMLoad_end     
ABB7 BDABE0           (       ./smps.asm):00522                 jsr   InitTrackPSG
ABBA 20F6             (       ./smps.asm):00523                 bra   @psglp
ABBC 00               (       ./smps.asm):00524         @var    fcb   0
                      (       ./smps.asm):00525         
ABBD                  (       ./smps.asm):00526         BGMLoad_end
                      (       ./smps.asm):00527                 ;lda   #0                       ; (dynamic) set back data page
                      (       ./smps.asm):00528                 ;_SetCartPageA
ABBD 35E6             (       ./smps.asm):00529                 puls  d,y,u,pc
                      (       ./smps.asm):00530         
ABBF                  (       ./smps.asm):00531         InitTrackFM
ABBF B6AA68           (       ./smps.asm):00532                 lda   SongDelay        
ABC2 A723             (       ./smps.asm):00533                 sta   TempoDivider,y
ABC4 CC8201           (       ./smps.asm):00534                 ldd   #$8201
ABC7 A7A4             (       ./smps.asm):00535                 sta   PlaybackControl,y
ABC9 E72B             (       ./smps.asm):00536                 stb   DurationTimeout,y
ABCB C62A             (       ./smps.asm):00537                 ldb   #GoSubStack
ABCD E72A             (       ./smps.asm):00538                 stb   StackPointer,y
ABCF ECC4             (       ./smps.asm):00539                 ldd   SMPS_TRK_DATA_PTR,u
ABD1 F3AA6B           (       ./smps.asm):00540                 addd  MusicData
ABD4 ED24             (       ./smps.asm):00541                 std   DataPointer,y
ABD6 EC42             (       ./smps.asm):00542                 ldd   SMPS_TRK_TR_VOL_PTR,u
ABD8 ED26             (       ./smps.asm):00543                 std   TranspAndVolume,y
ABDA 3344             (       ./smps.asm):00544                 leau  SMPS_TRK_FM_HDR_LEN,u
ABDC 31A82A           (       ./smps.asm):00545                 leay  sizeof{Track},y
ABDF 39               (       ./smps.asm):00546                 rts       
                      (       ./smps.asm):00547          
ABE0                  (       ./smps.asm):00548         InitTrackPSG
ABE0 B6AA68           (       ./smps.asm):00549                 lda   SongDelay        
ABE3 A723             (       ./smps.asm):00550                 sta   TempoDivider,y
ABE5 CC8201           (       ./smps.asm):00551                 ldd   #$8201
ABE8 A7A4             (       ./smps.asm):00552                 sta   PlaybackControl,y
ABEA E72B             (       ./smps.asm):00553                 stb   DurationTimeout,y
ABEC C62A             (       ./smps.asm):00554                 ldb   #GoSubStack
ABEE E72A             (       ./smps.asm):00555                 stb   StackPointer,y        
ABF0 ECC4             (       ./smps.asm):00556                 ldd   SMPS_TRK_DATA_PTR,u
ABF2 F3AA6B           (       ./smps.asm):00557                 addd  MusicData
ABF5 ED24             (       ./smps.asm):00558                 std   DataPointer,y
ABF7 EC42             (       ./smps.asm):00559                 ldd   SMPS_TRK_TR_VOL_PTR,u
ABF9 ED26             (       ./smps.asm):00560                 std   TranspAndVolume,y
ABFB A645             (       ./smps.asm):00561                 lda   SMPS_TRK_ENV_PTR,u
ABFD A728             (       ./smps.asm):00562                 sta   VoiceIndex,y
ABFF 3346             (       ./smps.asm):00563                 leau  SMPS_TRK_PSG_HDR_LEN,u
AC01 31A82A           (       ./smps.asm):00564                 leay  sizeof{Track},y
AC04 39               (       ./smps.asm):00565                 rts        
                      (       ./smps.asm):00566                 
                      (       ./smps.asm):00567         ******************************************************************************
                      (       ./smps.asm):00568         * MusicFrame - processes a music frame (VInt)
                      (       ./smps.asm):00569         *
                      (       ./smps.asm):00570         * SMPS Song Data
                      (       ./smps.asm):00571         * --------------
                      (       ./smps.asm):00572         * value in range [$00, $7F] : Duration value
                      (       ./smps.asm):00573         * value in range [$80]      : Rest (counts as a note value)
                      (       ./smps.asm):00574         * value in range [$81, $DF] : Note value
                      (       ./smps.asm):00575         * value in range [$E0, $FF] : Coordination flag
                      (       ./smps.asm):00576         *
                      (       ./smps.asm):00577         * destroys A,B,X,Y
                      (       ./smps.asm):00578         ******************************************************************************
                      (       ./smps.asm):00579         
AC05                  (       ./smps.asm):00580         _UpdateTrack MACRO
                      (       ./smps.asm):00581                 lda   \1.PlaybackControl       ; Is bit 7 (80h) set on playback control byte? (means "is playing")
                      (       ./smps.asm):00582                 bpl   a@
                      (       ./smps.asm):00583                 ldy   #\1                               
                      (       ./smps.asm):00584                 jsr   \2                       ; If so, UpdateTrack
AC05                  (       ./smps.asm):00585         a@      equ   *        
                      (       ./smps.asm):00586          ENDM
                      (       ./smps.asm):00587                 
AC05                  (       ./smps.asm):00588         MusicFrame 
                      (       ./smps.asm):00589                 
                      (       ./smps.asm):00590                 ; simple sound fx implementation with no priority
                      (       ./smps.asm):00591                 ; TODO upgrade to a queue system like original code
AC05 BEA738           (       ./smps.asm):00592                 ldx   Smps.SFXToPlay           ; get last requested sound effect to play
AC08 2709             (       ./smps.asm):00593                 beq   @a                       ; 0 means no sound effect to play
AC0A BDB3BE           (       ./smps.asm):00594                 jsr   PlaySound
AC0D CC0000           (       ./smps.asm):00595                 ldd   #0                       ; reset to be able to play another effect from now
AC10 FDA738           (       ./smps.asm):00596                 std   Smps.SFXToPlay
AC13                  (       ./smps.asm):00597         @a       
AC13 BEAA6B           (       ./smps.asm):00598                 ldx   MusicData                
AC16 10270092         (       ./smps.asm):00599                 lbeq  UpdateSound              ; no music to play
                      (       ./smps.asm):00600                 ;_SetCartPageA
AC1A 7FAA66           (       ./smps.asm):00601                 clr   DoSFXFlag
                      (       ./smps.asm):00602         
AC1D                  (       ./smps.asm):00603         UpdateEverything        
AC1D B6A746           (       ./smps.asm):00604                 lda   Smps.60HzData            ; TODO use SMPS relocate to convert timings
AC20 270D             (       ./smps.asm):00605                 beq   @a                       ; to play 60hz songs at 50hz at normal speed
AC22 7AAA65           (       ./smps.asm):00606                 dec   PALUpdTick               ; this will allow to throw away this code
AC25 2608             (       ./smps.asm):00607                 bne   @a
AC27 8605             (       ./smps.asm):00608                 lda   #5
AC29 B7AA65           (       ./smps.asm):00609                 sta   PALUpdTick
AC2C BDAC34           (       ./smps.asm):00610                 jsr   UpdateMusic              ; play 2 frames in one to keep original speed
AC2F BDAC34           (       ./smps.asm):00611         @a      jsr   UpdateMusic              ; play 2 frames in one to keep original speed
AC32 2078             (       ./smps.asm):00612                 bra   UpdateSound
                      (       ./smps.asm):00613         
AC34                  (       ./smps.asm):00614         UpdateMusic
                      (       ./smps.asm):00615                 * jsr   TempoWait              ; optim : do not call TempoWait, instead skip update
AC34 B6A733           (       ./smps.asm):00616                 lda   Smps.CurrentTempo        ; tempo value
AC37 BBA732           (       ./smps.asm):00617                 adda  Smps.TempoTimeout        ; Adds previous value to
AC3A B7A732           (       ./smps.asm):00618                 sta   Smps.TempoTimeout        ; Store this as new
AC3D 246C             (       ./smps.asm):00619                 bcc   @rts                     ; skip update if tempo need more waits
                      (       ./smps.asm):00620                 _UpdateTrack SongDAC,DACUpdateTrack
AC3F B6A747           (     _UpdateTrack):00001                 lda   SongDAC.PlaybackControl       ; Is bit 7 (80h) set on playback control byte? (means "is playing")
AC42 2A07             (     _UpdateTrack):00002                 bpl   a@
AC44 108EA747         (     _UpdateTrack):00003                 ldy   #SongDAC                               
AC48 BDAD00           (     _UpdateTrack):00004                 jsr   DACUpdateTrack                       ; If so, UpdateTrack
     AC4B             (     _UpdateTrack):00005         a@      equ   *        
                      (       ./smps.asm):00621                 _UpdateTrack SongFM1,FMUpdateTrack
AC4B B6A771           (     _UpdateTrack):00001                 lda   SongFM1.PlaybackControl       ; Is bit 7 (80h) set on playback control byte? (means "is playing")
AC4E 2A07             (     _UpdateTrack):00002                 bpl   a@
AC50 108EA771         (     _UpdateTrack):00003                 ldy   #SongFM1                               
AC54 BDAD5F           (     _UpdateTrack):00004                 jsr   FMUpdateTrack                       ; If so, UpdateTrack
     AC57             (     _UpdateTrack):00005         a@      equ   *        
                      (       ./smps.asm):00622                 _UpdateTrack SongFM2,FMUpdateTrack
AC57 B6A79B           (     _UpdateTrack):00001                 lda   SongFM2.PlaybackControl       ; Is bit 7 (80h) set on playback control byte? (means "is playing")
AC5A 2A07             (     _UpdateTrack):00002                 bpl   a@
AC5C 108EA79B         (     _UpdateTrack):00003                 ldy   #SongFM2                               
AC60 BDAD5F           (     _UpdateTrack):00004                 jsr   FMUpdateTrack                       ; If so, UpdateTrack
     AC63             (     _UpdateTrack):00005         a@      equ   *        
                      (       ./smps.asm):00623                 _UpdateTrack SongFM3,FMUpdateTrack
AC63 B6A7C5           (     _UpdateTrack):00001                 lda   SongFM3.PlaybackControl       ; Is bit 7 (80h) set on playback control byte? (means "is playing")
AC66 2A07             (     _UpdateTrack):00002                 bpl   a@
AC68 108EA7C5         (     _UpdateTrack):00003                 ldy   #SongFM3                               
AC6C BDAD5F           (     _UpdateTrack):00004                 jsr   FMUpdateTrack                       ; If so, UpdateTrack
     AC6F             (     _UpdateTrack):00005         a@      equ   *        
                      (       ./smps.asm):00624                 _UpdateTrack SongFM4,FMUpdateTrack
AC6F B6A7EF           (     _UpdateTrack):00001                 lda   SongFM4.PlaybackControl       ; Is bit 7 (80h) set on playback control byte? (means "is playing")
AC72 2A07             (     _UpdateTrack):00002                 bpl   a@
AC74 108EA7EF         (     _UpdateTrack):00003                 ldy   #SongFM4                               
AC78 BDAD5F           (     _UpdateTrack):00004                 jsr   FMUpdateTrack                       ; If so, UpdateTrack
     AC7B             (     _UpdateTrack):00005         a@      equ   *        
                      (       ./smps.asm):00625                 _UpdateTrack SongFM5,FMUpdateTrack
AC7B B6A819           (     _UpdateTrack):00001                 lda   SongFM5.PlaybackControl       ; Is bit 7 (80h) set on playback control byte? (means "is playing")
AC7E 2A07             (     _UpdateTrack):00002                 bpl   a@
AC80 108EA819         (     _UpdateTrack):00003                 ldy   #SongFM5                               
AC84 BDAD5F           (     _UpdateTrack):00004                 jsr   FMUpdateTrack                       ; If so, UpdateTrack
     AC87             (     _UpdateTrack):00005         a@      equ   *        
                      (       ./smps.asm):00626                 ;_UpdateTrack SongFM6,FMUpdateTrack      ; uncomment to use this channel
                      (       ./smps.asm):00627                 ;_UpdateTrack SongFM7,FMUpdateTrack      ; uncomment to use tone channel instead of drum kit
                      (       ./smps.asm):00628                 ;_UpdateTrack SongFM8,FMUpdateTrack      ; uncomment to use tone channel instead of drum kit
                      (       ./smps.asm):00629                 ;_UpdateTrack SongFM9,FMUpdateTrack      ; uncomment to use tone channel instead of drum kit        
                      (       ./smps.asm):00630                 ;_UpdateTrack SongPSG4,PSGUpdateTrack    ; uncomment to use noise channel as an independent channel from tone 3
                      (       ./smps.asm):00631                 _UpdateTrack SongPSG1,PSGUpdateTrack
AC87 B6A8EB           (     _UpdateTrack):00001                 lda   SongPSG1.PlaybackControl       ; Is bit 7 (80h) set on playback control byte? (means "is playing")
AC8A 2A07             (     _UpdateTrack):00002                 bpl   a@
AC8C 108EA8EB         (     _UpdateTrack):00003                 ldy   #SongPSG1                               
AC90 BDAFD9           (     _UpdateTrack):00004                 jsr   PSGUpdateTrack                       ; If so, UpdateTrack
     AC93             (     _UpdateTrack):00005         a@      equ   *        
                      (       ./smps.asm):00632                 _UpdateTrack SongPSG2,PSGUpdateTrack        
AC93 B6A915           (     _UpdateTrack):00001                 lda   SongPSG2.PlaybackControl       ; Is bit 7 (80h) set on playback control byte? (means "is playing")
AC96 2A07             (     _UpdateTrack):00002                 bpl   a@
AC98 108EA915         (     _UpdateTrack):00003                 ldy   #SongPSG2                               
AC9C BDAFD9           (     _UpdateTrack):00004                 jsr   PSGUpdateTrack                       ; If so, UpdateTrack
     AC9F             (     _UpdateTrack):00005         a@      equ   *        
                      (       ./smps.asm):00633                 _UpdateTrack SongPSG3,PSGUpdateTrack
AC9F B6A93F           (     _UpdateTrack):00001                 lda   SongPSG3.PlaybackControl       ; Is bit 7 (80h) set on playback control byte? (means "is playing")
ACA2 2A07             (     _UpdateTrack):00002                 bpl   a@
ACA4 108EA93F         (     _UpdateTrack):00003                 ldy   #SongPSG3                               
ACA8 BDAFD9           (     _UpdateTrack):00004                 jsr   PSGUpdateTrack                       ; If so, UpdateTrack
     ACAB             (     _UpdateTrack):00005         a@      equ   *        
ACAB 39               (       ./smps.asm):00634         @rts    rts
                      (       ./smps.asm):00635         
ACAC                  (       ./smps.asm):00636         UpdateSound        
ACAC BEAA6D           (       ./smps.asm):00637                 ldx   SoundData
ACAF 2601             (       ./smps.asm):00638                 bne   @a
ACB1 39               (       ./smps.asm):00639                 rts
ACB2                  (       ./smps.asm):00640         @a      ;_SetCartPageA
ACB2 8680             (       ./smps.asm):00641                 lda   #$80
ACB4 B7AA66           (       ./smps.asm):00642                 sta   DoSFXFlag                ; Set zDoSFXFlag = 80h (updating sound effects)
                      (       ./smps.asm):00643                 _UpdateTrack SFXFM3,FMUpdateTrack
ACB7 B6A969           (     _UpdateTrack):00001                 lda   SFXFM3.PlaybackControl       ; Is bit 7 (80h) set on playback control byte? (means "is playing")
ACBA 2A07             (     _UpdateTrack):00002                 bpl   a@
ACBC 108EA969         (     _UpdateTrack):00003                 ldy   #SFXFM3                               
ACC0 BDAD5F           (     _UpdateTrack):00004                 jsr   FMUpdateTrack                       ; If so, UpdateTrack
     ACC3             (     _UpdateTrack):00005         a@      equ   *        
                      (       ./smps.asm):00644                 _UpdateTrack SFXFM4,FMUpdateTrack
ACC3 B6A993           (     _UpdateTrack):00001                 lda   SFXFM4.PlaybackControl       ; Is bit 7 (80h) set on playback control byte? (means "is playing")
ACC6 2A07             (     _UpdateTrack):00002                 bpl   a@
ACC8 108EA993         (     _UpdateTrack):00003                 ldy   #SFXFM4                               
ACCC BDAD5F           (     _UpdateTrack):00004                 jsr   FMUpdateTrack                       ; If so, UpdateTrack
     ACCF             (     _UpdateTrack):00005         a@      equ   *        
                      (       ./smps.asm):00645                 _UpdateTrack SFXFM5,FMUpdateTrack
ACCF B6A9BD           (     _UpdateTrack):00001                 lda   SFXFM5.PlaybackControl       ; Is bit 7 (80h) set on playback control byte? (means "is playing")
ACD2 2A07             (     _UpdateTrack):00002                 bpl   a@
ACD4 108EA9BD         (     _UpdateTrack):00003                 ldy   #SFXFM5                               
ACD8 BDAD5F           (     _UpdateTrack):00004                 jsr   FMUpdateTrack                       ; If so, UpdateTrack
     ACDB             (     _UpdateTrack):00005         a@      equ   *        
                      (       ./smps.asm):00646                 _UpdateTrack SFXPSG1,PSGUpdateTrack
ACDB B6A9E7           (     _UpdateTrack):00001                 lda   SFXPSG1.PlaybackControl       ; Is bit 7 (80h) set on playback control byte? (means "is playing")
ACDE 2A07             (     _UpdateTrack):00002                 bpl   a@
ACE0 108EA9E7         (     _UpdateTrack):00003                 ldy   #SFXPSG1                               
ACE4 BDAFD9           (     _UpdateTrack):00004                 jsr   PSGUpdateTrack                       ; If so, UpdateTrack
     ACE7             (     _UpdateTrack):00005         a@      equ   *        
                      (       ./smps.asm):00647                 _UpdateTrack SFXPSG2,PSGUpdateTrack        
ACE7 B6AA11           (     _UpdateTrack):00001                 lda   SFXPSG2.PlaybackControl       ; Is bit 7 (80h) set on playback control byte? (means "is playing")
ACEA 2A07             (     _UpdateTrack):00002                 bpl   a@
ACEC 108EAA11         (     _UpdateTrack):00003                 ldy   #SFXPSG2                               
ACF0 BDAFD9           (     _UpdateTrack):00004                 jsr   PSGUpdateTrack                       ; If so, UpdateTrack
     ACF3             (     _UpdateTrack):00005         a@      equ   *        
                      (       ./smps.asm):00648                 _UpdateTrack SFXPSG3,PSGUpdateTrack
ACF3 B6AA3B           (     _UpdateTrack):00001                 lda   SFXPSG3.PlaybackControl       ; Is bit 7 (80h) set on playback control byte? (means "is playing")
ACF6 2A07             (     _UpdateTrack):00002                 bpl   a@
ACF8 108EAA3B         (     _UpdateTrack):00003                 ldy   #SFXPSG3                               
ACFC BDAFD9           (     _UpdateTrack):00004                 jsr   PSGUpdateTrack                       ; If so, UpdateTrack
     ACFF             (     _UpdateTrack):00005         a@      equ   *        
ACFF 39               (       ./smps.asm):00649         @rts    rts
                      (       ./smps.asm):00650         
                      (       ./smps.asm):00651         * * ************************************************************************************
                      (       ./smps.asm):00652         * * 
                      (       ./smps.asm):00653         * TempoWait
                      (       ./smps.asm):00654         *         ; Tempo works as divisions of the 60Hz clock (there is a fix supplied for
                      (       ./smps.asm):00655         *         ; PAL that "kind of" keeps it on track.)  Every time the internal music clock
                      (       ./smps.asm):00656         *         ; overflows, it will update.  So a tempo of 80h will update every other
                      (       ./smps.asm):00657         *         ; frame, or 30 times a second.
                      (       ./smps.asm):00658         
                      (       ./smps.asm):00659         *         lda   Smps.CurrentTempo  ; tempo value
                      (       ./smps.asm):00660         *         adda  Smps.TempoTimeout  ; Adds previous value to
                      (       ./smps.asm):00661         *         sta   Smps.TempoTimeout  ; Store this as new
                      (       ./smps.asm):00662         *         bcc   @a
                      (       ./smps.asm):00663         *         rts                     ; If addition overflowed (answer greater than FFh), return
                      (       ./smps.asm):00664         * @a
                      (       ./smps.asm):00665         *         ; So if adding tempo value did NOT overflow, then we add 1 to all durations
                      (       ./smps.asm):00666         *         inc   SongDAC.DurationTimeout
                      (       ./smps.asm):00667         *         inc   SongFM1.DurationTimeout
                      (       ./smps.asm):00668         *         inc   SongFM2.DurationTimeout
                      (       ./smps.asm):00669         *         inc   SongFM3.DurationTimeout
                      (       ./smps.asm):00670         *         inc   SongFM4.DurationTimeout
                      (       ./smps.asm):00671         *         inc   SongFM5.DurationTimeout
                      (       ./smps.asm):00672         *         ;inc   SongFM6.DurationTimeout
                      (       ./smps.asm):00673         *         ;inc   SongFM7.DurationTimeout
                      (       ./smps.asm):00674         *         ;inc   SongFM8.DurationTimeout                
                      (       ./smps.asm):00675         *         ;inc   SongFM9.DurationTimeout                        
                      (       ./smps.asm):00676         *         ;inc   SongPSG4.DurationTimeout
                      (       ./smps.asm):00677         *         inc   SongPSG1.DurationTimeout
                      (       ./smps.asm):00678         *         inc   SongPSG2.DurationTimeout
                      (       ./smps.asm):00679         *         inc   SongPSG3.DurationTimeout
                      (       ./smps.asm):00680         *         rts
                      (       ./smps.asm):00681         
                      (       ./smps.asm):00682         ******************************************************************************
                      (       ./smps.asm):00683         * DACUpdateTrack
                      (       ./smps.asm):00684         * input Y (ptr to SONGDAC, is used by CoordFlag)
                      (       ./smps.asm):00685         * destroys A,B,X
                      (       ./smps.asm):00686         ******************************************************************************
                      (       ./smps.asm):00687         
AD00                  (       ./smps.asm):00688         DACUpdateTrack        
AD00 7AA752           (       ./smps.asm):00689                 dec   SongDAC.DurationTimeout
AD03 2701             (       ./smps.asm):00690                 beq   @a
AD05 39               (       ./smps.asm):00691                 rts
AD06                  (       ./smps.asm):00692         @a
AD06 CC0E20           (       ./smps.asm):00693                 ldd   #$0E20                   ; note has ended, so note off
AD09 97FC             (       ./smps.asm):00694                 sta   <YM2413_A0
AD0B BEA74B           (       ./smps.asm):00695                 ldx   SongDAC.DataPointer
AD0E D7FD             (       ./smps.asm):00696                 stb   <YM2413_D0        
                      (       ./smps.asm):00697                          
AD10 E680             (       ./smps.asm):00698         @b      ldb   ,x+                      ; read DAC song data
AD12 C1E0             (       ./smps.asm):00699                 cmpb  #$E0
AD14 2505             (       ./smps.asm):00700                 blo   @a                       ; test for >= E0h, which is a coordination flag
AD16 BDB469           (       ./smps.asm):00701                 jsr   CoordFlag
AD19 20F5             (       ./smps.asm):00702                 bra   @b                       ; read all consecutive coordination flags 
AD1B                  (       ./smps.asm):00703         @a        
AD1B 2A0E             (       ./smps.asm):00704                 bpl   SetDuration              ; test for 80h not set, which is a note duration
AD1D F7A754           (       ./smps.asm):00705                 stb   SongDAC.NextData               ; This is a note; store it here
AD20 E684             (       ./smps.asm):00706                 ldb   ,x
AD22 2A05             (       ./smps.asm):00707                 bpl   SetDurationAndForward    ; test for 80h not set, which is a note duration
AD24 F6A753           (       ./smps.asm):00708                 ldb   SongDAC.SavedDuration
AD27 2009             (       ./smps.asm):00709                 bra   DACAfterDur
                      (       ./smps.asm):00710         
AD29                  (       ./smps.asm):00711         SetDurationAndForward
AD29 3001             (       ./smps.asm):00712                 leax  1,x
AD2B                  (       ./smps.asm):00713         SetDuration
AD2B B6A74A           (       ./smps.asm):00714                 lda   SongDAC.TempoDivider
AD2E 3D               (       ./smps.asm):00715                 mul
AD2F F7A753           (       ./smps.asm):00716                 stb   SongDAC.SavedDuration
AD32                  (       ./smps.asm):00717         DACAfterDur
AD32 F7A752           (       ./smps.asm):00718                 stb   SongDAC.DurationTimeout
AD35 BFA74B           (       ./smps.asm):00719                 stx   SongDAC.DataPointer
AD38 F6A754           (       ./smps.asm):00720                 ldb   SongDAC.NextData
AD3B C180             (       ./smps.asm):00721                 cmpb  #$80
AD3D 2601             (       ./smps.asm):00722                 bne   @a
AD3F 39               (       ./smps.asm):00723                 rts                            ; if a rest, quit
AD40                  (       ./smps.asm):00724         @a
AD40 8EAD4E           (       ./smps.asm):00725                 ldx   #@data            
AD43 C081             (       ./smps.asm):00726                 subb  #$81                     ; transform note into an index...      
AD45 860E             (       ./smps.asm):00727                 lda   #$0E
AD47 97FC             (       ./smps.asm):00728                 sta   <YM2413_A0
AD49 E685             (       ./smps.asm):00729                 ldb   b,x
AD4B D7FD             (       ./smps.asm):00730                 stb   <YM2413_D0      
AD4D 39               (       ./smps.asm):00731                 rts
AD4E                  (       ./smps.asm):00732         @data
AD4E 30               (       ./smps.asm):00733                 fcb   $30 ; $81 - Kick  (BD+TOM) 34
AD4F 28               (       ./smps.asm):00734                 fcb   $28 ; $82 - Snare (SNARE noise+TOM) 2C
AD50 21               (       ./smps.asm):00735                 fcb   $21 ; $83 - Clap 21
AD51 22               (       ./smps.asm):00736                 fcb   $22 ; $84 - Scratch 22
AD52 24               (       ./smps.asm):00737                 fcb   $24 ; $85 - Timpani 22
AD53 24               (       ./smps.asm):00738                 fcb   $24 ; $86 - Hi Tom
AD54 24               (       ./smps.asm):00739                 fcb   $24 ; $87 - Bongo
AD55 24               (       ./smps.asm):00740                 fcb   $24 ; $88 - Hi Timpani
AD56 30               (       ./smps.asm):00741                 fcb   $30 ; $89 - Mid Timpani
AD57 30               (       ./smps.asm):00742                 fcb   $30 ; $8A - Mid Low Timpani
AD58 34               (       ./smps.asm):00743                 fcb   $34 ; $8B - Low Timpani
AD59 28               (       ./smps.asm):00744                 fcb   $28 ; $8C - Mid Tom
AD5A 30               (       ./smps.asm):00745                 fcb   $30 ; $8D - Low Tom
AD5B 34               (       ./smps.asm):00746                 fcb   $34 ; $8E - Floor Tom
AD5C 24               (       ./smps.asm):00747                 fcb   $24 ; $8F - Hi Bongo
AD5D 28               (       ./smps.asm):00748                 fcb   $28 ; $90 - Mid Bongo
AD5E 30               (       ./smps.asm):00749                 fcb   $30 ; $91 - Low Bongo
                      (       ./smps.asm):00750         
                      (       ./smps.asm):00751         ******************************************************************************
                      (       ./smps.asm):00752         * FM Track Update
                      (       ./smps.asm):00753         ******************************************************************************
                      (       ./smps.asm):00754         
AD5F                  (       ./smps.asm):00755         _FMNoteOff MACRO                       ; (dependency) should be preceded by A loaded with PlaybackControl,y and B with VoiceControl,y
                      (       ./smps.asm):00756                 bita  #$04                     ; Is SFX overriding set?
                      (       ./smps.asm):00757                 bne   @skip                    ; if true skip note off, sfx is playing        
                      (       ./smps.asm):00758                 addb  #$20                     ; set Sus/Key/Block/FNum(MSB) Command
                      (       ./smps.asm):00759                 stb   <YM2413_A0
                      (       ./smps.asm):00760                 ldb   NoteControl,y            ; load current value (do not erase FNum MSB)
                      (       ./smps.asm):00761                 andb  #$EF                     ; clear bit 4 (10h) Key Off
                      (       ./smps.asm):00762                 stb   <YM2413_D0               ; send to YM
                      (       ./smps.asm):00763                 stb   NoteControl,y               
AD5F                  (       ./smps.asm):00764         @skip   equ   *        
                      (       ./smps.asm):00765          ENDM        
                      (       ./smps.asm):00766         
AD5F                  (       ./smps.asm):00767         FMUpdateTrack
AD5F 6A2B             (       ./smps.asm):00768                 dec   DurationTimeout,y        ; Decrement duration
AD61 265D             (       ./smps.asm):00769                 bne   NoteFillUpdate           ; If not time-out yet, go do updates only
AD63 A6A4             (       ./smps.asm):00770                 lda   PlaybackControl,y
AD65 84EF             (       ./smps.asm):00771                 anda  #$EF
AD67 A7A4             (       ./smps.asm):00772                 sta   PlaybackControl,y        ; When duration over, clear "do not attack" bit 4 (0x10) of track's play control
                      (       ./smps.asm):00773                 
AD69                  (       ./smps.asm):00774         FMDoNext
AD69 AE24             (       ./smps.asm):00775                 ldx   DataPointer,y
AD6B A6A4             (       ./smps.asm):00776                 lda   PlaybackControl,y        ; Clear bit 1 (02h) "track is rest" from track
AD6D 84FD             (       ./smps.asm):00777                 anda  #$FD
AD6F A7A4             (       ./smps.asm):00778                 sta   PlaybackControl,y        
                      (       ./smps.asm):00779                
AD71                  (       ./smps.asm):00780         FMReadCoordFlag        
AD71 E680             (       ./smps.asm):00781                 ldb   ,x+                      ; Read song data
AD73 F7AD98           (       ./smps.asm):00782                 stb   NoteDyn+1
AD76 C1E0             (       ./smps.asm):00783                 cmpb  #$E0
AD78 2505             (       ./smps.asm):00784                 blo   FMNoteOff                ; Test for >= E0h, which is a coordination flag
AD7A BDB469           (       ./smps.asm):00785                 jsr   CoordFlag
AD7D 20F2             (       ./smps.asm):00786                 bra   FMReadCoordFlag          ; Read all consecutive coordination flags
                      (       ./smps.asm):00787         
AD7F                  (       ./smps.asm):00788         FMNoteOff
AD7F A6A4             (       ./smps.asm):00789                 lda   PlaybackControl,y
AD81 8414             (       ./smps.asm):00790                 anda  #$14                     ; Are bits 4 (no attack) or 2 (SFX overriding) set?
AD83 2612             (       ./smps.asm):00791                 bne   NoteDyn                  ; If they are, skip
AD85 E621             (       ./smps.asm):00792                 ldb   VoiceControl,y           ; Otherwise, send a Key Off
                      (       ./smps.asm):00793                 _FMNoteOff                     ; (dependency) should be preceded by A loaded with PlaybackControl,y and B with VoiceControl,y
AD87 8504             (       _FMNoteOff):00001                 bita  #$04                     ; Is SFX overriding set?
AD89 260C             (       _FMNoteOff):00002                 bne   @skip                    ; if true skip note off, sfx is playing        
AD8B CB20             (       _FMNoteOff):00003                 addb  #$20                     ; set Sus/Key/Block/FNum(MSB) Command
AD8D D7FC             (       _FMNoteOff):00004                 stb   <YM2413_A0
AD8F E622             (       _FMNoteOff):00005                 ldb   NoteControl,y            ; load current value (do not erase FNum MSB)
AD91 C4EF             (       _FMNoteOff):00006                 andb  #$EF                     ; clear bit 4 (10h) Key Off
AD93 D7FD             (       _FMNoteOff):00007                 stb   <YM2413_D0               ; send to YM
AD95 E722             (       _FMNoteOff):00008                 stb   NoteControl,y               
     AD97             (       _FMNoteOff):00009         @skip   equ   *        
AD97 C600             (       ./smps.asm):00794         NoteDyn ldb   #0                       ; (dynamic) retore note value   
AD99 2A4A             (       ./smps.asm):00795                 bpl   FMSetDuration            ; Test for 80h not set, which is a note duration
                      (       ./smps.asm):00796                 
AD9B                  (       ./smps.asm):00797         FMSetFreq
AD9B C080             (       ./smps.asm):00798                 subb  #$80                     ; Test for a rest
AD9D 2608             (       ./smps.asm):00799                 bne   @a
AD9F A6A4             (       ./smps.asm):00800                 lda   PlaybackControl,y        ; Set bit 1 (track is at rest)
ADA1 8A02             (       ./smps.asm):00801                 ora   #$02
ADA3 A7A4             (       ./smps.asm):00802                 sta   PlaybackControl,y
ADA5 2011             (       ./smps.asm):00803                 bra   @b        
ADA7 CB0B             (       ./smps.asm):00804         @a      addb  #$0B                     ; Add FMFrequencies offet for C0 Note, access lower notes with transpose
ADA9 EB26             (       ./smps.asm):00805                 addb  Transpose,y              ; Add current channel transpose (coord flag E9)
ADAB EBA81E           (       ./smps.asm):00806                 addb  InstrTranspose,y         ; Add Instrument (Voice) offset (coord flag EF)
ADAE 58               (       ./smps.asm):00807                 aslb                           ; Transform note into an index...
ADAF CEAEBC           (       ./smps.asm):00808                 ldu   #FMFrequencies
ADB2 8600             (       ./smps.asm):00809                 lda   #0    
ADB4 ECCB             (       ./smps.asm):00810                 ldd   d,u
ADB6 ED2D             (       ./smps.asm):00811                 std   NextData,y               ; Store Frequency
ADB8 E684             (       ./smps.asm):00812         @b      ldb   ,x                       ; Get next byte
ADBA 2A27             (       ./smps.asm):00813                 bpl   FMSetDurationAndForward  ; Test for 80h not set, which is a note duration
ADBC E62C             (       ./smps.asm):00814                 ldb   SavedDuration,y        
ADBE 202A             (       ./smps.asm):00815                 bra   FinishTrackUpdate
                      (       ./smps.asm):00816                 
ADC0                  (       ./smps.asm):00817         NoteFillUpdate
ADC0 A62F             (       ./smps.asm):00818                 lda   NoteFillTimeout,y        ; Get current note fill value
ADC2 10270072         (       ./smps.asm):00819                 lbeq  DoModulation             ; If zero, return!
ADC6 6A2F             (       ./smps.asm):00820                 dec   NoteFillTimeout,y        ; Decrement note fill
ADC8 266E             (       ./smps.asm):00821                 bne   DoModulation             ; If not zero, return
                      (       ./smps.asm):00822                 
ADCA A6A4             (       ./smps.asm):00823                 lda   PlaybackControl,y
ADCC 8A02             (       ./smps.asm):00824                 ora   #$02                     ; Set bit 1 (track is at rest)
ADCE A7A4             (       ./smps.asm):00825                 sta   PlaybackControl,y        
ADD0 E621             (       ./smps.asm):00826                 ldb   VoiceControl,y
                      (       ./smps.asm):00827                 _FMNoteOff                     ; (dependency) should be preceded by A loaded with PlaybackControl,y and B with VoiceControl,y         
ADD2 8504             (       _FMNoteOff):00001                 bita  #$04                     ; Is SFX overriding set?
ADD4 260C             (       _FMNoteOff):00002                 bne   @skip                    ; if true skip note off, sfx is playing        
ADD6 CB20             (       _FMNoteOff):00003                 addb  #$20                     ; set Sus/Key/Block/FNum(MSB) Command
ADD8 D7FC             (       _FMNoteOff):00004                 stb   <YM2413_A0
ADDA E622             (       _FMNoteOff):00005                 ldb   NoteControl,y            ; load current value (do not erase FNum MSB)
ADDC C4EF             (       _FMNoteOff):00006                 andb  #$EF                     ; clear bit 4 (10h) Key Off
ADDE D7FD             (       _FMNoteOff):00007                 stb   <YM2413_D0               ; send to YM
ADE0 E722             (       _FMNoteOff):00008                 stb   NoteControl,y               
     ADE2             (       _FMNoteOff):00009         @skip   equ   *        
ADE2 39               (       ./smps.asm):00828                 rts         
                      (       ./smps.asm):00829         
ADE3                  (       ./smps.asm):00830         FMSetDurationAndForward
ADE3 3001             (       ./smps.asm):00831                 leax  1,x
                      (       ./smps.asm):00832                 
ADE5                  (       ./smps.asm):00833         FMSetDuration
ADE5 A623             (       ./smps.asm):00834                 lda   TempoDivider,y
ADE7 3D               (       ./smps.asm):00835                 mul
ADE8 E72C             (       ./smps.asm):00836                 stb   SavedDuration,y
                      (       ./smps.asm):00837                 
ADEA                  (       ./smps.asm):00838         FinishTrackUpdate
ADEA E72B             (       ./smps.asm):00839                 stb   DurationTimeout,y        ; Last set duration ... put into ticker
ADEC AF24             (       ./smps.asm):00840                 stx   DataPointer,y            ; Stores to the track pointer memory
ADEE A6A4             (       ./smps.asm):00841                 lda   PlaybackControl,y
ADF0 8510             (       ./smps.asm):00842                 bita  #$10                     ; Is bit 4 (10h) "do not attack next note" set on playback?
ADF2 2702             (       ./smps.asm):00843                 beq   @a                       
ADF4 2011             (       ./smps.asm):00844                 bra   FMPrepareNote            ; If so, quit
ADF6 E6A810           (       ./smps.asm):00845         @a      ldb   NoteFillMaster,y
ADF9 E72F             (       ./smps.asm):00846                 stb   NoteFillTimeout,y        ; Reset 0Fh "note fill" value to master
ADFB 8508             (       ./smps.asm):00847                 bita  #$08                     ; Is bit 3 (08h) modulation turned on?
ADFD 2602             (       ./smps.asm):00848                 bne   @b
ADFF 2006             (       ./smps.asm):00849                 bra   FMPrepareNote            ; if not, quit
AE01 AEA811           (       ./smps.asm):00850         @b      ldx   ModulationPtr,y
AE04 BDB593           (       ./smps.asm):00851                 jsr   SetModulation            ; reload modulation settings for the new note
                      (       ./smps.asm):00852                 
AE07                  (       ./smps.asm):00853         FMPrepareNote
AE07 A6A4             (       ./smps.asm):00854                 lda   PlaybackControl,y
AE09 8504             (       ./smps.asm):00855                 bita  #$04                     ; Is bit 2 (04h) Is SFX overriding this track?
AE0B 262B             (       ./smps.asm):00856                 bne   DoModulation             ; If so skip freq update                                                 
AE0D 8502             (       ./smps.asm):00857                 bita  #$02                     ; Is bit 1 (02h) "track is at rest" set on playback?
AE0F 2701             (       ./smps.asm):00858                 beq   FMUpdateFreqAndNoteOn
AE11 39               (       ./smps.asm):00859                 rts                            ; If so, quit
AE12                  (       ./smps.asm):00860         FMUpdateFreqAndNoteOn
AE12 E6A819           (       ./smps.asm):00861                 ldb   Detune,y
AE15 1D               (       ./smps.asm):00862                 sex
AE16 E32D             (       ./smps.asm):00863                 addd  NextData,y               ; Apply detune but don't update stored frequency
AE18 B7AE31           (       ./smps.asm):00864                 sta   @dyn+1
AE1B 8610             (       ./smps.asm):00865                 lda   #$10                     ; set LSB Frequency Command
AE1D AB21             (       ./smps.asm):00866                 adda  VoiceControl,y
AE1F 97FC             (       ./smps.asm):00867                 sta   <YM2413_A0
AE21 8B10             (       ./smps.asm):00868                 adda  #$10                     ; set Sus/Key/Block/FNum(MSB) Command
AE23 D7FD             (       ./smps.asm):00869                 stb   <YM2413_D0
                      (       ./smps.asm):00870                 _YMBusyWait9
AE25 12               (     _YMBusyWait9):00001                 nop
AE26 12               (     _YMBusyWait9):00002                 nop
AE27 12               (     _YMBusyWait9):00003                 nop
AE28 21FE             (     _YMBusyWait9):00004                 brn   *
AE2A E622             (       ./smps.asm):00871                 ldb   NoteControl,y            ; load current value (do not erase FNum MSB) (and used as 5 cycles tempo)
AE2C CA10             (       ./smps.asm):00872                 orb   #$10                     ; Set bit 4 (10h) Key On
AE2E C4F0             (       ./smps.asm):00873                 andb  #$F0                     ; Clear FNum MSB (and used as 2 cycles tempo)
AE30 CB00             (       ./smps.asm):00874         @dyn    addb  #0                       ; (dynamic) Set Fnum MSB (and used as 2 cycles tempo)                
AE32 97FC             (       ./smps.asm):00875                 sta   <YM2413_A0
AE34 E722             (       ./smps.asm):00876                 stb   NoteControl,y
AE36 D7FD             (       ./smps.asm):00877                 stb   <YM2413_D0   
                      (       ./smps.asm):00878                 
AE38                  (       ./smps.asm):00879         DoModulation  
AE38 A6A4             (       ./smps.asm):00880                 lda   PlaybackControl,y
AE3A 8502             (       ./smps.asm):00881                 bita  #$02                     ; Is bit 1 (02h) "track is at rest" set on playback?
AE3C 2701             (       ./smps.asm):00882                 beq   @a
AE3E 39               (       ./smps.asm):00883                 rts                            ; If so, quit        
AE3F 8508             (       ./smps.asm):00884         @a      bita  #$08                     ; Is bit 3 (08h) "modulation on" set on playback?
AE41 2601             (       ./smps.asm):00885                 bne   @b
AE43 39               (       ./smps.asm):00886                 rts                            ; If not, quit        
AE44 A6A813           (       ./smps.asm):00887         @b      lda   ModulationWait,y         ; 'ww' period of time before modulation starts
AE47 2704             (       ./smps.asm):00888                 beq   @c                       ; if zero, go to it!
AE49 6AA813           (       ./smps.asm):00889                 dec   ModulationWait,y         ; Otherwise, decrement timer
AE4C 39               (       ./smps.asm):00890                 rts                            ; return if decremented
AE4D 6AA814           (       ./smps.asm):00891         @c      dec   ModulationSpeed,y        ; Decrement modulation speed counter
AE50 2701             (       ./smps.asm):00892                 beq   @d
AE52 39               (       ./smps.asm):00893                 rts                            ; Return if not yet zero
AE53 AEA811           (       ./smps.asm):00894         @d      ldx   ModulationPtr,y
AE56 A601             (       ./smps.asm):00895                 lda   1,x
AE58 A7A814           (       ./smps.asm):00896                 sta   ModulationSpeed,y
AE5B A6A816           (       ./smps.asm):00897                 lda   ModulationSteps,y
AE5E 2609             (       ./smps.asm):00898                 bne   @e
AE60 A603             (       ./smps.asm):00899                 lda   3,x
AE62 A7A816           (       ./smps.asm):00900                 sta   ModulationSteps,y     
AE65 60A815           (       ./smps.asm):00901                 neg   ModulationDelta,y
AE68 39               (       ./smps.asm):00902                 rts                
AE69 6AA816           (       ./smps.asm):00903         @e      dec   ModulationSteps,y
AE6C E6A815           (       ./smps.asm):00904                 ldb   ModulationDelta,y
AE6F 1D               (       ./smps.asm):00905                 sex
AE70 E3A817           (       ./smps.asm):00906                 addd  ModulationVal,y
AE73 EDA817           (       ./smps.asm):00907                 std   ModulationVal,y        
                      (       ./smps.asm):00908                       
AE76                  (       ./smps.asm):00909         FMUpdateFreq
AE76 A6A4             (       ./smps.asm):00910                 lda   PlaybackControl,y
AE78 8504             (       ./smps.asm):00911                 bita  #$04                     ; Is bit 2 (04h) Is SFX overriding this track?
AE7A 263F             (       ./smps.asm):00912                 bne   @rts
AE7C E6A819           (       ./smps.asm):00913                 ldb   Detune,y
AE7F 1D               (       ./smps.asm):00914                 sex
AE80 FDAE98           (       ./smps.asm):00915                 std   @dyna+1
AE83 ECA817           (       ./smps.asm):00916                 ldd   ModulationVal,y          ; get modulation effect
AE86 2B06             (       ./smps.asm):00917                 bmi   @a
                      (       ./smps.asm):00918                 _asrd                          ; modulation is divided by four
AE88 47               (            _asrd):00001                 asra
AE89 56               (            _asrd):00002                 rorb
                      (       ./smps.asm):00919                 _asrd                          ; used for better precision of delta
AE8A 47               (            _asrd):00001                 asra
AE8B 56               (            _asrd):00002                 rorb
AE8C 2007             (       ./smps.asm):00920                 bra   @b
AE8E                  (       ./smps.asm):00921         @a      _asrd                          ; modulation is divided by four
AE8E 47               (            _asrd):00001                 asra
AE8F 56               (            _asrd):00002                 rorb
                      (       ./smps.asm):00922                 _asrd                          ; used for better precision of delta        
AE90 47               (            _asrd):00001                 asra
AE91 56               (            _asrd):00002                 rorb
AE92 C30001           (       ./smps.asm):00923                 addd  #1                       ; negative value need +1 when div 
AE95 E32D             (       ./smps.asm):00924         @b      addd  NextData,y               ; apply detune but don't update stored frequency
AE97 C30000           (       ./smps.asm):00925         @dyna   addd  #0                       ; (dynamic) apply detune        
AE9A 840F             (       ./smps.asm):00926                 anda  #$0F
AE9C B7AEB4           (       ./smps.asm):00927                 sta   @dynb+1
AE9F 8610             (       ./smps.asm):00928                 lda   #$10                     ; set LSB Frequency Command
AEA1 AB21             (       ./smps.asm):00929                 adda  VoiceControl,y           ; get channel number
AEA3 97FC             (       ./smps.asm):00930                 sta   <YM2413_A0               ; send Fnum update Command
AEA5 8B10             (       ./smps.asm):00931                 adda  #$10                     ; set Sus/Key/Block/FNum(MSB) Command
AEA7 D7FD             (       ./smps.asm):00932                 stb   <YM2413_D0               ; send FNum (b0-b7)
                      (       ./smps.asm):00933                 _YMBusyWait11                  ; total wait 20 cycles
AEA9 12               (    _YMBusyWait11):00001                 nop
AEAA 12               (    _YMBusyWait11):00002                 nop
AEAB 12               (    _YMBusyWait11):00003                 nop
AEAC 12               (    _YMBusyWait11):00004                 nop
AEAD 21FE             (    _YMBusyWait11):00005                 brn   *
AEAF E622             (       ./smps.asm):00934                 ldb   NoteControl,y            ; load current value (do not erase FNum MSB) (and used as 5 cycles tempo)
AEB1 C4F0             (       ./smps.asm):00935                 andb  #$F0                     ; clear FNum MSB (and used as 2 cycles tempo)
AEB3 CB00             (       ./smps.asm):00936         @dynb   addb  #0                       ; (dynamic) Set Fnum MSB (and used as 2 cycles tempo)        
AEB5 97FC             (       ./smps.asm):00937                 sta   <YM2413_A0               ; send command
AEB7 E722             (       ./smps.asm):00938                 stb   NoteControl,y
AEB9 D7FD             (       ./smps.asm):00939                 stb   <YM2413_D0               ; send FNum (b8) and Block (b0-b2)
AEBB 39               (       ./smps.asm):00940         @rts    rts        
                      (       ./smps.asm):00941          
                      (       ./smps.asm):00942         ; 95 notes (Note value $81=C0 $DF=A#7) with direct access
                      (       ./smps.asm):00943         ; Other notes can be accessed by transpose
AEBC                  (       ./smps.asm):00944         FMFrequencies
AEBC 0056005B00610067 (       ./smps.asm):00945                 fdb   $0056,$005B,$0061,$0067,$006D,$0073,$007A,$0081,$0089,$0091,$009A,$00A2 ; C-1 - B-1
     006D0073007A0081
     00890091009A00A2
AED4 00AD00B700C200CD (       ./smps.asm):00946                 fdb   $00AD,$00B7,$00C2,$00CD,$00DA,$00E6,$00F4,$0102,$0112,$0122,$0133,$0146 ; C0 - B0
     00DA00E600F40102
     0112012201330146
AEEC 0159016D0183019A (       ./smps.asm):00947                 fdb   $0159,$016D,$0183,$019A,$01B3,$01CC,$01E8,$0302,$0312,$0322,$0333,$0346 ; C1 - B1
     01B301CC01E80302
     0312032203330346
AF04 0359036D0383039A (       ./smps.asm):00948                 fdb   $0359,$036D,$0383,$039A,$03B3,$03CC,$03E8,$0502,$0512,$0522,$0533,$0546 ; C2 - B2
     03B303CC03E80502
     0512052205330546
AF1C 0559056D0583059A (       ./smps.asm):00949                 fdb   $0559,$056D,$0583,$059A,$05B3,$05CC,$05E8,$0702,$0712,$0722,$0733,$0746 ; C3 - B3
     05B305CC05E80702
     0712072207330746
AF34 0759076D0783079A (       ./smps.asm):00950                 fdb   $0759,$076D,$0783,$079A,$07B3,$07CC,$07E8,$0902,$0912,$0922,$0933,$0946 ; C4 - B4
     07B307CC07E80902
     0912092209330946
AF4C 0959096D0983099A (       ./smps.asm):00951                 fdb   $0959,$096D,$0983,$099A,$09B3,$09CC,$09E8,$0B02,$0B12,$0B22,$0B33,$0B46 ; C5 - B5
     09B309CC09E80B02
     0B120B220B330B46
AF64 0B590B6D0B830B9A (       ./smps.asm):00952                 fdb   $0B59,$0B6D,$0B83,$0B9A,$0BB3,$0BCC,$0BE8,$0D02,$0D12,$0D22,$0D33,$0D46 ; C6 - B6
     0BB30BCC0BE80D02
     0D120D220D330D46
AF7C 0D590D6D0D830D9A (       ./smps.asm):00953                 fdb   $0D59,$0D6D,$0D83,$0D9A,$0DB3,$0DCC,$0DE8,$0F02,$0F12,$0F22,$0F33,$0F46 ; C7 - B7        
     0DB30DCC0DE80F02
     0F120F220F330F46
AF94 0F590F6D0F830F9A (       ./smps.asm):00954                 fdb   $0F59,$0F6D,$0F83,$0F9A,$0FB3,$0FCC,$0FE8,$0FE8,$0FE8,$0FE8,$0FE8,$0FE8 ; C8 - F#8
     0FB30FCC0FE80FE8
     0FE80FE80FE80FE8
AFAC 0FE80FE80FE80FE8 (       ./smps.asm):00955                 fdb   $0FE8,$0FE8,$0FE8,$0FE8,$0FE8,$0FE8,$0FE8,$0FE8                         ; F#8
     0FE80FE80FE80FE8
                      (       ./smps.asm):00956                 
                      (       ./smps.asm):00957         ******************************************************************************
                      (       ./smps.asm):00958         * PSG Update Track
                      (       ./smps.asm):00959         ******************************************************************************
                      (       ./smps.asm):00960         
AFBC                  (       ./smps.asm):00961         _PSGNoteOff MACRO                      ; (dependency) should be preceded by A loaded with PlaybackControl,y and B with VoiceControl,y
                      (       ./smps.asm):00962                 bita  #$04                     ; Is SFX overriding set?
                      (       ./smps.asm):00963                 bne   @skip                    ; if true skip note off, sfx is playing               
                      (       ./smps.asm):00964                 orb   #$1F                     ; Volume Off
                      (       ./smps.asm):00965                 stb   <PSG
AFBC                  (       ./smps.asm):00966         @skip   equ   *        
                      (       ./smps.asm):00967          ENDM
                      (       ./smps.asm):00968          
AFBC                  (       ./smps.asm):00969         PSGNoteFillUpdate
AFBC A62F             (       ./smps.asm):00970                 lda   NoteFillTimeout,y        ; Get current note fill value
AFBE 102700BD         (       ./smps.asm):00971                 lbeq  PSGUpdateVolFX           ; If zero, return!
AFC2 6A2F             (       ./smps.asm):00972                 dec   NoteFillTimeout,y        ; Decrement note fill
AFC4 102600B7         (       ./smps.asm):00973                 lbne  PSGUpdateVolFX           ; If not zero, return
                      (       ./smps.asm):00974                 
AFC8 A6A4             (       ./smps.asm):00975                 lda   PlaybackControl,y
AFCA 8A02             (       ./smps.asm):00976                 ora   #$02                     ; Set bit 1 (track is at rest)
AFCC A7A4             (       ./smps.asm):00977                 sta   PlaybackControl,y    
AFCE E621             (       ./smps.asm):00978                 ldb   VoiceControl,y           ; Get "voice control" byte (loads upper bits which specify attenuation setting)
                      (       ./smps.asm):00979                 _PSGNoteOff                    ; (dependency) should be preceded by A loaded with PlaybackControl,y and B with VoiceControl,y
AFD0 8504             (      _PSGNoteOff):00001                 bita  #$04                     ; Is SFX overriding set?
AFD2 2604             (      _PSGNoteOff):00002                 bne   @skip                    ; if true skip note off, sfx is playing               
AFD4 CA1F             (      _PSGNoteOff):00003                 orb   #$1F                     ; Volume Off
AFD6 D7FE             (      _PSGNoteOff):00004                 stb   <PSG
     AFD8             (      _PSGNoteOff):00005         @skip   equ   *        
AFD8 39               (       ./smps.asm):00980                 rts 
                      (       ./smps.asm):00981          
AFD9                  (       ./smps.asm):00982         PSGUpdateTrack
AFD9 6A2B             (       ./smps.asm):00983                 dec   DurationTimeout,y        ; Decrement duration
AFDB 26DF             (       ./smps.asm):00984                 bne   PSGNoteFillUpdate        ; If not time-out yet, go do updates only
AFDD A6A4             (       ./smps.asm):00985                 lda   PlaybackControl,y
AFDF 84EF             (       ./smps.asm):00986                 anda  #$EF
AFE1 A7A4             (       ./smps.asm):00987                 sta   PlaybackControl,y        ; When duration over, clear "do not attack" bit 4 (0x10) of track's play control
                      (       ./smps.asm):00988                 
AFE3                  (       ./smps.asm):00989         PSGDoNext
AFE3 AE24             (       ./smps.asm):00990                 ldx   DataPointer,y
AFE5 A6A4             (       ./smps.asm):00991                 lda   PlaybackControl,y        ; Clear bit 1 (02h) "track is rest" from track
AFE7 84FD             (       ./smps.asm):00992                 anda  #$FD
AFE9 A7A4             (       ./smps.asm):00993                 sta   PlaybackControl,y        
                      (       ./smps.asm):00994                
AFEB                  (       ./smps.asm):00995         PSGReadCoordFlag        
AFEB E680             (       ./smps.asm):00996                 ldb   ,x+                      ; Read song data
AFED C1E0             (       ./smps.asm):00997                 cmpb  #$E0
AFEF 2505             (       ./smps.asm):00998                 blo   @a                       ; Test for >= E0h, which is a coordination flag
AFF1 BDB469           (       ./smps.asm):00999                 jsr   CoordFlag
AFF4 20F5             (       ./smps.asm):01000                 bra   PSGReadCoordFlag         ; Read all consecutive coordination flags
AFF6 2A34             (       ./smps.asm):01001         @a      bpl   PSGSetDuration           ; Test for 80h not set, which is a note duration
                      (       ./smps.asm):01002                 
AFF8                  (       ./smps.asm):01003         PSGSetFreq
AFF8 C081             (       ./smps.asm):01004                 subb  #$81                     ; Test for a rest
AFFA 2412             (       ./smps.asm):01005                 bcc   @a                       ; If a note branch
AFFC A6A4             (       ./smps.asm):01006                 lda   PlaybackControl,y        ; If carry (only time that happens if 80h because of earlier logic) this is a rest!
AFFE 8A02             (       ./smps.asm):01007                 ora   #$02
B000 A7A4             (       ./smps.asm):01008                 sta   PlaybackControl,y        ; Set bit 1 (track is at rest)
B002 E621             (       ./smps.asm):01009                 ldb   VoiceControl,y           ; Get "voice control" byte (loads upper bits which specify attenuation setting)        
                      (       ./smps.asm):01010                 _PSGNoteOff                    ; (dependency) should be preceded by A loaded with PlaybackControl,y and B with VoiceControl,y
B004 8504             (      _PSGNoteOff):00001                 bita  #$04                     ; Is SFX overriding set?
B006 2604             (      _PSGNoteOff):00002                 bne   @skip                    ; if true skip note off, sfx is playing               
B008 CA1F             (      _PSGNoteOff):00003                 orb   #$1F                     ; Volume Off
B00A D7FE             (      _PSGNoteOff):00004                 stb   <PSG
     B00C             (      _PSGNoteOff):00005         @skip   equ   *        
B00C 2014             (       ./smps.asm):01011                 bra   @b
B00E CB03             (       ./smps.asm):01012         @a      addb  #$03                     ; Add Frequencies offet for C0 Note, access lower notes with transpose
B010 EB26             (       ./smps.asm):01013                 addb  Transpose,y              ; Add current channel transpose (coord flag E9)
B012 C146             (       ./smps.asm):01014                 cmpb  #70                      ; array bound check
B014 2502             (       ./smps.asm):01015                 blo   @c
B016 C645             (       ./smps.asm):01016                 ldb   #69                      
B018 58               (       ./smps.asm):01017         @c      aslb                           ; Transform note into an index...
B019 CEB13E           (       ./smps.asm):01018                 ldu   #PSGFrequencies
B01C 8600             (       ./smps.asm):01019                 lda   #0    
B01E ECCB             (       ./smps.asm):01020                 ldd   d,u
B020 ED2D             (       ./smps.asm):01021                 std   NextData,y                ; Store Frequency
B022 E684             (       ./smps.asm):01022         @b      ldb   ,x                        ; Get next byte
B024 2A04             (       ./smps.asm):01023                 bpl   PSGSetDurationAndForward  ; Test for 80h not set, which is a note duration
B026 E62C             (       ./smps.asm):01024                 ldb   SavedDuration,y        
B028 2007             (       ./smps.asm):01025                 bra   PSGFinishTrackUpdate
                      (       ./smps.asm):01026         
B02A                  (       ./smps.asm):01027         PSGSetDurationAndForward
B02A 3001             (       ./smps.asm):01028                 leax  1,x
                      (       ./smps.asm):01029                 
B02C                  (       ./smps.asm):01030         PSGSetDuration
B02C A623             (       ./smps.asm):01031                 lda   TempoDivider,y
B02E 3D               (       ./smps.asm):01032                 mul
B02F E72C             (       ./smps.asm):01033                 stb   SavedDuration,y
                      (       ./smps.asm):01034         
B031                  (       ./smps.asm):01035         PSGFinishTrackUpdate
B031 E72B             (       ./smps.asm):01036                 stb   DurationTimeout,y        ; Last set duration ... put into ticker
B033 AF24             (       ./smps.asm):01037                 stx   DataPointer,y            ; Stores to the track pointer memory
B035 A6A4             (       ./smps.asm):01038                 lda   PlaybackControl,y
B037 8510             (       ./smps.asm):01039                 bita  #$10                     ; Is bit 4 (10h) "do not attack next note" set on playback?
B039 2702             (       ./smps.asm):01040                 beq   @a                       
B03B 2013             (       ./smps.asm):01041                 bra   PSGDoNoteOn              ; If so, quit
B03D E6A810           (       ./smps.asm):01042         @a      ldb   NoteFillMaster,y
B040 E72F             (       ./smps.asm):01043                 stb   NoteFillTimeout,y        ; Reset 0Fh "note fill" value to master
B042 6F29             (       ./smps.asm):01044                 clr   VolFlutter,y             ; Reset PSG flutter byte
B044 8508             (       ./smps.asm):01045                 bita  #$08                     ; Is bit 3 (08h) modulation turned on?
B046 2602             (       ./smps.asm):01046                 bne   @b
B048 2006             (       ./smps.asm):01047                 bra   PSGDoNoteOn              ; if not, quit
B04A AEA811           (       ./smps.asm):01048         @b      ldx   ModulationPtr,y
B04D BDB593           (       ./smps.asm):01049                 jsr   SetModulation            ; reload modulation settings for the new note
                      (       ./smps.asm):01050                 
B050                  (       ./smps.asm):01051         PSGDoNoteOn
B050 A6A4             (       ./smps.asm):01052                 lda   PlaybackControl,y
B052 8506             (       ./smps.asm):01053                 bita  #$06                     ; If either bit 1 ("track in rest") and 2 ("SFX overriding this track"), quit!
B054 2701             (       ./smps.asm):01054                 beq   PSGUpdateFreq                       
B056 39               (       ./smps.asm):01055                 rts                            ; If so, quit
B057                  (       ./smps.asm):01056         PSGUpdateFreq
B057 E6A819           (       ./smps.asm):01057                 ldb   Detune,y
B05A 1D               (       ./smps.asm):01058                 sex
B05B E32D             (       ./smps.asm):01059                 addd  NextData,y               ; Apply detune but don't update stored frequency
B05D FDB071           (       ./smps.asm):01060                 std   @dyn+1
B060 C40F             (       ./smps.asm):01061                 andb  #$0F                     ; Keep only lower four bits (first PSG reg write only applies d0-d3 of freq)
B062 A621             (       ./smps.asm):01062                 lda   VoiceControl,y
B064 81E0             (       ./smps.asm):01063                 cmpa  #$E0
B066 2604             (       ./smps.asm):01064                 bne   @a
B068 CBC0             (       ./smps.asm):01065                 addb  #$C0
B06A 2002             (       ./smps.asm):01066                 bra   @b
B06C EB21             (       ./smps.asm):01067         @a      addb  VoiceControl,y           ; Get "voice control" byte...
B06E D7FE             (       ./smps.asm):01068         @b      stb   <PSG
B070 CC0000           (       ./smps.asm):01069         @dyn    ldd   #0
                      (       ./smps.asm):01070                 _lsrd
B073 44               (            _lsrd):00001                 lsra
B074 56               (            _lsrd):00002                 rorb
                      (       ./smps.asm):01071                 _lsrd
B075 44               (            _lsrd):00001                 lsra
B076 56               (            _lsrd):00002                 rorb
                      (       ./smps.asm):01072                 _lsrd
B077 44               (            _lsrd):00001                 lsra
B078 56               (            _lsrd):00002                 rorb
                      (       ./smps.asm):01073                 _lsrd              
B079 44               (            _lsrd):00001                 lsra
B07A 56               (            _lsrd):00002                 rorb
B07B D7FE             (       ./smps.asm):01074                 stb   <PSG
B07D 2011             (       ./smps.asm):01075                 bra   PSGDoVolFX
                      (       ./smps.asm):01076                 
B07F                  (       ./smps.asm):01077         PSGUpdateVolFX
B07F A628             (       ./smps.asm):01078                 lda   VoiceIndex,y
B081 2753             (       ./smps.asm):01079                 beq   PSGDoModulation
B083 E627             (       ./smps.asm):01080                 ldb   Volume,y
B085 F7B0BE           (       ./smps.asm):01081                 stb   DynVol+1          
B088 200F             (       ./smps.asm):01082                 bra   PSGFlutter
                      (       ./smps.asm):01083         
B08A                  (       ./smps.asm):01084         VolEnvHold
B08A A629             (       ./smps.asm):01085                 lda   VolFlutter,y             ; This just decrements the flutter to keep it in place; no more volume changes in this list
B08C 8002             (       ./smps.asm):01086                 suba  #2                       ; Put index back (before final volume value)
B08E A729             (       ./smps.asm):01087                 sta   VolFlutter,y             ; Loop back and update volume
                      (       ./smps.asm):01088                 
B090                  (       ./smps.asm):01089         PSGDoVolFX
B090 E627             (       ./smps.asm):01090                 ldb   Volume,y
B092 F7B0BE           (       ./smps.asm):01091                 stb   DynVol+1
B095 A628             (       ./smps.asm):01092                 lda   VoiceIndex,y
B097 271A             (       ./smps.asm):01093                 beq   PSGUpdateVol             ; If tone is zero, jump to PSGUpdateVol
                      (       ./smps.asm):01094                         
B099                  (       ./smps.asm):01095         PSGFlutter
B099 48               (       ./smps.asm):01096                 asla
B09A 8EB1D0           (       ./smps.asm):01097                 ldx   #PSG_FlutterTbl
B09D AE86             (       ./smps.asm):01098                 ldx   a,x
B09F A629             (       ./smps.asm):01099                 lda   VolFlutter,y
B0A1 6C29             (       ./smps.asm):01100                 inc   VolFlutter,y        
B0A3 A686             (       ./smps.asm):01101                 lda   a,x
B0A5 2A04             (       ./smps.asm):01102                 bpl   @a
B0A7 8180             (       ./smps.asm):01103                 cmpa  #$80
B0A9 27DF             (       ./smps.asm):01104                 beq   VolEnvHold
B0AB B7B0AF           (       ./smps.asm):01105         @a      sta   @b
B0AE CB00             (       ./smps.asm):01106                 addb  #0
     B0AF             (       ./smps.asm):01107         @b      equ   *-1
B0B0 F7B0BE           (       ./smps.asm):01108                 stb   DynVol+1
                      (       ./smps.asm):01109                         
B0B3                  (       ./smps.asm):01110         PSGUpdateVol                
B0B3 A6A4             (       ./smps.asm):01111                 lda   PlaybackControl,y
B0B5 8506             (       ./smps.asm):01112                 bita  #$06                     ; If either bit 1 ("track in rest") and 2 ("SFX overriding this track"), quit!
B0B7 261D             (       ./smps.asm):01113                 bne   PSGDoModulation          ; If so, branch           
B0B9 8510             (       ./smps.asm):01114                 bita  #$10                     ; Is bit 4 (10h) "do not attack next note" set on playback?
B0BB 2610             (       ./smps.asm):01115                 bne   @b                       ; If so, branch
B0BD C600             (       ./smps.asm):01116         DynVol  ldb   #0                       ; (dynamic) volume
B0BF C110             (       ./smps.asm):01117                 cmpb  #$10
B0C1 2502             (       ./smps.asm):01118                 blo   @a
B0C3 C60F             (       ./smps.asm):01119                 ldb   #$0F
B0C5 EB21             (       ./smps.asm):01120         @a      addb  VoiceControl,y
B0C7 CA10             (       ./smps.asm):01121                 orb   #$10
B0C9 D7FE             (       ./smps.asm):01122                 stb   <PSG
B0CB 2009             (       ./smps.asm):01123                 bra   PSGDoModulation        
B0CD A6A810           (       ./smps.asm):01124         @b      lda   NoteFillMaster,y         ; If you get here, then "do not attack next note" was set...
B0D0 27EB             (       ./smps.asm):01125                 beq   DynVol                   ; If it's zero, then just process normally
B0D2 A62F             (       ./smps.asm):01126                 lda   NoteFillTimeout,y        
B0D4 26E7             (       ./smps.asm):01127                 bne   DynVol                   ; If it's not zero, then just process normally
                      (       ./smps.asm):01128                 
B0D6                  (       ./smps.asm):01129         PSGDoModulation  
B0D6 A6A4             (       ./smps.asm):01130                 lda   PlaybackControl,y
B0D8 8502             (       ./smps.asm):01131                 bita  #$02                     ; Is bit 1 (02h) "track is at rest" set on playback?
B0DA 2701             (       ./smps.asm):01132                 beq   @a
B0DC 39               (       ./smps.asm):01133                 rts                            ; If so, quit        
B0DD 8508             (       ./smps.asm):01134         @a      bita  #$08                     ; Is bit 3 (08h) "modulation on" set on playback?
B0DF 2601             (       ./smps.asm):01135                 bne   @b
B0E1 39               (       ./smps.asm):01136                 rts                            ; If not, quit        
B0E2 A6A813           (       ./smps.asm):01137         @b      lda   ModulationWait,y         ; 'ww' period of time before modulation starts
B0E5 2704             (       ./smps.asm):01138                 beq   @c                       ; if zero, go to it!
B0E7 6AA813           (       ./smps.asm):01139                 dec   ModulationWait,y         ; Otherwise, decrement timer
B0EA 39               (       ./smps.asm):01140                 rts                            ; return if decremented
B0EB 6AA814           (       ./smps.asm):01141         @c      dec   ModulationSpeed,y        ; Decrement modulation speed counter
B0EE 2701             (       ./smps.asm):01142                 beq   @d
B0F0 39               (       ./smps.asm):01143                 rts                            ; Return if not yet zero
B0F1 AEA811           (       ./smps.asm):01144         @d      ldx   ModulationPtr,y
B0F4 A601             (       ./smps.asm):01145                 lda   1,x
B0F6 A7A814           (       ./smps.asm):01146                 sta   ModulationSpeed,y
B0F9 A6A816           (       ./smps.asm):01147                 lda   ModulationSteps,y
B0FC 2609             (       ./smps.asm):01148                 bne   @e
B0FE A603             (       ./smps.asm):01149                 lda   3,x
B100 A7A816           (       ./smps.asm):01150                 sta   ModulationSteps,y     
B103 60A815           (       ./smps.asm):01151                 neg   ModulationDelta,y
B106 39               (       ./smps.asm):01152                 rts                
B107 6AA816           (       ./smps.asm):01153         @e      dec   ModulationSteps,y
B10A E6A815           (       ./smps.asm):01154                 ldb   ModulationDelta,y
B10D 1D               (       ./smps.asm):01155                 sex
B10E E3A817           (       ./smps.asm):01156                 addd  ModulationVal,y
B111 EDA817           (       ./smps.asm):01157                 std   ModulationVal,y        
                      (       ./smps.asm):01158                       
B114                  (       ./smps.asm):01159         PSGUpdateFreq2
B114 E6A819           (       ./smps.asm):01160                 ldb   Detune,y
B117 1D               (       ./smps.asm):01161                 sex
B118 E32D             (       ./smps.asm):01162                 addd  NextData,y               ; apply detune but don't update stored frequency
B11A E3A817           (       ./smps.asm):01163                 addd  ModulationVal,y          ; add modulation effect
B11D FDB131           (       ./smps.asm):01164                 std   @dyn+1
B120 C40F             (       ./smps.asm):01165                 andb  #$0F                     ; Keep only lower four bits (first PSG reg write only applies d0-d3 of freq)
B122 A621             (       ./smps.asm):01166                 lda   VoiceControl,y
B124 81E0             (       ./smps.asm):01167                 cmpa  #$E0
B126 2604             (       ./smps.asm):01168                 bne   @a
B128 CBC0             (       ./smps.asm):01169                 addb  #$C0
B12A 2002             (       ./smps.asm):01170                 bra   @b
B12C EB21             (       ./smps.asm):01171         @a      addb  VoiceControl,y           ; Get "voice control" byte...
B12E D7FE             (       ./smps.asm):01172         @b      stb   <PSG
B130 CC0000           (       ./smps.asm):01173         @dyn    ldd   #0
                      (       ./smps.asm):01174                 _lsrd
B133 44               (            _lsrd):00001                 lsra
B134 56               (            _lsrd):00002                 rorb
                      (       ./smps.asm):01175                 _lsrd
B135 44               (            _lsrd):00001                 lsra
B136 56               (            _lsrd):00002                 rorb
                      (       ./smps.asm):01176                 _lsrd
B137 44               (            _lsrd):00001                 lsra
B138 56               (            _lsrd):00002                 rorb
                      (       ./smps.asm):01177                 _lsrd              
B139 44               (            _lsrd):00001                 lsra
B13A 56               (            _lsrd):00002                 rorb
B13B D7FE             (       ./smps.asm):01178                 stb   <PSG
B13D 39               (       ./smps.asm):01179                 rts        
                      (       ./smps.asm):01180          
                      (       ./smps.asm):01181         ; 70 notes (Note value $81=C3 $C7=G#8) with direct access
                      (       ./smps.asm):01182         ; (Note value $C8 is reserved for PSG3 to drive noise PSG4)
                      (       ./smps.asm):01183         ; Other notes can be accessed by transpose
B13E                  (       ./smps.asm):01184         PSGFrequencies
B13E 03F803C00388     (       ./smps.asm):01185                 fdb                                                         $03F8,$03C0,$0388 ; A2 - B2
B144 0356032702FA02CF (       ./smps.asm):01186                 fdb   $0356,$0327,$02FA,$02CF,$02A5,$0281,$025C,$023B,$021A,$01FC,$01E0,$01C4 ; C3 - B3
     02A50281025C023B
     021A01FC01E001C4
B15C 01AB0193017D0167 (       ./smps.asm):01187                 fdb   $01AB,$0193,$017D,$0167,$0152,$0140,$012E,$011D,$010D,$00FE,$00F0,$00E2 ; C4 - B4
     01520140012E011D
     010D00FE00F000E2
B174 00D500C900BE00B3 (       ./smps.asm):01188                 fdb   $00D5,$00C9,$00BE,$00B3,$00A9,$00A0,$0097,$008E,$0086,$007F,$0078,$0071 ; C5 - B5
     00A900A00097008E
     0086007F00780071
B18C 006A0064005F0059 (       ./smps.asm):01189                 fdb   $006A,$0064,$005F,$0059,$0054,$0050,$004B,$0047,$0043,$0040,$003C,$0039 ; C6 - B6
     00540050004B0047
     00430040003C0039
B1A4 00350032002F002C (       ./smps.asm):01190                 fdb   $0035,$0032,$002F,$002C,$002A,$0028,$0025,$0023,$0022,$0020,$001F,$001D ; C7 - B7
     002A002800250023
     00220020001F001D
B1BC 001A001900170016 (       ./smps.asm):01191                 fdb   $001A,$0019,$0017,$0016,$0015,$0014,$0012,$0011,$0010,$0001             ; C8 - G#8
     0015001400120011
     00100001
                      (       ./smps.asm):01192                 ; (Last 3 values are also used for channel 3 when driving noise channel. $0000 doesn't work for real SN76489 chip, so was replaced by $0001 value)
                      (       ./smps.asm):01193         
B1D0                  (       ./smps.asm):01194         PSG_FlutterTbl
                      (       ./smps.asm):01195             ; Basically, for any tone 0-11, dynamic volume adjustments are applied to produce a pseudo-decay,
                      (       ./smps.asm):01196             ; or sometimes a ramp up for "soft" sounds, or really any other volume effect you might want!
                      (       ./smps.asm):01197         
                      (       ./smps.asm):01198             ; Remember on PSG that the higher the value, the quieter it gets (it's attenuation, not volume);
                      (       ./smps.asm):01199             ; 0 is thus loudest, and increasing values decay, until level $F (silent)
B1D0 0000             (       ./smps.asm):01200                 fdb   0 ; saves a dec instruction in table lookup
B1D2 B1ECB203B20AB21B (       ./smps.asm):01201                 fdb   Flutter1,Flutter2,Flutter3,Flutter4
B1DA B226B235B25FB27B (       ./smps.asm):01202                 fdb   Flutter5,Flutter6,Flutter7,Flutter8
B1E2 B2A3B2B4B2F2B30E (       ./smps.asm):01203                 fdb   Flutter9,Flutter10,Flutter11,Flutter12
B1EA B38E             (       ./smps.asm):01204                 fdb   Flutter13
B1EC                  (       ./smps.asm):01205         Flutter1
B1EC 0000000101010202 (       ./smps.asm):01206                 fcb   0,0,0,1,1,1,2,2,2,3,3,3,4,4,4,5
     0203030304040405
B1FC 05050606060780   (       ./smps.asm):01207                 fcb   5,5,6,6,6,7,$80
B203                  (       ./smps.asm):01208         Flutter2
B203 00020406081080   (       ./smps.asm):01209                 fcb   0,2,4,6,8,$10,$80
B20A                  (       ./smps.asm):01210         Flutter3
B20A 0000010102020303 (       ./smps.asm):01211                 fcb   0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,$80
     0404050506060707
     80
B21B                  (       ./smps.asm):01212         Flutter4
B21B 0000020304040505 (       ./smps.asm):01213                 fcb   0,0,2,3,4,4,5,5,5,6,$80
     050680
B226                  (       ./smps.asm):01214         Flutter5
B226 0303030202020201 (       ./smps.asm):01215                 fcb   3,3,3,2,2,2,2,1,1,1,0,0,0,0,$80
     01010000000080
B235                  (       ./smps.asm):01216         Flutter6
B235 0000000000000000 (       ./smps.asm):01217                 fcb   0,0,0,0,0,0,0,0,0,0,1,1
     00000101
B241 0101010101010101 (       ./smps.asm):01218                 fcb   1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2
     0101010102020202
B251 0202020203030303 (       ./smps.asm):01219                 fcb   2,2,2,2,3,3,3,3,3,3,3,3,4,$80
     030303030480
B25F                  (       ./smps.asm):01220         Flutter7
B25F 0000000000000101 (       ./smps.asm):01221                 fcb   0,0,0,0,0,0,1,1,1,1,1,2,2,2,2,2
     0101010202020202
B26F 0303030404040505 (       ./smps.asm):01222                 fcb   3,3,3,4,4,4,5,5,5,6,7,$80
     05060780
B27B                  (       ./smps.asm):01223         Flutter8
B27B 0000000000010101 (       ./smps.asm):01224                 fcb   0,0,0,0,0,1,1,1,1,1,2,2,2,2,2,2
     0101020202020202
B28B 0303030303040404 (       ./smps.asm):01225                 fcb   3,3,3,3,3,4,4,4,4,4,5,5,5,5,5,6
     0404050505050506
B29B 0606060607070780 (       ./smps.asm):01226                 fcb   6,6,6,6,7,7,7,$80
B2A3                  (       ./smps.asm):01227         Flutter9
B2A3 0001020304050607 (       ./smps.asm):01228                 fcb   0,1,2,3,4,5,6,7,8,9,$0A,$0B,$0C,$0D,$0E,$0F,$80
     08090A0B0C0D0E0F
     80
B2B4                  (       ./smps.asm):01229         Flutter10
B2B4 0000000000000000 (       ./smps.asm):01230                 fcb   0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1
     0000010101010101
B2C4 0101010101010101 (       ./smps.asm):01231                 fcb   1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
     0101010101010101
B2D4 0101010101010101 (       ./smps.asm):01232                 fcb   1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2
     0202020202020202
B2E4 0202030303030303 (       ./smps.asm):01233                 fcb   2,2,3,3,3,3,3,3,3,3,3,3,4,$80
     030303030480
B2F2                  (       ./smps.asm):01234         Flutter11
B2F2 0404040303030202 (       ./smps.asm):01235                 fcb   4,4,4,3,3,3,2,2,2,1,1,1,1,1,1,1
     0201010101010101
B302 0202020202030303 (       ./smps.asm):01236                 fcb   2,2,2,2,2,3,3,3,3,3,4,$80
     03030480
B30E                  (       ./smps.asm):01237         Flutter12
B30E 0404030302020101 (       ./smps.asm):01238                 fcb   4,4,3,3,2,2,1,1,1,1,1,1,1,1,1,1
     0101010101010101
B31E 0101010101010101 (       ./smps.asm):01239                 fcb   1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2
     0101020202020202
B32E 0202020202020202 (       ./smps.asm):01240                 fcb   2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3
     0202020202020303
B33E 0303030303030303 (       ./smps.asm):01241                 fcb   3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
     0303030303030303
B34E 0303040404040404 (       ./smps.asm):01242                 fcb   3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4
     0404040404040404
B35E 0404040404040505 (       ./smps.asm):01243                 fcb   4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5
     0505050505050505
B36E 0505050505050505 (       ./smps.asm):01244                 fcb   5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6
     0505060606060606
B37E 0606060606060606 (       ./smps.asm):01245                 fcb   6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,$80
     0606060606060780
B38E                  (       ./smps.asm):01246         Flutter13
B38E 0E0D0C0B0A090807 (       ./smps.asm):01247                 fcb   $0E,$0D,$0C,$0B,$0A,9,8,7,6,5,4,3,2,1,0,$80
     0605040302010080
                      (       ./smps.asm):01248         
                      (       ./smps.asm):01249         ;   END of PSG_FlutterTbl ---------------------------                 
                      (       ./smps.asm):01250                   
                      (       ./smps.asm):01251         ******************************************************************************
                      (       ./smps.asm):01252         * PlaySound - Load and play a new sound effect
                      (       ./smps.asm):01253         *
                      (       ./smps.asm):01254         * receives in X the address of the sound
                      (       ./smps.asm):01255         * destroys X
                      (       ./smps.asm):01256         ******************************************************************************          
                      (       ./smps.asm):01257         
B39E                  (       ./smps.asm):01258         SFXTrackOffs        
B39E A969             (       ./smps.asm):01259                 fdb   SFXFM3                   ; identified by Track id 8002 in smps sfx file (for Sonic 2 compatibility)
B3A0 A969             (       ./smps.asm):01260                 fdb   SFXFM3                   ; identified by Track id 8003 in smps sfx file        
B3A2 A993             (       ./smps.asm):01261                 fdb   SFXFM4                   ; identified by Track id 8004 in smps sfx file        
B3A4 A9BD             (       ./smps.asm):01262                 fdb   SFXFM5                   ; identified by Track id 8005 in smps sfx file
B3A6 A9E7             (       ./smps.asm):01263                 fdb   SFXPSG1                  ; identified by Track id 8080 in smps sfx file
B3A8 AA11             (       ./smps.asm):01264                 fdb   SFXPSG2                  ; identified by Track id 80A0 in smps sfx file
B3AA AA3B             (       ./smps.asm):01265                 fdb   SFXPSG3                  ; identified by Track id 80C0 in smps sfx file
B3AC AA3B             (       ./smps.asm):01266                 fdb   SFXPSG3                  ; identified by Track id 80E0 in smps sfx file
                      (       ./smps.asm):01267         
B3AE                  (       ./smps.asm):01268         MusicTrackOffs
B3AE A79B             (       ./smps.asm):01269                 fdb   SongFM2
B3B0 A7C5             (       ./smps.asm):01270                 fdb   SongFM3        
B3B2 A7EF             (       ./smps.asm):01271                 fdb   SongFM4        
B3B4 A819             (       ./smps.asm):01272                 fdb   SongFM5
B3B6 A8EB             (       ./smps.asm):01273                 fdb   SongPSG1
B3B8 A915             (       ./smps.asm):01274                 fdb   SongPSG2
B3BA A93F             (       ./smps.asm):01275                 fdb   SongPSG3
B3BC A93F             (       ./smps.asm):01276                 fdb   SongPSG3
                      (       ./smps.asm):01277         
B3BE                  (       ./smps.asm):01278         PlaySound
B3BE 3466             (       ./smps.asm):01279                 pshs  d,y,u
                      (       ./smps.asm):01280         
                      (       ./smps.asm):01281                 ;_GetCartPageA
                      (       ./smps.asm):01282                 ;sta   PlaySound_end+1          ; backup data page
                      (       ./smps.asm):01283                 ;lda   ,x                       ; get memory page that contains track data
                      (       ./smps.asm):01284                 ;sta   SoundPage
                      (       ./smps.asm):01285                 ;ldx   1,x                      ; get ptr to track data
B3C0 BFAA6D           (       ./smps.asm):01286                 stx   SoundData
                      (       ./smps.asm):01287                 ;_SetCartPageA
                      (       ./smps.asm):01288                 
B3C3 EC84             (       ./smps.asm):01289                 ldd   SMPS_SFX_VOICE,x
B3C5 F3AA6D           (       ./smps.asm):01290                 addd  SoundData   
B3C8 FDA73C           (       ./smps.asm):01291                 std   Smps.SFXVoiceTblPtr
                      (       ./smps.asm):01292         
B3CB EC02             (       ./smps.asm):01293                 ldd   SMPS_SFX_TEMPO_NB_CH,x   ; init process for each track
B3CD B7B442           (       ./smps.asm):01294                 sta   @dyna+2        
B3D0 F7B468           (       ./smps.asm):01295                 stb   PS_cnt
B3D3 3004             (       ./smps.asm):01296                 leax  SMPS_SFX_HDR_LEN,x        
B3D5 CEB3AE           (       ./smps.asm):01297         @a      ldu   #MusicTrackOffs
B3D8 EC84             (       ./smps.asm):01298                 ldd   SMPS_SFX_TRK_CH,x        ; read playbackcontrol and voice id
B3DA FDB448           (       ./smps.asm):01299                 std   @dynb+1
B3DD 5D               (       ./smps.asm):01300                 tstb
B3DE 2B08             (       ./smps.asm):01301                 bmi   @psg
B3E0 C002             (       ./smps.asm):01302                 subb  #2                       ; this is an fm track
B3E2 58               (       ./smps.asm):01303                 aslb                           ; transform track ref to an index: $02,$04,$05 => 0,4,6
B3E3 10AEC5           (       ./smps.asm):01304                 ldy   b,u    
B3E6 2013             (       ./smps.asm):01305                 bra   @c
B3E8 C1C0             (       ./smps.asm):01306         @psg    cmpb  #$C0
B3EA 2608             (       ./smps.asm):01307                 bne   @b
B3EC 86DF             (       ./smps.asm):01308                 lda   #$DF                     ; set silence on PSG3
B3EE 97FE             (       ./smps.asm):01309                 sta   <PSG
B3F0 86FF             (       ./smps.asm):01310                 lda   #$FF
B3F2 97FE             (       ./smps.asm):01311                 sta   <PSG
B3F4 54               (       ./smps.asm):01312         @b      lsrb                           ; this is a psg track
B3F5 54               (       ./smps.asm):01313                 lsrb
B3F6 54               (       ./smps.asm):01314                 lsrb
B3F7 54               (       ./smps.asm):01315                 lsrb                           ; transform track ref to an index: $80,$A0,$C0,$E0 => 8,10,12,14
B3F8 10AEC5           (       ./smps.asm):01316                 ldy   b,u    
B3FB A6A4             (       ./smps.asm):01317         @c      lda   PlaybackControl,y        ; y (hl) ptr to Music Track
B3FD 8A04             (       ./smps.asm):01318                 ora   #$04                     ; Set "SFX is overriding this track!" bit
B3FF A7A4             (       ./smps.asm):01319                 sta   PlaybackControl,y
B401 CEB39E           (       ./smps.asm):01320                 ldu   #SFXTrackOffs
B404 EEC5             (       ./smps.asm):01321                 ldu   b,u                      ; u (ix) ptr to SFX Track
B406 CC0000           (       ./smps.asm):01322                 ldd   #0                       ; clear SFX Track
B409 EDC4             (       ./smps.asm):01323                 std   ,u
B40B ED42             (       ./smps.asm):01324                 std   2,u
B40D ED44             (       ./smps.asm):01325                 std   4,u
B40F ED46             (       ./smps.asm):01326                 std   6,u
B411 ED48             (       ./smps.asm):01327                 std   8,u
B413 ED4A             (       ./smps.asm):01328                 std   10,u
B415 ED4C             (       ./smps.asm):01329                 std   12,u
B417 ED4E             (       ./smps.asm):01330                 std   14,u
B419 EDC810           (       ./smps.asm):01331                 std   16,u
B41C EDC812           (       ./smps.asm):01332                 std   18,u
B41F EDC814           (       ./smps.asm):01333                 std   20,u
B422 EDC816           (       ./smps.asm):01334                 std   22,u
B425 EDC818           (       ./smps.asm):01335                 std   24,u
B428 EDC81A           (       ./smps.asm):01336                 std   26,u
B42B EDC81C           (       ./smps.asm):01337                 std   28,u
B42E EDC81E           (       ./smps.asm):01338                 std   30,u
B431 EDC820           (       ./smps.asm):01339                 std   32,u
B434 EDC822           (       ./smps.asm):01340                 std   34,u
B437 EDC824           (       ./smps.asm):01341                 std   36,u
B43A EDC826           (       ./smps.asm):01342                 std   38,u
B43D EDC828           (       ./smps.asm):01343                 std   40,u
B440 CC0100           (       ./smps.asm):01344         @dyna   ldd   #$0100                   ; (dynamic) TempoDivider
B443 A74B             (       ./smps.asm):01345                 sta   DurationTimeout,u        ; current duration timeout to 1 (will expire immediately and thus update)
B445 E743             (       ./smps.asm):01346                 stb   TempoDivider,u
B447 CC0000           (       ./smps.asm):01347         @dynb   ldd   #0                       ; (dynamic)
B44A A7C4             (       ./smps.asm):01348                 sta   PlaybackControl,u
B44C E741             (       ./smps.asm):01349                 stb   VoiceControl,u
B44E C62A             (       ./smps.asm):01350                 ldb   #GoSubStack
B450 E74A             (       ./smps.asm):01351                 stb   StackPointer,u           ; Reset track "gosub" stack
B452 EC02             (       ./smps.asm):01352                 ldd   SMPS_SFX_TRK_DATA_PTR,x 
B454 F3AA6D           (       ./smps.asm):01353                 addd  SoundData
B457 ED44             (       ./smps.asm):01354                 std   DataPointer,u
B459 EC04             (       ./smps.asm):01355                 ldd   SMPS_SFX_TRK_TR_VOL_PTR,x
B45B ED46             (       ./smps.asm):01356                 std   TranspAndVolume,u        
B45D 3006             (       ./smps.asm):01357                 leax  SMPS_SFX_TRK_HDR_LEN,x
B45F 7AB468           (       ./smps.asm):01358                 dec   PS_cnt    
B462 1026FF6F         (       ./smps.asm):01359                 lbne  @a  
                      (       ./smps.asm):01360         
B466                  (       ./smps.asm):01361         PlaySound_end
                      (       ./smps.asm):01362                 ;lda   #0
                      (       ./smps.asm):01363                 ;_SetCartPageA          
B466 35E6             (       ./smps.asm):01364                 puls  d,y,u,pc
                      (       ./smps.asm):01365         
B468 00               (       ./smps.asm):01366         PS_cnt  fcb   0
                      (       ./smps.asm):01367                 
                      (       ./smps.asm):01368         ******************************************************************************
                      (       ./smps.asm):01369         * CoordFlag
                      (       ./smps.asm):01370         ******************************************************************************
                      (       ./smps.asm):01371         
B469                  (       ./smps.asm):01372         CoordFlag
B469 C0E0             (       ./smps.asm):01373                 subb  #$E0
B46B 58               (       ./smps.asm):01374                 aslb
B46C CEB471           (       ./smps.asm):01375                 ldu   #CoordFlagLookup
B46F 6ED5             (       ./smps.asm):01376                 jmp   [b,u] 
                      (       ./smps.asm):01377         
B471                  (       ./smps.asm):01378         CoordFlagLookup
B471 B694             (       ./smps.asm):01379                 fdb   cfSkip1               ; E0 -- unsupported (panning)
B473 B4B1             (       ./smps.asm):01380                 fdb   cfDetune              ; E1 -- done
B475 B694             (       ./smps.asm):01381                 fdb   cfSkip1               ; E2 -- unsupported
B477 B4C7             (       ./smps.asm):01382                 fdb   cfJumpReturn          ; E3 -- done
B479 B4D0             (       ./smps.asm):01383                 fdb   cfFadeInToPrevious    ; E4 --todo
B47B B4D1             (       ./smps.asm):01384                 fdb   cfSetTempoDivider     ; E5 -- done
B47D B4D6             (       ./smps.asm):01385                 fdb   cfChangeFMVolume      ; E6 -- done
B47F B503             (       ./smps.asm):01386                 fdb   cfPreventAttack       ; E7 -- done
B481 B50A             (       ./smps.asm):01387                 fdb   cfNoteFill            ; E8 -- done
B483 B512             (       ./smps.asm):01388                 fdb   cfChangeTransposition ; E9 -- done
B485 B519             (       ./smps.asm):01389                 fdb   cfSetTempo            ; EA -- done
B487 B51F             (       ./smps.asm):01390                 fdb   cfSetTempoMod         ; EB -- done
B489 B53D             (       ./smps.asm):01391                 fdb   cfChangePSGVolume     ; EC -- done
B48B B696             (       ./smps.asm):01392                 fdb   cfNop                 ; ED -- unsupported
B48D B696             (       ./smps.asm):01393                 fdb   cfNop                 ; EE -- unsupported
B48F B544             (       ./smps.asm):01394                 fdb   cfSetVoice            ; EF -- done
B491 B58A             (       ./smps.asm):01395                 fdb   cfModulation          ; F0 -- done
B493 B5AE             (       ./smps.asm):01396                 fdb   cfEnableModulation    ; F1 -- done
B495 B5B5             (       ./smps.asm):01397                 fdb   cfStopTrack           ; F2 -- done
B497 B64A             (       ./smps.asm):01398                 fdb   cfSetPSGNoise         ; F3 -- done
B499 B65C             (       ./smps.asm):01399                 fdb   cfDisableModulation   ; F4 -- done
B49B B663             (       ./smps.asm):01400                 fdb   cfSetPSGTone          ; F5 -- done
B49D B668             (       ./smps.asm):01401                 fdb   cfJumpTo              ; F6 -- done
B49F B66D             (       ./smps.asm):01402                 fdb   cfRepeatAtPos         ; F7 -- done
B4A1 B685             (       ./smps.asm):01403                 fdb   cfJumpToGosub         ; F8 -- done
B4A3 B696             (       ./smps.asm):01404                 fdb   cfNop                 ; F9 -- unsupported
B4A5 B696             (       ./smps.asm):01405                 fdb   cfNop                 ; FA -- free
B4A7 B696             (       ./smps.asm):01406                 fdb   cfNop                 ; FB -- free
B4A9 B696             (       ./smps.asm):01407                 fdb   cfNop                 ; FC -- free
B4AB B696             (       ./smps.asm):01408                 fdb   cfNop                 ; FD -- free
B4AD B696             (       ./smps.asm):01409                 fdb   cfNop                 ; FE -- free
B4AF B696             (       ./smps.asm):01410                 fdb   cfNop                 ; FF -- free
                      (       ./smps.asm):01411         
                      (       ./smps.asm):01412         ; (via Saxman's doc): Alter note values by xx
                      (       ./smps.asm):01413         ; More or less a pitch bend; this is applied to the frequency as a signed value
                      (       ./smps.asm):01414         ;              
B4B1                  (       ./smps.asm):01415         cfDetune
B4B1 A680             (       ./smps.asm):01416                 lda   ,x+
                      (       ./smps.asm):01417                 ; this should be replaced by a conversion of the smps music file
                      (       ./smps.asm):01418                 ; here to play sonic2 files only
B4B3 E621             (       ./smps.asm):01419                 ldb   VoiceControl,y           ; read channel nb
B4B5 2B0C             (       ./smps.asm):01420                 bmi   @a                       ; Is voice control bit 7 (80h) a PSG track set?        
B4B7 47               (       ./smps.asm):01421                 asra                           ; ratio freq btw YM2612 and YM2413 is 3.73, so tame a bit (/3)
B4B8 B7B4C0           (       ./smps.asm):01422                 sta   @dyna+1
B4BB 47               (       ./smps.asm):01423                 asra        
B4BC B7B4C2           (       ./smps.asm):01424                 sta   @dynb+1
B4BF 8600             (       ./smps.asm):01425         @dyna   lda   #0           
B4C1 8000             (       ./smps.asm):01426         @dynb   suba  #0         
                      (       ./smps.asm):01427                 ; end of tmp code
B4C3 A7A819           (       ./smps.asm):01428         @a      sta   Detune,y
B4C6 39               (       ./smps.asm):01429                 rts           
                      (       ./smps.asm):01430         
                      (       ./smps.asm):01431         ; Return (Sonic 1 & 2)
                      (       ./smps.asm):01432         ;
B4C7                  (       ./smps.asm):01433         cfJumpReturn
B4C7 A62A             (       ./smps.asm):01434                 lda   StackPointer,y           ; retrieve stack ptr
B4C9 AEA6             (       ./smps.asm):01435                 ldx   a,y                      ; load return address
B4CB 8B02             (       ./smps.asm):01436                 adda  #2                       
B4CD A72A             (       ./smps.asm):01437                 sta   StackPointer,y           ; free stack position
B4CF 39               (       ./smps.asm):01438                 rts         
                      (       ./smps.asm):01439                 
B4D0                  (       ./smps.asm):01440         cfFadeInToPrevious
B4D0 39               (       ./smps.asm):01441                 rts   
                      (       ./smps.asm):01442         
                      (       ./smps.asm):01443         ; Change tempo divider to xx
                      (       ./smps.asm):01444         ;        
B4D1                  (       ./smps.asm):01445         cfSetTempoDivider
B4D1 A680             (       ./smps.asm):01446                 lda   ,x+
B4D3 A723             (       ./smps.asm):01447                 sta   TempoDivider,y
B4D5 39               (       ./smps.asm):01448                 rts    
                      (       ./smps.asm):01449                 
                      (       ./smps.asm):01450         ; (via Saxman's doc): Change channel volume BY xx; xx is signed
                      (       ./smps.asm):01451         ;
B4D6                  (       ./smps.asm):01452         cfChangeFMVolume
B4D6 A627             (       ./smps.asm):01453                 lda   Volume,y                 ; apply volume attenuation change
B4D8 AB80             (       ./smps.asm):01454                 adda  ,x+
B4DA A727             (       ./smps.asm):01455                 sta   Volume,y
B4DC E6A4             (       ./smps.asm):01456                 ldb   PlaybackControl,y
B4DE C504             (       ./smps.asm):01457                 bitb  #$04                     ; Is bit 2 (04h) Is SFX overriding this track?
B4E0 2620             (       ./smps.asm):01458                 bne   @rts        
B4E2 44               (       ./smps.asm):01459                 lsra                           ; volume attenuation is unsigned
B4E3 44               (       ./smps.asm):01460                 lsra
B4E4 44               (       ./smps.asm):01461                 lsra
B4E5 B7B4F9           (       ./smps.asm):01462                 sta   @dyn1+1
B4E8 8630             (       ./smps.asm):01463                 lda   #$30
B4EA AB21             (       ./smps.asm):01464                 adda  VoiceControl,y
B4EC 97FC             (       ./smps.asm):01465                 sta   <YM2413_A0
B4EE E6A81F           (       ./smps.asm):01466                 ldb   InstrAndVolume,y         
B4F1 1F98             (       ./smps.asm):01467                 tfr   b,a
B4F3 8A0F             (       ./smps.asm):01468                 ora   #$0F                     ; set maximum attenuation for compare        
B4F5 B7B4FB           (       ./smps.asm):01469                 sta   @dyn2+1
B4F8 CB00             (       ./smps.asm):01470         @dyn1   addb  #0                       ; (dynamic) add global volume attenuation to actual voice
B4FA C100             (       ./smps.asm):01471         @dyn2   cmpb  #0                       ; (dynamic) test if overflow of attenuation value
B4FC 2502             (       ./smps.asm):01472                 blo   @write                   ; attenuation < F and no overflow
B4FE 1F89             (       ./smps.asm):01473                 tfr   a,b                      ; set maximum attenuation (F)
B500 D7FD             (       ./smps.asm):01474         @write  stb   <YM2413_D0        
B502 39               (       ./smps.asm):01475         @rts    rts     
                      (       ./smps.asm):01476         
B503                  (       ./smps.asm):01477         cfPreventAttack
B503 A6A4             (       ./smps.asm):01478                 lda   PlaybackControl,y
B505 8A10             (       ./smps.asm):01479                 ora   #$10
B507 A7A4             (       ./smps.asm):01480                 sta   PlaybackControl,y        ; Set bit 4 (10h) on playback control; do not attack next note
B509 39               (       ./smps.asm):01481                 rts      
                      (       ./smps.asm):01482         
                      (       ./smps.asm):01483         ; (via Saxman's doc): set note fill amount to xx
                      (       ./smps.asm):01484         ;
B50A                  (       ./smps.asm):01485         cfNoteFill 
B50A A680             (       ./smps.asm):01486                 lda   ,x+
B50C A72F             (       ./smps.asm):01487                 sta   NoteFillTimeout,y
B50E A7A810           (       ./smps.asm):01488                 sta   NoteFillMaster,y
B511 39               (       ./smps.asm):01489                 rts          
                      (       ./smps.asm):01490         
                      (       ./smps.asm):01491         ; (via Saxman's doc): add xx to channel key
                      (       ./smps.asm):01492         ;
B512                  (       ./smps.asm):01493         cfChangeTransposition
B512 A626             (       ./smps.asm):01494                 lda   Transpose,y
B514 AB80             (       ./smps.asm):01495                 adda  ,x+
B516 A726             (       ./smps.asm):01496                 sta   Transpose,y
B518 39               (       ./smps.asm):01497                 rts
                      (       ./smps.asm):01498         
                      (       ./smps.asm):01499         ; (via Saxman's doc): set music tempo to xx
                      (       ./smps.asm):01500         ;
B519                  (       ./smps.asm):01501         cfSetTempo 
B519 A680             (       ./smps.asm):01502                 lda   ,x+
B51B B7A733           (       ./smps.asm):01503                 sta   Smps.CurrentTempo
B51E 39               (       ./smps.asm):01504                 rts          
                      (       ./smps.asm):01505         
                      (       ./smps.asm):01506         ; (via Saxman's doc): Change Tempo Modifier to xx for ALL channels
                      (       ./smps.asm):01507         ;
B51F                  (       ./smps.asm):01508         cfSetTempoMod
B51F A680             (       ./smps.asm):01509                 lda   ,x+
B521 B7A74A           (       ./smps.asm):01510                 sta   SongDAC.TempoDivider
B524 B7A774           (       ./smps.asm):01511                 sta   SongFM1.TempoDivider
B527 B7A79E           (       ./smps.asm):01512                 sta   SongFM2.TempoDivider
B52A B7A7C8           (       ./smps.asm):01513                 sta   SongFM3.TempoDivider
B52D B7A7F2           (       ./smps.asm):01514                 sta   SongFM4.TempoDivider
B530 B7A81C           (       ./smps.asm):01515                 sta   SongFM5.TempoDivider
                      (       ./smps.asm):01516                 ;sta   SongFM6.TempoDivider
                      (       ./smps.asm):01517                 ;sta   SongFM7.TempoDivider
                      (       ./smps.asm):01518                 ;sta   SongFM8.TempoDivider
                      (       ./smps.asm):01519                 ;sta   SongFM9.TempoDivider        
B533 B7A8EE           (       ./smps.asm):01520                 sta   SongPSG1.TempoDivider
B536 B7A918           (       ./smps.asm):01521                 sta   SongPSG2.TempoDivider
B539 B7A942           (       ./smps.asm):01522                 sta   SongPSG3.TempoDivider
                      (       ./smps.asm):01523                 ;sta   SongPSG4.TempoDivider        
B53C 39               (       ./smps.asm):01524                 rts        
                      (       ./smps.asm):01525         
B53D                  (       ./smps.asm):01526         cfChangePSGVolume
B53D A627             (       ./smps.asm):01527                 lda   Volume,y
B53F AB80             (       ./smps.asm):01528                 adda  ,x+
B541 A727             (       ./smps.asm):01529                 sta   Volume,y
B543 39               (       ./smps.asm):01530                 rts    
                      (       ./smps.asm):01531                 
                      (       ./smps.asm):01532         ; (via Saxman's doc): set voice selection to xx
                      (       ./smps.asm):01533         ;
B544                  (       ./smps.asm):01534         cfSetVoice
B544 E680             (       ./smps.asm):01535                 ldb   ,x+
B546 E728             (       ./smps.asm):01536                 stb   VoiceIndex,y             ; save voice index to restore voice after sfx        
B548 A6A4             (       ./smps.asm):01537                 lda   PlaybackControl,y
B54A 8504             (       ./smps.asm):01538                 bita  #$04                     ; Is bit 2 (04h) Is SFX overriding this track?
B54C 263B             (       ./smps.asm):01539                 bne   @rts                     ; yes skip YM command
B54E B6AA66           (       ./smps.asm):01540                 lda   DoSFXFlag
B551 2B05             (       ./smps.asm):01541                 bmi   @a
B553 FEA73A           (       ./smps.asm):01542                 ldu   Smps.VoiceTblPtr
B556 2003             (       ./smps.asm):01543                 bra   @b
B558 FEA73C           (       ./smps.asm):01544         @a      ldu   Smps.SFXVoiceTblPtr
B55B                  (       ./smps.asm):01545         @b        
B55B A621             (       ./smps.asm):01546                 lda   VoiceControl,y           ; read channel nb   
B55D 8B30             (       ./smps.asm):01547                 adda  #$30
B55F 97FC             (       ./smps.asm):01548                 sta   <YM2413_A0
B561 58               (       ./smps.asm):01549                 aslb
B562 ECC5             (       ./smps.asm):01550                 ldd   b,u
B564 A7A81F           (       ./smps.asm):01551                 sta   InstrAndVolume,y        
B567 E7A81E           (       ./smps.asm):01552                 stb   InstrTranspose,y
B56A E627             (       ./smps.asm):01553                 ldb   Volume,y                 ; apply current track attenuation to voice
B56C 54               (       ./smps.asm):01554                 lsrb                           ; volume attenuation is unsigned
B56D 54               (       ./smps.asm):01555                 lsrb
B56E 54               (       ./smps.asm):01556                 lsrb
B56F F7B580           (       ./smps.asm):01557                 stb   @dyn1+1
B572 C630             (       ./smps.asm):01558                 ldb   #$30
B574 EB21             (       ./smps.asm):01559                 addb  VoiceControl,y
B576 D7FC             (       ./smps.asm):01560                 stb   <YM2413_A0
B578 1F89             (       ./smps.asm):01561                 tfr   a,b
B57A CA0F             (       ./smps.asm):01562                 orb   #$0F                     ; set maximum attenuation for compare        
B57C F7B582           (       ./smps.asm):01563                 stb   @dyn2+1
B57F 8B00             (       ./smps.asm):01564         @dyn1   adda  #0                       ; (dynamic) add global volume attenuation
B581 8100             (       ./smps.asm):01565         @dyn2   cmpa  #0                       ; (dynamic) test if overflow of attenuation value
B583 2502             (       ./smps.asm):01566                 blo   @write                   ; attenuation < F and no overflow
B585 1F98             (       ./smps.asm):01567                 tfr   b,a                      ; set maximum attenuation (F)
B587 97FD             (       ./smps.asm):01568         @write  sta   <YM2413_D0     
B589 39               (       ./smps.asm):01569         @rts    rts
                      (       ./smps.asm):01570         
                      (       ./smps.asm):01571         ; (via Saxman's doc): F0wwxxyyzz - modulation
                      (       ./smps.asm):01572         ; o        ww - Wait for ww period of time before modulation starts
                      (       ./smps.asm):01573         ; o        xx - Modulation Speed
                      (       ./smps.asm):01574         ; o        yy - Modulation change per Mod. Step
                      (       ./smps.asm):01575         ; o        zz - Number of steps in modulation
                      (       ./smps.asm):01576         ;
B58A                  (       ./smps.asm):01577         cfModulation
B58A A6A4             (       ./smps.asm):01578                 lda   PlaybackControl,y
B58C 8A08             (       ./smps.asm):01579                 ora   #$08
B58E A7A4             (       ./smps.asm):01580                 sta   PlaybackControl,y        ; Set bit 3 (08h) of "playback control" byte (modulation on)
B590 AFA811           (       ./smps.asm):01581                 stx   ModulationPtr,y          ; Back up modulation setting address
B593                  (       ./smps.asm):01582         SetModulation
B593 EC81             (       ./smps.asm):01583                 ldd   ,x++                     ; also read ModulationSpeed
B595 EDA813           (       ./smps.asm):01584                 std   ModulationWait,y         ; also write ModulationSpeed
B598 EC81             (       ./smps.asm):01585                 ldd   ,x++                     ; also read ModulationSteps
B59A A7A815           (       ./smps.asm):01586                 sta   ModulationDelta,y        
B59D 54               (       ./smps.asm):01587                 lsrb                           ; divide number of steps by 2
B59E E7A816           (       ./smps.asm):01588                 stb   ModulationSteps,y
B5A1 A6A4             (       ./smps.asm):01589                 lda   PlaybackControl,y
B5A3 8510             (       ./smps.asm):01590                 bita  #$10                     ; Is bit 4 "do not attack next note" (10h) set?
B5A5 2606             (       ./smps.asm):01591                 bne   @a                       ; If so, quit!
B5A7 CC0000           (       ./smps.asm):01592                 ldd   #0
B5AA EDA817           (       ./smps.asm):01593                 std   ModulationVal,y          ; Clear modulation value
B5AD 39               (       ./smps.asm):01594         @a      rts         
                      (       ./smps.asm):01595         
                      (       ./smps.asm):01596         ; (via Saxman's doc): Turn on modulation
                      (       ./smps.asm):01597         ;
B5AE                  (       ./smps.asm):01598         cfEnableModulation
B5AE A6A4             (       ./smps.asm):01599                 lda   PlaybackControl,y
B5B0 8A08             (       ./smps.asm):01600                 ora   #$08
B5B2 A7A4             (       ./smps.asm):01601                 sta   PlaybackControl,y        ; Set bit 3 (08h) of "playback control" byte (modulation on)
B5B4 39               (       ./smps.asm):01602                 rts   
                      (       ./smps.asm):01603         
                      (       ./smps.asm):01604         ; (via Saxman's doc): stop the track
                      (       ./smps.asm):01605         ;
B5B5                  (       ./smps.asm):01606         cfStopTrack
B5B5 A6A4             (       ./smps.asm):01607                 lda   PlaybackControl,y
B5B7 846F             (       ./smps.asm):01608                 anda  #$6F                     ; clear playback byte bit 7 (80h) -- currently playing (not anymore)
B5B9 A7A4             (       ./smps.asm):01609                 sta   PlaybackControl,y        ; clear playback byte bit 4 (10h) -- do not attack
                      (       ./smps.asm):01610                 
B5BB E621             (       ./smps.asm):01611                 ldb   VoiceControl,y           ; read channel nb
B5BD 2B12             (       ./smps.asm):01612                 bmi   @a                       ; Is voice control bit 7 (80h) a PSG track set?
                      (       ./smps.asm):01613                 _FMNoteOff                     ; (dependency) should be preceded by A loaded with PlaybackControl,y and B with VoiceControl,y               
B5BF 8504             (       _FMNoteOff):00001                 bita  #$04                     ; Is SFX overriding set?
B5C1 260C             (       _FMNoteOff):00002                 bne   @skip                    ; if true skip note off, sfx is playing        
B5C3 CB20             (       _FMNoteOff):00003                 addb  #$20                     ; set Sus/Key/Block/FNum(MSB) Command
B5C5 D7FC             (       _FMNoteOff):00004                 stb   <YM2413_A0
B5C7 E622             (       _FMNoteOff):00005                 ldb   NoteControl,y            ; load current value (do not erase FNum MSB)
B5C9 C4EF             (       _FMNoteOff):00006                 andb  #$EF                     ; clear bit 4 (10h) Key Off
B5CB D7FD             (       _FMNoteOff):00007                 stb   <YM2413_D0               ; send to YM
B5CD E722             (       _FMNoteOff):00008                 stb   NoteControl,y               
     B5CF             (       _FMNoteOff):00009         @skip   equ   *        
B5CF 2008             (       ./smps.asm):01614                 bra   @b
B5D1                  (       ./smps.asm):01615         @a      _PSGNoteOff                    ; (dependency) should be preceded by A loaded with PlaybackControl,y and B with VoiceControl,y
B5D1 8504             (      _PSGNoteOff):00001                 bita  #$04                     ; Is SFX overriding set?
B5D3 2604             (      _PSGNoteOff):00002                 bne   @skip                    ; if true skip note off, sfx is playing               
B5D5 CA1F             (      _PSGNoteOff):00003                 orb   #$1F                     ; Volume Off
B5D7 D7FE             (      _PSGNoteOff):00004                 stb   <PSG
     B5D9             (      _PSGNoteOff):00005         @skip   equ   *        
B5D9 B6AA66           (       ./smps.asm):01616         @b      lda   DoSFXFlag
B5DC 2B03             (       ./smps.asm):01617                 bmi   @d
B5DE 3540             (       ./smps.asm):01618         @rts    puls  u                        ; removing return address from stack; will not return to coord flag loop
B5E0 39               (       ./smps.asm):01619                 rts
B5E1 A621             (       ./smps.asm):01620         @d      lda   VoiceControl,y           ; this is SFX Track
B5E3 102B0044         (       ./smps.asm):01621                 lbmi  @psgsfx
B5E7 CEB3AE           (       ./smps.asm):01622                 ldu   #MusicTrackOffs          ; get back the overriden music track
B5EA 8002             (       ./smps.asm):01623                 suba  #2
B5EC 48               (       ./smps.asm):01624                 asla                           ; transform track ref to an index: $02,$04,$05 => 0,4,6
B5ED EEC6             (       ./smps.asm):01625                 ldu   a,u                      ; U ptr to same FM track ID than SFX but for Music, Y still for FM SFX Track
B5EF A6C4             (       ./smps.asm):01626                 lda   PlaybackControl,u
B5F1 8504             (       ./smps.asm):01627                 bita  #$04                     ; Is bit 2 (04h) Is SFX overriding this track?
B5F3 27E9             (       ./smps.asm):01628                 beq   @rts                     ; if not skip this part (i.e. if SFX was not overriding this track, then nothing to restore)
B5F5 84FB             (       ./smps.asm):01629                 anda  #$FB                     ; Clear SFX is overriding this track from playback control
B5F7 8A02             (       ./smps.asm):01630                 ora   #$02                     ; Set bit 1 (track is at rest)
B5F9 A7C4             (       ./smps.asm):01631                 sta   PlaybackControl,u
                      (       ./smps.asm):01632                 ;lda   MusicPage
                      (       ./smps.asm):01633                 ;_SetCartPageA        
B5FB BEA73A           (       ./smps.asm):01634                 ldx   Smps.VoiceTblPtr       ; Restore Voice to music channel (x can be erased because we are stopping track read)        
B5FE E648             (       ./smps.asm):01635                 ldb   VoiceIndex,u
B600 A641             (       ./smps.asm):01636                 lda   VoiceControl,u           ; read channel nb  
B602 8B30             (       ./smps.asm):01637                 adda  #$30
B604 97FC             (       ./smps.asm):01638                 sta   <YM2413_A0
B606 58               (       ./smps.asm):01639                 aslb
B607 EC85             (       ./smps.asm):01640                 ldd   b,x
B609 A7C81F           (       ./smps.asm):01641                 sta   InstrAndVolume,u        
B60C E7C81E           (       ./smps.asm):01642                 stb   InstrTranspose,u
B60F E647             (       ./smps.asm):01643                 ldb   Volume,u                 ; apply current track attenuation to voice
B611 54               (       ./smps.asm):01644                 lsrb                           ; volume attenuation is unsigned
B612 54               (       ./smps.asm):01645                 lsrb
B613 54               (       ./smps.asm):01646                 lsrb
B614 F7B61F           (       ./smps.asm):01647                 stb   @dyn1+1
B617 1F89             (       ./smps.asm):01648                 tfr   a,b
B619 CA0F             (       ./smps.asm):01649                 orb   #$0F                     ; set maximum attenuation for compare        
B61B F7B621           (       ./smps.asm):01650                 stb   @dyn2+1
B61E 8B00             (       ./smps.asm):01651         @dyn1   adda  #0                       ; (dynamic) add global volume attenuation
B620 8100             (       ./smps.asm):01652         @dyn2   cmpa  #0                       ; (dynamic) test if overflow of attenuation value
B622 2502             (       ./smps.asm):01653                 blo   @write                   ; attenuation < F and no overflow
B624 1F98             (       ./smps.asm):01654                 tfr   b,a                      ; set maximum attenuation (F)
B626 97FD             (       ./smps.asm):01655         @write  sta   <YM2413_D0   
                      (       ./smps.asm):01656                 ;lda   SoundPage
                      (       ./smps.asm):01657                 ;_SetCartPageA  
B628 3540             (       ./smps.asm):01658                 puls  u                        ; removing return address from stack; will not return to coord flag loop
B62A 39               (       ./smps.asm):01659                 rts                   
B62B CEB3AE           (       ./smps.asm):01660         @psgsfx ldu   #MusicTrackOffs
B62E 44               (       ./smps.asm):01661                 lsra                           ; this is a psg fx track
B62F 44               (       ./smps.asm):01662                 lsra
B630 44               (       ./smps.asm):01663                 lsra
B631 44               (       ./smps.asm):01664                 lsra                           ; transform track ref to an index: $80,$A0,$C0,$E0 => 8,10,12,14
B632 EEC6             (       ./smps.asm):01665                 ldu   a,u                      ; U ptr to same FM track ID than SFX but for Music, Y still for FM SFX Track
B634 A6C4             (       ./smps.asm):01666                 lda   PlaybackControl,u
B636 84FB             (       ./smps.asm):01667                 anda  #$FB                     ; Clear SFX is overriding this track from playback control
B638 8A02             (       ./smps.asm):01668                 ora   #$02                     ; Set bit 1 (track is at rest)
B63A A7C4             (       ./smps.asm):01669                 sta   PlaybackControl,u
B63C A641             (       ./smps.asm):01670                 lda   VoiceControl,u           ; read channel nb
B63E 81E0             (       ./smps.asm):01671                 cmpa  #$E0                     ; Is this a PSG 3 noise (not tone) track?
B640 2605             (       ./smps.asm):01672                 bne   @c                       ; If it isn't, don't do next part (non-PSG Noise doesn't restore)
B642 A6C81B           (       ./smps.asm):01673                 lda   PSGNoise,u               ; Get PSG noise setting
B645 97FE             (       ./smps.asm):01674                 sta   <PSG                     ; Write it to PSG
B647 3540             (       ./smps.asm):01675         @c      puls  u                        ; removing return address from stack; will not return to coord flag loop                        
B649 39               (       ./smps.asm):01676                 rts
                      (       ./smps.asm):01677         
                      (       ./smps.asm):01678         ; (via Saxman's doc): Change current PSG noise to xx (For noise channel, E0-E7)
                      (       ./smps.asm):01679         ;
B64A                  (       ./smps.asm):01680         cfSetPSGNoise
B64A 86E0             (       ./smps.asm):01681                 lda   #$E0
B64C A721             (       ./smps.asm):01682                 sta   VoiceControl,y
B64E A680             (       ./smps.asm):01683                 lda   ,x+
B650 A7A81B           (       ./smps.asm):01684                 sta   PSGNoise,y
B653 E6A4             (       ./smps.asm):01685                 ldb   PlaybackControl,y
B655 C504             (       ./smps.asm):01686                 bitb  #$04                     ; Is bit 2 (04h) Is SFX overriding this track?
B657 2602             (       ./smps.asm):01687                 bne   @rts        
B659 97FE             (       ./smps.asm):01688                 sta   <PSG
B65B 39               (       ./smps.asm):01689         @rts    rts        
                      (       ./smps.asm):01690         
B65C                  (       ./smps.asm):01691         cfDisableModulation
B65C A6A4             (       ./smps.asm):01692                 lda   PlaybackControl,y
B65E 84F7             (       ./smps.asm):01693                 anda  #$F7
B660 A7A4             (       ./smps.asm):01694                 sta   PlaybackControl,y        ; Clear bit 3 (08h) of "playback control" byte (modulation off)        
B662 39               (       ./smps.asm):01695                 rts  
                      (       ./smps.asm):01696         
                      (       ./smps.asm):01697         ; (via Saxman's doc): Change current PSG tone to xx
                      (       ./smps.asm):01698         ;
B663                  (       ./smps.asm):01699         cfSetPSGTone
B663 A680             (       ./smps.asm):01700                 lda   ,x+
B665 A728             (       ./smps.asm):01701                 sta   VoiceIndex,y
B667 39               (       ./smps.asm):01702                 rts         
                      (       ./smps.asm):01703         
                      (       ./smps.asm):01704         ; (via Saxman's doc):  $F6zzzz - jump to position
                      (       ./smps.asm):01705         ;    * zzzz - position to loop back to (negative offset)
                      (       ./smps.asm):01706         ;
B668                  (       ./smps.asm):01707         cfJumpTo
B668 EC84             (       ./smps.asm):01708                 ldd   ,x
B66A 308B             (       ./smps.asm):01709                 leax  d,x
B66C 39               (       ./smps.asm):01710                 rts             
                      (       ./smps.asm):01711         
                      (       ./smps.asm):01712         ; (via Saxman's doc): $F7xxyyzzzz - repeat section of music
                      (       ./smps.asm):01713         ;    * xx - loop index, for loops within loops without confusing the engine.
                      (       ./smps.asm):01714         ;          o EXAMPLE: Some notes, then a section that is looped twice, then some more notes, and finally the whole thing is looped three times.
                      (       ./smps.asm):01715         ;            The "inner" loop (the section that is looped twice) would have an xx of 01, looking something along the lines of F70102zzzz, whereas the "outside" loop (the whole thing loop) would have an xx of 00, looking something like F70003zzzz.
                      (       ./smps.asm):01716         ;    * yy - number of times to repeat
                      (       ./smps.asm):01717         ;          o NOTE: This includes the initial encounter of the F7 flag, not number of times to repeat AFTER hitting the flag.
                      (       ./smps.asm):01718         ;    * zzzz - position to loop back to (negative offset)
                      (       ./smps.asm):01719         ;
B66D                  (       ./smps.asm):01720         cfRepeatAtPos
B66D EC81             (       ./smps.asm):01721                 ldd   ,x++                     ; Loop index is in 'a'
B66F 8B20             (       ./smps.asm):01722                 adda  #LoopCounters            ; Add to make loop index offset
B671 33A6             (       ./smps.asm):01723                 leau  a,y
B673 6DC4             (       ./smps.asm):01724                 tst   ,u
B675 2602             (       ./smps.asm):01725                 bne   @a
B677 E7C4             (       ./smps.asm):01726                 stb   ,u                       ; Otherwise, set it to the new number of repeats  
B679 6AC4             (       ./smps.asm):01727         @a      dec   ,u                       ; One less loop
B67B 2705             (       ./smps.asm):01728                 beq   @b                       ; If counted to zero, skip the rest of this (hence start loop count of 1 terminates the loop without ever looping)
B67D EC84             (       ./smps.asm):01729                 ldd   ,x
B67F 308B             (       ./smps.asm):01730                 leax  d,x                      ; loop back
B681 39               (       ./smps.asm):01731                 rts
B682 3002             (       ./smps.asm):01732         @b      leax  2,x
B684 39               (       ./smps.asm):01733                 rts        
                      (       ./smps.asm):01734         
                      (       ./smps.asm):01735         ; (via Saxman's doc): jump to position yyyy (keep previous position in memory for returning)
B685                  (       ./smps.asm):01736         cfJumpToGosub
B685 A62A             (       ./smps.asm):01737                 lda   StackPointer,y
B687 8002             (       ./smps.asm):01738                 suba  #2
B689 A72A             (       ./smps.asm):01739                 sta   StackPointer,y           ; move stack backward
B68B 3302             (       ./smps.asm):01740                 leau  2,x                      ; move x to return address
B68D EFA6             (       ./smps.asm):01741                 stu   a,y                      ; store return address to stack
B68F EC84             (       ./smps.asm):01742                 ldd   ,x                       ; read sub address
B691 308B             (       ./smps.asm):01743                 leax  d,x                      ; gosub
B693 39               (       ./smps.asm):01744                 rts        
                      (       ./smps.asm):01745         
B694                  (       ./smps.asm):01746         cfSkip1
B694 3001             (       ./smps.asm):01747                 leax  1,x
B696                  (       ./smps.asm):01748         cfNop 
B696 39               (       ./smps.asm):01749                 rts      
                      (       ./smps.asm):01750         
B697                  (       ./smps.asm):01751         ClearTrack
B697 3436             (       ./smps.asm):01752                 pshs  d,x,y
B699 CC0000           (       ./smps.asm):01753                 ldd   #$0000        ; init regs to zero
B69C 8E0000           (       ./smps.asm):01754                 ldx   #$0000
B69F 3184             (       ./smps.asm):01755                 leay  ,x
                      (       ./smps.asm):01756         
B6A1 3636363636363636 (       ./smps.asm):01757                 fill $36,((sizeof{Track}-2)/6)*2 ; generate object_size/6 assembly instructions $3636 (pshu  d,x,y) 
     36363636
                      (       ./smps.asm):01758         
                      (       ./smps.asm):01759                 IFEQ (sizeof{Track}-2)%6-5
                      (       ./smps.asm):01760                 pshu  a,x,y
                      (       ./smps.asm):01761                 ENDC
                      (       ./smps.asm):01762         
                      (       ./smps.asm):01763                 IFEQ (sizeof{Track}-2)%6-4
B6AD 3616             (       ./smps.asm):01764                 pshu  d,x
                      (       ./smps.asm):01765                 ENDC
                      (       ./smps.asm):01766         
                      (       ./smps.asm):01767                 IFEQ (sizeof{Track}-2)%6-3
                      (       ./smps.asm):01768                 pshu  a,x
                      (       ./smps.asm):01769                 ENDC
                      (       ./smps.asm):01770         
                      (       ./smps.asm):01771                 IFEQ (sizeof{Track}-2)%6-2
                      (       ./smps.asm):01772                 pshu  d
                      (       ./smps.asm):01773                 ENDC
                      (       ./smps.asm):01774         
                      (       ./smps.asm):01775                 IFEQ (sizeof{Track}-2)%6-1
                      (       ./smps.asm):01776                 pshu  a
                      (       ./smps.asm):01777                 ENDC
                      (       ./smps.asm):01778         
B6AF 35B6             (       ./smps.asm):01779                 puls  d,x,y,pc
                      (       ./smps.asm):01780         
                      (       ./smps.asm):01781         * YM2413 Instrument presets
                      (       ./smps.asm):01782         * -------------------------
                      (       ./smps.asm):01783         *
                      (       ./smps.asm):01784         * /* Order of array = { modulator, carrier } */
                      (       ./smps.asm):01785         * typedef struct {
                      (       ./smps.asm):01786         *     Bit8u tl;
                      (       ./smps.asm):01787         *     Bit8u dc;
                      (       ./smps.asm):01788         *     Bit8u dm;
                      (       ./smps.asm):01789         *     Bit8u fb;
                      (       ./smps.asm):01790         *     Bit8u am[2];
                      (       ./smps.asm):01791         *     Bit8u vib[2];
                      (       ./smps.asm):01792         *     Bit8u et[2];
                      (       ./smps.asm):01793         *     Bit8u ksr[2];
                      (       ./smps.asm):01794         *     Bit8u multi[2];
                      (       ./smps.asm):01795         *     Bit8u ksl[2];
                      (       ./smps.asm):01796         *     Bit8u ar[2];
                      (       ./smps.asm):01797         *     Bit8u dr[2];
                      (       ./smps.asm):01798         *     Bit8u sl[2];
                      (       ./smps.asm):01799         *     Bit8u rr[2];
                      (       ./smps.asm):01800         * } opll_patch_t;
                      (       ./smps.asm):01801         
                      (       ./smps.asm):01802         * static const opll_patch_t patch_ds1001[opll_patch_max] = {
                      (       ./smps.asm):01803         *     { 0x05, 0x00, 0x00, 0x06,{ 0x00, 0x00 },{ 0x00, 0x00 },{ 0x00, 0x01 },{ 0x00, 0x00 },{ 0x03, 0x01 },{ 0x00, 0x00 },{ 0x0e, 0x08 },{ 0x08, 0x01 },{ 0x04, 0x02 },{ 0x02, 0x07 } }, * 1 : Violin
                      (       ./smps.asm):01804         *     { 0x14, 0x00, 0x01, 0x05,{ 0x00, 0x00 },{ 0x00, 0x01 },{ 0x00, 0x00 },{ 0x01, 0x00 },{ 0x03, 0x01 },{ 0x00, 0x00 },{ 0x0d, 0x0f },{ 0x08, 0x06 },{ 0x02, 0x01 },{ 0x03, 0x02 } }, * 2 : Guitar
                      (       ./smps.asm):01805         *     { 0x08, 0x00, 0x01, 0x00,{ 0x00, 0x00 },{ 0x00, 0x00 },{ 0x00, 0x00 },{ 0x01, 0x01 },{ 0x01, 0x01 },{ 0x00, 0x00 },{ 0x0f, 0x0b },{ 0x0a, 0x02 },{ 0x02, 0x01 },{ 0x00, 0x02 } }, * 3 : Piano
                      (       ./smps.asm):01806         *     { 0x0c, 0x00, 0x00, 0x07,{ 0x00, 0x00 },{ 0x00, 0x01 },{ 0x01, 0x01 },{ 0x01, 0x00 },{ 0x01, 0x01 },{ 0x00, 0x00 },{ 0x0a, 0x06 },{ 0x08, 0x04 },{ 0x06, 0x02 },{ 0x01, 0x07 } }, * 4 : Flute
                      (       ./smps.asm):01807         *     { 0x1e, 0x00, 0x00, 0x06,{ 0x00, 0x00 },{ 0x00, 0x00 },{ 0x01, 0x01 },{ 0x01, 0x00 },{ 0x02, 0x01 },{ 0x00, 0x00 },{ 0x0e, 0x07 },{ 0x01, 0x06 },{ 0x00, 0x02 },{ 0x01, 0x08 } }, * 5 : Clarinet
                      (       ./smps.asm):01808         *     { 0x06, 0x00, 0x00, 0x00,{ 0x00, 0x00 },{ 0x00, 0x00 },{ 0x00, 0x00 },{ 0x00, 0x00 },{ 0x02, 0x01 },{ 0x00, 0x00 },{ 0x0a, 0x0e },{ 0x03, 0x02 },{ 0x0f, 0x0f },{ 0x04, 0x04 } }, * 6 : Oboe
                      (       ./smps.asm):01809         *     { 0x1d, 0x00, 0x00, 0x07,{ 0x00, 0x00 },{ 0x00, 0x01 },{ 0x01, 0x01 },{ 0x00, 0x00 },{ 0x01, 0x01 },{ 0x00, 0x00 },{ 0x08, 0x08 },{ 0x02, 0x01 },{ 0x01, 0x00 },{ 0x01, 0x07 } }, * 7 : Trumpet
                      (       ./smps.asm):01810         *     { 0x22, 0x01, 0x00, 0x07,{ 0x00, 0x00 },{ 0x00, 0x00 },{ 0x01, 0x01 },{ 0x00, 0x00 },{ 0x03, 0x01 },{ 0x00, 0x00 },{ 0x0a, 0x07 },{ 0x02, 0x02 },{ 0x00, 0x01 },{ 0x01, 0x07 } }, * 8 : Organ
                      (       ./smps.asm):01811         *     { 0x25, 0x00, 0x00, 0x00,{ 0x00, 0x00 },{ 0x00, 0x00 },{ 0x01, 0x00 },{ 0x01, 0x01 },{ 0x05, 0x01 },{ 0x00, 0x00 },{ 0x04, 0x07 },{ 0x00, 0x03 },{ 0x07, 0x00 },{ 0x02, 0x01 } }, * 9 : Horn
                      (       ./smps.asm):01812         *     { 0x0f, 0x00, 0x01, 0x07,{ 0x01, 0x00 },{ 0x00, 0x00 },{ 0x01, 0x00 },{ 0x01, 0x00 },{ 0x05, 0x01 },{ 0x00, 0x00 },{ 0x0a, 0x0a },{ 0x08, 0x05 },{ 0x05, 0x00 },{ 0x01, 0x02 } }, * A : Synthesizer
                      (       ./smps.asm):01813         *     { 0x24, 0x00, 0x00, 0x07,{ 0x00, 0x01 },{ 0x00, 0x01 },{ 0x00, 0x00 },{ 0x01, 0x00 },{ 0x07, 0x01 },{ 0x00, 0x00 },{ 0x0f, 0x0f },{ 0x08, 0x08 },{ 0x02, 0x01 },{ 0x02, 0x02 } }, * B : Harpsichord
                      (       ./smps.asm):01814         *     { 0x11, 0x00, 0x00, 0x06,{ 0x00, 0x00 },{ 0x01, 0x00 },{ 0x01, 0x01 },{ 0x01, 0x00 },{ 0x01, 0x03 },{ 0x00, 0x00 },{ 0x06, 0x07 },{ 0x05, 0x04 },{ 0x01, 0x01 },{ 0x08, 0x06 } }, * C : Vibraphone
                      (       ./smps.asm):01815         *     { 0x13, 0x00, 0x00, 0x05,{ 0x00, 0x00 },{ 0x00, 0x00 },{ 0x00, 0x00 },{ 0x00, 0x00 },{ 0x01, 0x02 },{ 0x03, 0x00 },{ 0x0c, 0x09 },{ 0x09, 0x05 },{ 0x00, 0x00 },{ 0x03, 0x02 } }, * D : Synthesizer Bass
                      (       ./smps.asm):01816         *     { 0x0c, 0x00, 0x00, 0x00,{ 0x00, 0x00 },{ 0x01, 0x01 },{ 0x01, 0x01 },{ 0x00, 0x00 },{ 0x01, 0x03 },{ 0x00, 0x00 },{ 0x09, 0x0c },{ 0x04, 0x00 },{ 0x03, 0x0f },{ 0x03, 0x06 } }, * E : Acoustic Bass
                      (       ./smps.asm):01817         *     { 0x0d, 0x00, 0x00, 0x00,{ 0x00, 0x00 },{ 0x00, 0x01 },{ 0x01, 0x01 },{ 0x00, 0x01 },{ 0x01, 0x02 },{ 0x00, 0x00 },{ 0x0c, 0x0d },{ 0x01, 0x05 },{ 0x05, 0x00 },{ 0x06, 0x06 } }, * F : Electric Guitar
                      (       ./smps.asm):01818         *     /* Rhythm Patches: rows 1 and 4 are bass drum, 2 and 5 are Snare Drum & Hi-Hat, 3 and 6 are Tom and Top Cymbal */
                      (       ./smps.asm):01819         *     { 0x18, 0x00, 0x01, 0x07,{ 0x00, 0x00 },{ 0x00, 0x00 },{ 0x00, 0x00 },{ 0x00, 0x00 },{ 0x01, 0x00 },{ 0x00, 0x00 },{ 0x0d, 0x00 },{ 0x0f, 0x00 },{ 0x06, 0x00 },{ 0x0a, 0x00 } },
                      (       ./smps.asm):01820         *     { 0x00, 0x00, 0x00, 0x00,{ 0x00, 0x00 },{ 0x00, 0x00 },{ 0x00, 0x00 },{ 0x00, 0x00 },{ 0x01, 0x00 },{ 0x00, 0x00 },{ 0x0c, 0x00 },{ 0x08, 0x00 },{ 0x0a, 0x00 },{ 0x07, 0x00 } },
                      (       ./smps.asm):01821         *     { 0x00, 0x00, 0x00, 0x00,{ 0x00, 0x00 },{ 0x00, 0x00 },{ 0x00, 0x00 },{ 0x00, 0x00 },{ 0x05, 0x00 },{ 0x00, 0x00 },{ 0x0f, 0x00 },{ 0x08, 0x00 },{ 0x05, 0x00 },{ 0x09, 0x00 } },
                      (       ./smps.asm):01822         *     { 0x00, 0x00, 0x00, 0x00,{ 0x00, 0x00 },{ 0x00, 0x00 },{ 0x00, 0x00 },{ 0x00, 0x00 },{ 0x00, 0x01 },{ 0x00, 0x00 },{ 0x00, 0x0f },{ 0x00, 0x08 },{ 0x00, 0x06 },{ 0x00, 0x0d } },
                      (       ./smps.asm):01823         *     { 0x00, 0x00, 0x00, 0x00,{ 0x00, 0x00 },{ 0x00, 0x00 },{ 0x00, 0x00 },{ 0x00, 0x00 },{ 0x00, 0x01 },{ 0x00, 0x00 },{ 0x00, 0x0d },{ 0x00, 0x08 },{ 0x00, 0x06 },{ 0x00, 0x08 } },
                      (       ./smps.asm):01824         *     { 0x00, 0x00, 0x00, 0x00,{ 0x00, 0x00 },{ 0x00, 0x00 },{ 0x00, 0x00 },{ 0x00, 0x00 },{ 0x00, 0x01 },{ 0x00, 0x00 },{ 0x00, 0x0a },{ 0x00, 0x0a },{ 0x00, 0x05 },{ 0x00, 0x05 } }
                      (       ./smps.asm):01825         * };             
                      (        mplus.asm):00038                 INCLUDE "./irq.asm"
     E7C5             (        ./irq.asm):00001         MC6846.TCR      equ $E7C5 ; irq timer ctrl
     E7C6             (        ./irq.asm):00002         MC6846.TMSB     equ $E7C6 ; irq timer MSB
     E7C7             (        ./irq.asm):00003         MC6846.TLSB     equ $E7C7 ; irq timer LSB
     6027             (        ./irq.asm):00004         TIMERPT         equ $6027 ; routine irq timer
                      (        ./irq.asm):00005         
     4DFF             (        ./irq.asm):00006         Irq_one_frame    equ 312*64-1          ; one frame timer (lines*cycles_per_lines-1), timer launch at -1
     0040             (        ./irq.asm):00007         Irq_one_line     equ 64
                      (        ./irq.asm):00008                
B6B1                  (        ./irq.asm):00009         IrqInit
B6B1 CCB6FC           (        ./irq.asm):00010                 ldd   #IrqManager
B6B4 FD6027           (        ./irq.asm):00011                 std   TIMERPT
B6B7 39               (        ./irq.asm):00012                 rts
                      (        ./irq.asm):00013         
B6B8                  (        ./irq.asm):00014         IrqSet50Hz
B6B8 C642             (        ./irq.asm):00015                 ldb   #$42
B6BA F7E7C5           (        ./irq.asm):00016                 stb   MC6846.TCR               ; timer precision x8
B6BD CC4DFF           (        ./irq.asm):00017                 ldd   #Irq_one_frame           ; on every frame
B6C0 FDE7C6           (        ./irq.asm):00018                 std   MC6846.TMSB
B6C3 BDB6C7           (        ./irq.asm):00019                 jsr   IrqOn   
B6C6 39               (        ./irq.asm):00020                 rts
                      (        ./irq.asm):00021                
B6C7                  (        ./irq.asm):00022         IrqOn         
B6C7 B66019           (        ./irq.asm):00023                 lda   $6019                           
B6CA 8A20             (        ./irq.asm):00024                 ora   #$20
B6CC B76019           (        ./irq.asm):00025                 sta   $6019                    ; STATUS register
B6CF 1CEF             (        ./irq.asm):00026                 andcc #$EF                     ; tell 6809 to activate irq
B6D1 39               (        ./irq.asm):00027                 rts
                      (        ./irq.asm):00028                 
B6D2                  (        ./irq.asm):00029         IrqOff 
B6D2 B66019           (        ./irq.asm):00030                 lda   $6019                           
B6D5 84DF             (        ./irq.asm):00031                 anda  #$DF
B6D7 B76019           (        ./irq.asm):00032                 sta   $6019                    ; STATUS register
B6DA 1A10             (        ./irq.asm):00033                 orcc  #$10                     ; tell 6809 to inactivate irq
B6DC 39               (        ./irq.asm):00034                 rts
                      (        ./irq.asm):00035         
B6DD                  (        ./irq.asm):00036         IrqSync 
B6DD C642             (        ./irq.asm):00037                 ldb   #$42
B6DF F7E7C5           (        ./irq.asm):00038                 stb   MC6846.TCR
                      (        ./irq.asm):00039                 
B6E2 C608             (        ./irq.asm):00040                 ldb   #8                       ; ligne * 64 (cycles per line) / 8 (nb tempo loop cycles)
B6E4 3D               (        ./irq.asm):00041                 mul
B6E5 1F02             (        ./irq.asm):00042                 tfr   d,y
B6E7 31A8E0           (        ./irq.asm):00043                 leay  -32,y                    ; manual adjustment
                      (        ./irq.asm):00044         !
B6EA 7DE7E7           (        ./irq.asm):00045                 tst   $E7E7                    ;
B6ED 2BFB             (        ./irq.asm):00046                 bmi   <                        ; while spot is in a visible screen line        
B6EF 7DE7E7           (        ./irq.asm):00047         !       tst   $E7E7                    ;
B6F2 2AFB             (        ./irq.asm):00048                 bpl   <                        ; while spot is not in a visible screen line
B6F4 313F             (        ./irq.asm):00049         !       leay  -1,y                     ;
B6F6 26FC             (        ./irq.asm):00050                 bne   <                        ; wait until desired line
                      (        ./irq.asm):00051                
B6F8 BFE7C6           (        ./irq.asm):00052                 stx   MC6846.TMSB              ; spot is at the end of desired line
B6FB 39               (        ./irq.asm):00053                 rts  
                      (        ./irq.asm):00054         
B6FC                  (        ./irq.asm):00055         IrqManager
B6FC BDAC05           (        ./irq.asm):00056                 jsr   MusicFrame
B6FF 7EE830           (        ./irq.asm):00057                 jmp   $E830                    ; return to caller
B702                  (        ./irq.asm):00058         Irq_sys_stack
