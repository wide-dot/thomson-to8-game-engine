                      (/home/robin/githu):00001                 INCLUDE "./generated-code/scrollscreen/ObjectId.glb"
                      (./generated-code/):00001         * Generated Code
                      (./generated-code/):00002         
     0001             (./generated-code/):00003         ObjID_scrollA equ 1
     0002             (./generated-code/):00004         ObjID_scrollB equ 2
                      (/home/robin/githu):00002                 INCLUDE "./generated-code/Game.glb"
                      (./generated-code/):00001         * Generated Code
                      (./generated-code/):00002         
     0112             (./generated-code/):00003         Build_RAMLoaderManager equ $0112
     0000             (./generated-code/):00004         GmID_scrollscreen equ 0
     0000             (./generated-code/):00005         gmboot equ 0
                      (/home/robin/githu):00003         
     0001             (/home/robin/githu):00004         OverlayMode equ 1
     0001             (/home/robin/githu):00005         DEBUG EQU 1
                      (/home/robin/githu):00006         
                      (/home/robin/githu):00007                 INCLUDE "./global/global-preambule-includes.asm"
     0001             (./global/global-p):00001         DO_NOT_WAIT_VBL equ 1
     0001             (./global/global-p):00002         SOUND_CARD_PROTOTYPE equ 1
                      (./global/global-p):00003         
                      (./global/global-p):00004             INCLUDE "./engine/system/to8/memory-map.equ"
                      (./engine/system/t):00001         ; Thomson TO8 - Memory map
                      (./engine/system/t):00002         
                      (./engine/system/t):00003         ; mc6846
     E7C0             (./engine/system/t):00004         MC6846.CSR      equ $E7C0
     E7C1             (./engine/system/t):00005         MC6846.CRC      equ $E7C1
     E7C2             (./engine/system/t):00006         MC6846.DDRC     equ $E7C2
     E7C3             (./engine/system/t):00007         MC6846.PRC      equ $E7C3
     E7C4             (./engine/system/t):00008         MC6846.CSR2     equ $E7C4
     E7C5             (./engine/system/t):00009         MC6846.TCR      equ $E7C5 ; irq timer ctrl
     E7C6             (./engine/system/t):00010         MC6846.TMSB     equ $E7C6 ; irq timer MSB
     E7C7             (./engine/system/t):00011         MC6846.TLSB     equ $E7C7 ; irq timer LSB
                      (./engine/system/t):00012         
                      (./engine/system/t):00013         ; mc6821 system
     E7C8             (./engine/system/t):00014         MC6821.PRA      equ $E7C8
     E7C9             (./engine/system/t):00015         MC6821.PRB      equ $E7C9
     E7CA             (./engine/system/t):00016         MC6821.CRA      equ $E7CA
     E7CB             (./engine/system/t):00017         MC6821.CRB      equ $E7CB
                      (./engine/system/t):00018         
                      (./engine/system/t):00019         ; mc6821 music and game
     E7CC             (./engine/system/t):00020         MC6821.PRA1     equ $E7CC
     E7CD             (./engine/system/t):00021         MC6821.PRA2     equ $E7CD
     E7CE             (./engine/system/t):00022         MC6821.CRA1     equ $E7CE
     E7CF             (./engine/system/t):00023         MC6821.CRA2     equ $E7CF
                      (./engine/system/t):00024         
                      (./engine/system/t):00025         ; thmfc01 gate controler floppy disk
     E7D0             (./engine/system/t):00026         THMFC01.STAT0   equ $E7D0
     E7D0             (./engine/system/t):00027         THMFC01.CMD0    equ $E7D0
     E7D1             (./engine/system/t):00028         THMFC01.STAT1   equ $E7D1
     E7D1             (./engine/system/t):00029         THMFC01.CMD1    equ $E7D1
     E7D2             (./engine/system/t):00030         THMFC01.CMD2    equ $E7D2
     E7D3             (./engine/system/t):00031         THMFC01.WDATA   equ $E7D3
     E7D3             (./engine/system/t):00032         THMFC01.RDATA   equ $E7D3
     E7D4             (./engine/system/t):00033         THMFC01.WCLK    equ $E7D4
     E7D5             (./engine/system/t):00034         THMFC01.WSECT   equ $E7D5
     E7D6             (./engine/system/t):00035         THMFC01.TRCK    equ $E7D6
     E7D7             (./engine/system/t):00036         THMFC01.CELL    equ $E7D7
                      (./engine/system/t):00037         
                      (./engine/system/t):00038         ; ef9369 palette
     E7DA             (./engine/system/t):00039         EF9369.D        equ $E7DA
     E7DB             (./engine/system/t):00040         EF9369.A        equ $E7DB
                      (./engine/system/t):00041         
                      (./engine/system/t):00042         ; cf74021 gate array page mode - (TO8D: EFG2021FN)
     E7DC             (./engine/system/t):00043         CF74021.LGAMOD  equ $E7DC
     E7DD             (./engine/system/t):00044         CF74021.SYS2    equ $E7DD
     E7E4             (./engine/system/t):00045         CF74021.COM     equ $E7E4
     E7E5             (./engine/system/t):00046         CF74021.DATA    equ $E7E5
     E7E6             (./engine/system/t):00047         CF74021.CART    equ $E7E6
     E7E7             (./engine/system/t):00048         CF74021.SYS1    equ $E7E7
                      (./engine/system/t):00049         
                      (./engine/system/t):00050         ; extension port
     00E7             (./engine/system/t):00051         EXTPORT         equ $E7
     E7F0             (./engine/system/t):00052         IEEE488         equ $E7F0 ; to E7F7
     E7F2             (./engine/system/t):00053         EF5860.CTRL     equ $E7F2 ; MIDI
     E7F3             (./engine/system/t):00054         EF5860.TX       equ $E7F3 ; MIDI
                      (./engine/system/t):00055          ifndef SOUND_CARD_PROTOTYPE
0000                  (./engine/system/t):00056         YM2413.A        equ $E7FC
0000                  (./engine/system/t):00057         YM2413.D        equ $E7FD
0000                  (./engine/system/t):00058         SN76489.D       equ $E7F7
                      (./engine/system/t):00059          else
     E7FC             (./engine/system/t):00060         YM2413.A        equ $E7FC
     E7FD             (./engine/system/t):00061         YM2413.D        equ $E7FD
     E7FF             (./engine/system/t):00062         SN76489.D       equ $E7FF
                      (./engine/system/t):00063          endc
     E7FE             (./engine/system/t):00064         MEA8000.D       equ $E7FE
     E7FF             (./engine/system/t):00065         MEA8000.A       equ $E7FF
                      (./engine/system/t):00066         
                      (./engine/system/t):00067         ; ROM routines
     E806             (./engine/system/t):00068         GETC            equ $E806
     E809             (./engine/system/t):00069         KTST            equ $E809
     E82A             (./engine/system/t):00070         DKCO            equ $E82A ; read or write floppy disk routine
     E830             (./engine/system/t):00071         IRQ.EXIT        equ $E830 ; to exit an irq
                      (./engine/system/t):00072         
                      (./engine/system/t):00073         ; system variables
     6019             (./engine/system/t):00074         STATUS          equ $6019 ; status bitfield
     6048             (./engine/system/t):00075         DK.OPC          equ $6048 ; operation
     6049             (./engine/system/t):00076         DK.DRV          equ $6049 ; drive
     604C             (./engine/system/t):00077         DK.SEC          equ $604C ; sector
     604A             (./engine/system/t):00078         DK.TRK          equ $604A ; $604B ; track
     604E             (./engine/system/t):00079         DK.STA          equ $604E ; return status
     604F             (./engine/system/t):00080         DK.BUF          equ $604F ; $6050 ; data write location
     6023             (./engine/system/t):00081         FIRQPT          equ $6023 ; routine firq
     6027             (./engine/system/t):00082         TIMERPT         equ $6027 ; routine irq timer
     6081             (./engine/system/t):00083         CF74021.SYS1.R  equ $6081 ; reading value for CF74021.SYS1
                      (./engine/system/t):00084         
                      (./engine/system/t):00085         ; constants
     0035             (./engine/system/t):00086         EF5860.TXIRQON  equ %00110101 ; 8bits, no parity check, stop 1, tx interrupt
     0015             (./engine/system/t):00087         EF5860.TXIRQOFF equ %00010101 ; 8bits, no parity check, stop 1, no interrupt
     4DFF             (./engine/system/t):00088         IRQ.ONEFRAME    equ 312*64-1  ; one frame timer (lines*cycles_per_lines-1), timer launch at -1
                      (./engine/system/t):00089         
                      (./engine/system/t):00090         ; -----------------------------------------------------------------------------
                      (./engine/system/t):00091         
                      (./engine/system/t):00092         ; mapping to core routines
                      (./engine/system/t):00093         
     E7CD             (./engine/system/t):00094         CORE.DAC        equ MC6821.PRA2
     E7E6             (./engine/system/t):00095         CORE.RND        equ CF74021.CART
                      (./global/global-p):00005             INCLUDE "./engine/constants.asm"
                      (./engine/constant):00001         * ---------------------------------------------------------------------------
                      (./engine/constant):00002         * Constants
                      (./engine/constant):00003         *
                      (./engine/constant):00004         * Naming convention
                      (./engine/constant):00005         * -----------------
                      (./engine/constant):00006         * - lower case
                      (./engine/constant):00007         * - underscore-separated names
                      (./engine/constant):00008         *
                      (./engine/constant):00009         * ---------------------------------------------------------------------------
                      (./engine/constant):00010         
                      (./engine/constant):00011          ifndef CONSTANTS_ASM
     0001             (./engine/constant):00012         CONSTANTS_ASM equ 1
                      (./engine/constant):00013         
                      (./engine/constant):00014         * ===========================================================================
                      (./engine/constant):00015         * TO8 Registers
                      (./engine/constant):00016         * ===========================================================================
                      (./engine/constant):00017         
                      (./engine/constant):00018         ; Disk routine registers (ROM)
                      (./engine/constant):00019         
     6049             (./engine/constant):00020         dk_drive                      equ $6049
     604A             (./engine/constant):00021         dk_track                      equ $604A
     604B             (./engine/constant):00022         dk_track_lsb                  equ $604B
     604C             (./engine/constant):00023         dk_sector                     equ $604C
     604F             (./engine/constant):00024         dk_write_location             equ $604F
                      (./engine/constant):00025         
                      (./engine/constant):00026         * ===========================================================================
                      (./engine/constant):00027         * Globals
                      (./engine/constant):00028         * ===========================================================================
                      (./engine/constant):00029         
                      (./engine/constant):00030         ; WARNING - BuildSprite allow to cross $A000 limit by glb_camera_x_offset/4
                      (./engine/constant):00031         ; Graphics routines using S to write may cross by 12 bytes
                      (./engine/constant):00032         ; be sure to compile with enough margin here
     9FF4             (./engine/constant):00033         glb_ram_end                   equ $A000-12
                      (./engine/constant):00034         
                      (./engine/constant):00035         ; compilated sprite
     9FF2             (./engine/constant):00036         glb_register_s                equ glb_ram_end-2             ; reverved space to store S from ROM routines
                      (./engine/constant):00037         
                      (./engine/constant):00038         ; DrawSprites
     9FF0             (./engine/constant):00039         glb_screen_location_1         equ glb_register_s-2          ; start address for rendering of current sprite Part1     
     9FEE             (./engine/constant):00040         glb_screen_location_2         equ glb_screen_location_1-2   ; start address for rendering of current sprite Part2 (DEPENDENCY Must follow Part1)
                      (./engine/constant):00041         
     9FEC             (./engine/constant):00042         glb_camera_height             equ glb_screen_location_2-2
     9FEA             (./engine/constant):00043         glb_camera_width              equ glb_camera_height-2
     9FE8             (./engine/constant):00044         glb_camera_x_pos_coarse       equ glb_camera_width-2        ; ((glb_camera_x_pos - 64) / 64) * 64
     9FE6             (./engine/constant):00045         glb_camera_x_pos              equ glb_camera_x_pos_coarse-2 ; 16.8 camera x position in palyfield coordinates
     9FE5             (./engine/constant):00046         glb_camera_x_sub              equ glb_camera_x_pos-1        ; 
     9FE4             (./engine/constant):00047         glb_camera_y_pos              equ glb_camera_x_pos-2        ; 16.8 camera y position in palyfield coordinates
     9FE3             (./engine/constant):00048         glb_camera_y_sub              equ glb_camera_y_pos-1        ;
     9FE2             (./engine/constant):00049         glb_camera_x_min_pos          equ glb_camera_y_pos-2
     9FE0             (./engine/constant):00050         glb_camera_y_min_pos          equ glb_camera_x_min_pos-2
     9FDE             (./engine/constant):00051         glb_camera_x_max_pos          equ glb_camera_y_min_pos-2
     9FDC             (./engine/constant):00052         glb_camera_y_max_pos          equ glb_camera_x_max_pos-2
     9FDA             (./engine/constant):00053         glb_camera_x_offset           equ glb_camera_y_max_pos-2
     9FD8             (./engine/constant):00054         glb_camera_y_offset           equ glb_camera_x_offset-2
     9FD7             (./engine/constant):00055         glb_force_sprite_refresh      equ glb_camera_y_offset-1
     9FD6             (./engine/constant):00056         glb_camera_move               equ glb_force_sprite_refresh-1
     9FD5             (./engine/constant):00057         glb_alphaTiles                equ glb_camera_move-1
     9FD4             (./engine/constant):00058         glb_timer_second              equ glb_alphaTiles-1
     9FD3             (./engine/constant):00059         glb_timer_minute              equ glb_timer_second-1
     9FD3             (./engine/constant):00060         glb_timer                     equ glb_timer_minute
     9FD2             (./engine/constant):00061         glb_timer_frame               equ glb_timer-1
                      (./engine/constant):00062         
                      (./engine/constant):00063         ; BankSwitch
     9FD1             (./engine/constant):00064         glb_Page                      equ glb_timer_frame-1
     9FB3             (./engine/constant):00065         dp_engine                     equ glb_Page-30  ; engine routines tmp var space
     9F97             (./engine/constant):00066         dp_extreg                     equ dp_engine-28 ; extra register space (user and engine common)
     9F00             (./engine/constant):00067         dp                            equ $9F00        ; user space (149 bytes max)
     9F00             (./engine/constant):00068         glb_system_stack              equ dp
                      (./engine/constant):00069         
                      (./engine/constant):00070         ; generic direct page extra registers
                      (./engine/constant):00071         ; -----------------------------------
     9F97             (./engine/constant):00072         glb_d0   equ   dp_extreg
     9F98             (./engine/constant):00073         glb_d0_b equ   dp_extreg+1
                      (./engine/constant):00074         ; must be a free byte here for 24bits computation
     9F9A             (./engine/constant):00075         glb_d1   equ   dp_extreg+3
     9F9B             (./engine/constant):00076         glb_d1_b equ   dp_extreg+4
                      (./engine/constant):00077         ; must be a free byte here for 24bits computation
     9F9D             (./engine/constant):00078         glb_d2   equ   dp_extreg+6
     9F9E             (./engine/constant):00079         glb_d2_b equ   dp_extreg+7
                      (./engine/constant):00080         ; must be a free byte here for 24bits computation
     9FA0             (./engine/constant):00081         glb_d3   equ   dp_extreg+9
     9FA1             (./engine/constant):00082         glb_d3_b equ   dp_extreg+10
                      (./engine/constant):00083         ; must be a free byte here for 24bits computation
     9FA3             (./engine/constant):00084         glb_d4   equ   dp_extreg+12
     9FA4             (./engine/constant):00085         glb_d4_b equ   dp_extreg+13
     9FA5             (./engine/constant):00086         glb_d5   equ   dp_extreg+14
     9FA6             (./engine/constant):00087         glb_d5_b equ   dp_extreg+15
     9FA7             (./engine/constant):00088         glb_d6   equ   dp_extreg+16
     9FA8             (./engine/constant):00089         glb_d6_b equ   dp_extreg+17
     9FA9             (./engine/constant):00090         glb_a0   equ   dp_extreg+18
     9FAA             (./engine/constant):00091         glb_a0_b equ   dp_extreg+19
     9FAB             (./engine/constant):00092         glb_a1   equ   dp_extreg+20
     9FAC             (./engine/constant):00093         glb_a1_b equ   dp_extreg+21
     9FAD             (./engine/constant):00094         glb_a2   equ   dp_extreg+22
     9FAE             (./engine/constant):00095         glb_a2_b equ   dp_extreg+23
     9FAF             (./engine/constant):00096         glb_a3   equ   dp_extreg+24
     9FB0             (./engine/constant):00097         glb_a3_b equ   dp_extreg+25
     9FB1             (./engine/constant):00098         glb_a4   equ   dp_extreg+26
     9FB2             (./engine/constant):00099         glb_a4_b equ   dp_extreg+27
                      (./engine/constant):00100         
                      (./engine/constant):00101         * ===========================================================================
                      (./engine/constant):00102         * Display Constants
                      (./engine/constant):00103         * ===========================================================================
                      (./engine/constant):00104         
     00A0             (./engine/constant):00105         screen_width                  equ 160             ; in pixel
     00C8             (./engine/constant):00106         screen_height                 equ 200             ; in pixel
     001C             (./engine/constant):00107         screen_top                    equ (256-200)/2     ; in pixel
     00E3             (./engine/constant):00108         screen_bottom                 equ screen_top+199  ; in pixel
     0030             (./engine/constant):00109         screen_left                   equ (256-160)/2     ; in pixel
     00CF             (./engine/constant):00110         screen_right                  equ screen_left+159 ; in pixel
     0008             (./engine/constant):00111         nb_priority_levels            equ 8               ; number of priority levels (need code change if modified)
                      (./engine/constant):00112         
                      (./engine/constant):00113         * ===========================================================================
                      (./engine/constant):00114         * Images Constants
                      (./engine/constant):00115         * ===========================================================================
                      (./engine/constant):00116         
     0004             (./engine/constant):00117         image_x_size                  equ 4
     0005             (./engine/constant):00118         image_y_size                  equ 5
     0006             (./engine/constant):00119         image_center_offset           equ 6
                      (./engine/constant):00120         
     0004             (./engine/constant):00121         image_subset_x1_offset        equ 4
     0005             (./engine/constant):00122         image_subset_y1_offset        equ 5
                      (./engine/constant):00123         
     0000             (./engine/constant):00124         page_draw_routine             equ 0
     0001             (./engine/constant):00125         draw_routine                  equ 1
     0003             (./engine/constant):00126         page_erase_routine            equ 3
     0004             (./engine/constant):00127         erase_routine                 equ 4
     0006             (./engine/constant):00128         erase_nb_cell                 equ 6
                      (./engine/constant):00129         
                      (./engine/constant):00130         * ===========================================================================
                      (./engine/constant):00131         * Sound Constants
                      (./engine/constant):00132         * ===========================================================================
                      (./engine/constant):00133         
     0000             (./engine/constant):00134         sound_page        equ 0
     0001             (./engine/constant):00135         sound_start_addr  equ 1
     0003             (./engine/constant):00136         sound_end_addr    equ 3
     0005             (./engine/constant):00137         sound_meta_size   equ 5
                      (./engine/constant):00138         
                      (./engine/constant):00139         * ===========================================================================
                      (./engine/constant):00140         * Object Constants
                      (./engine/constant):00141         * ===========================================================================
                      (./engine/constant):00142         
                      (./engine/constant):00143         ; ext_variables_size should be declared in game source code
                      (./engine/constant):00144         
     0026             (./engine/constant):00145         object_base_size              equ 38  ; the size of an object without rsvd and ext_vars
                      (./engine/constant):00146          ifndef OverlayMode
0000                  (./engine/constant):00147         object_rsvd_size              equ 59
                      (./engine/constant):00148          else
     0005             (./engine/constant):00149         object_rsvd_size              equ 5
                      (./engine/constant):00150          endc
                      (./engine/constant):00151         
     003A             (./engine/constant):00152         object_rsvd                   equ object_base_size+ext_variables_size
     003F             (./engine/constant):00153         object_size                   equ object_base_size+ext_variables_size+object_rsvd_size ; the size of a dynamic object
     003F             (./engine/constant):00154         next_object                   equ object_size
     0026             (./engine/constant):00155         ext_variables                 equ object_base_size ; start of reserved space for additionnal variables
                      (./engine/constant):00156         
     0000             (./engine/constant):00157         id                            equ 0   ; reference to object model id (ObjID_) (0: free slot)
     0001             (./engine/constant):00158         subtype                       equ 1   ; reference to object subtype (Sub_) DEPENDENCY subtype must follow id
     0001             (./engine/constant):00159         subtype_w                     equ 1   ; reference to object subtype (Sub_) takes 2 bytes and overlap render_flags DEPENDENCY subtype must follow id
     0002             (./engine/constant):00160         render_flags                  equ 2
     0003             (./engine/constant):00161         run_object_prev               equ 3   ; previous object to update when deleting current object
     0005             (./engine/constant):00162         run_object_next               equ 5   ; next object to run by RunObjects
                      (./engine/constant):00163         
                      (./engine/constant):00164          ifndef OverlayMode
                      (./engine/constant):00165         * --- render_flags bitfield variables --- background erase pack
0000                  (./engine/constant):00166         render_xmirror_mask           equ $01 ; (bit 0) DEPENDENCY should be bit 0 - tell display engine to mirror sprite on horizontal axis
0000                  (./engine/constant):00167         render_ymirror_mask           equ $02 ; (bit 1) DEPENDENCY should be bit 1 - tell display engine to mirror sprite on vertical axis
0000                  (./engine/constant):00168         render_overlay_mask           equ $04 ; (bit 2) DEPENDENCY should be bit 2 - compilated sprite with no background save
0000                  (./engine/constant):00169         render_playfieldcoord_mask    equ $08 ; (bit 3) tell display engine to use playfield (1) or screen (0) coordinates
0000                  (./engine/constant):00170         render_xloop_mask             equ $10 ; (bit 4) (in screen coordinate) tell display engine to hide sprite when x is out of screen (0) or to display (1)  
0000                  (./engine/constant):00171         render_todelete_mask          equ $20 ; (bit 5) tell display engine to delete sprite and clear OST for this object
0000                  (./engine/constant):00172         render_subobjects_mask        equ $40 ; (bit 6) tell display engine to render subobjects for this object
0000                  (./engine/constant):00173         render_hide_mask              equ $80 ; (bit 7) tell display engine to hide sprite (keep priority and mapping_frame)
                      (./engine/constant):00174          else
                      (./engine/constant):00175         ; --- render_flags bitfield variables --- overlay pack
     0001             (./engine/constant):00176         render_xmirror_mask           equ $01 ; (bit 0) DEPENDENCY should be bit 0 - tell display engine to mirror sprite on horizontal axis
     0002             (./engine/constant):00177         render_ymirror_mask           equ $02 ; (bit 1) DEPENDENCY should be bit 1 - tell display engine to mirror sprite on vertical axis
                      (./engine/constant):00178         
     0008             (./engine/constant):00179         render_playfieldcoord_mask    equ $08 ; (bit 3) tell display engine to use playfield (1) or screen (0) coordinates
     0010             (./engine/constant):00180         render_xloop_mask             equ $10 ; (bit 4) (in screen coordinate) tell display engine to hide sprite when x is out of screen (0) or to display (1)  
     0020             (./engine/constant):00181         render_no_range_ctrl_mask     equ $20 ; (bit 5) tell display engine to skip out of range controls (this may lead to memory corruption BEWARE)
     0040             (./engine/constant):00182         render_subobjects_mask        equ $40 ; (bit 6) tell display engine to render subobjects for this object
     0080             (./engine/constant):00183         render_hide_mask              equ $80 ; (bit 7) tell display engine to hide sprite (keep priority and mapping_frame)
                      (./engine/constant):00184          endc
                      (./engine/constant):00185         
     0007             (./engine/constant):00186         priority                      equ 7           ; display priority (0: nothing to display, 1:front, ..., 8:back)
     0008             (./engine/constant):00187         anim                          equ 8  ; and 9  ; reference to current animation (Ani_)
     000A             (./engine/constant):00188         prev_anim                     equ 10 ; and 11 ; reference to previous animation (Ani_)
     000A             (./engine/constant):00189         sub_anim                      equ 10 ; and 11 ; reference to sub animation
     000C             (./engine/constant):00190         anim_frame                    equ 12          ; index of current frame in animation
     000D             (./engine/constant):00191         anim_frame_duration           equ 13          ; number of frames for each image in animation, range: 00-7F (0-127), 0 means display only during one frame
     000E             (./engine/constant):00192         anim_flags                    equ 14          ; byte offset to reference an anim_flags LUT (adv) / store a link flag (non adv)
                      (./engine/constant):00193         
                      (./engine/constant):00194         * --- anim_flags bitfield variables ---
     0001             (./engine/constant):00195         anim_link_mask                equ $01 ; (bit 0) if set, allow the load of a new animation without reseting anim_frame and anim_frame_duration
                      (./engine/constant):00196         
     000E             (./engine/constant):00197         status_flags                  equ 14          ; orientation of sprite, is applied to animation xmirror flag during AnimateSprite
                      (./engine/constant):00198         
                      (./engine/constant):00199         * --- status_flags bitfield variables ---
     0001             (./engine/constant):00200         status_xflip_mask             equ $01 ; (bit 0) X Flip
     0002             (./engine/constant):00201         status_yflip_mask             equ $02 ; (bit 1) Y Flip
                      (./engine/constant):00202         
     0010             (./engine/constant):00203         image_set                     equ 16 ; and 17 ; reference to current image (Img_) (0000 if no image)
     0012             (./engine/constant):00204         x_pos                         equ 18 ; and 19 ; x playfield coordinate
     0014             (./engine/constant):00205         x_sub                         equ 20          ; x subpixel (1/256 of a pixel), must follow x_pos in data structure
     0015             (./engine/constant):00206         y_pos                         equ 21 ; and 22 ; y playfield coordinate
     0017             (./engine/constant):00207         y_sub                         equ 23          ; y subpixel (1/256 of a pixel), must follow y_pos in data structure
     0018             (./engine/constant):00208         xy_pixel                      equ 24          ; x and y screen coordinate
     0018             (./engine/constant):00209         x_pixel                       equ 24          ; x screen coordinate
     0019             (./engine/constant):00210         y_pixel                       equ 25          ; y screen coordinate, must follow x_pixel
     001A             (./engine/constant):00211         x_vel                         equ 26 ; and 27 ; s8.8 horizontal velocity
     001C             (./engine/constant):00212         y_vel                         equ 28 ; and 29 ; s8.8 vertical velocity
     001E             (./engine/constant):00213         x_acl                         equ 30 ; and 31 ; s8.8 horizontal gravity
     0020             (./engine/constant):00214         y_acl                         equ 32 ; and 33 ; s8.8 vertical gravity
     0022             (./engine/constant):00215         routine                       equ 34          ; index of current object routine
     0023             (./engine/constant):00216         routine_secondary             equ 35          ; index of current secondary routine
     0024             (./engine/constant):00217         routine_tertiary              equ 36          ; index of current tertiary routine
     0025             (./engine/constant):00218         routine_quaternary            equ 37          ; index of current quaternary routine
                      (./engine/constant):00219         
                      (./engine/constant):00220          ifndef OverlayMode
                      (./engine/constant):00221         * ---------------------------------------------------------------------------
                      (./engine/constant):00222         * reserved variables (read/write by engine)
                      (./engine/constant):00223         
0000                  (./engine/constant):00224         rsv_render_flags              equ object_rsvd
                      (./engine/constant):00225         
                      (./engine/constant):00226         * --- rsv_render_flags bitfield variables ---
0000                  (./engine/constant):00227         rsv_render_checkrefresh_mask  equ $01 ; (bit 0) if erasesprite and display sprite flag are processed for this frame
0000                  (./engine/constant):00228         rsv_render_erasesprite_mask   equ $02 ; (bit 1) if a sprite need to be cleared on screen
0000                  (./engine/constant):00229         rsv_render_displaysprite_mask equ $04 ; (bit 2) if a sprite need to be rendered on screen
0000                  (./engine/constant):00230         rsv_render_outofrange_mask    equ $08 ; (bit 3) if a sprite is out of range for full rendering in screen
0000                  (./engine/constant):00231         rsv_render_onscreen_mask      equ $80 ; (bit 7) DEPENDENCY should be bit 7 - has been rendered on last screen buffer (may be 0 or 1)
                      (./engine/constant):00232         
0000                  (./engine/constant):00233         rsv_prev_anim                 equ object_rsvd+1 ; and +2 ; reference to previous animation (Ani_) w * UTILE ?
0000                  (./engine/constant):00234         rsv_image_center_offset       equ object_rsvd+3 ; 0 or 1 offset that indicate if image center is even or odd (DRS_XYToAddress)
0000                  (./engine/constant):00235         rsv_image_subset              equ object_rsvd+4 ; and +5 ; reference to current image regarding mirror flags w
0000                  (./engine/constant):00236         rsv_mapping_frame             equ object_rsvd+6 ; and +7 ; reference to current image regarding mirror flags, overlay flag and x precision w
0000                  (./engine/constant):00237         rsv_erase_nb_cell             equ object_rsvd+8 ; b 
0000                  (./engine/constant):00238         rsv_page_draw_routine         equ object_rsvd+9 ; b
0000                  (./engine/constant):00239         rsv_draw_routine              equ object_rsvd+10 ; and +11 ; w
0000                  (./engine/constant):00240         rsv_page_erase_routine        equ object_rsvd+12 ; b
0000                  (./engine/constant):00241         rsv_erase_routine             equ object_rsvd+13 ; and +14 ; w 
0000                  (./engine/constant):00242         rsv_xy1_pixel                 equ object_rsvd+15 ;
0000                  (./engine/constant):00243         rsv_x1_pixel                  equ object_rsvd+15 ; x+x_offset-(x_size/2) screen coordinate
0000                  (./engine/constant):00244         rsv_y1_pixel                  equ object_rsvd+16 ; y+y_offset-(y_size/2) screen coordinate, must follow rsv_x1_pixel
0000                  (./engine/constant):00245         rsv_xy2_pixel                 equ object_rsvd+17 ;
0000                  (./engine/constant):00246         rsv_x2_pixel                  equ object_rsvd+17 ; x+x_offset+(x_size/2) screen coordinate
0000                  (./engine/constant):00247         rsv_y2_pixel                  equ object_rsvd+18 ; y+y_offset+(y_size/2) screen coordinate, must follow rsv_x2_pixel
                      (./engine/constant):00248         
                      (./engine/constant):00249         * ---------------------------------------------------------------------------
                      (./engine/constant):00250         * reserved variables (engine) - buffer specific
                      (./engine/constant):00251         
0000                  (./engine/constant):00252         rsv_buffer_0                  equ object_rsvd+19 ; Start index of buffer 0 variables
0000                  (./engine/constant):00253         rsv_priority_0                equ object_rsvd+19 ; internal value that hold priority in video buffer 0
0000                  (./engine/constant):00254         rsv_priority_prev_obj_0       equ object_rsvd+20 ; and +21 ; previous object (OST address) in display priority list for video buffer 0 (0000 if none) w
0000                  (./engine/constant):00255         rsv_priority_next_obj_0       equ object_rsvd+22 ; and +23 ; next object (OST address) in display priority list for video buffer 0 (0000 if none) w
0000                  (./engine/constant):00256         rsv_prev_mapping_frame_0      equ object_rsvd+24 ; and +25 ; reference to previous image in video buffer 0 w
0000                  (./engine/constant):00257         rsv_prev_erase_nb_cell_0      equ object_rsvd+26 : b
0000                  (./engine/constant):00258         rsv_prev_page_erase_routine_0 equ object_rsvd+27 ; b
0000                  (./engine/constant):00259         rsv_prev_erase_routine_0      equ object_rsvd+28 ; and +29 ; w
0000                  (./engine/constant):00260         rsv_bgdata_0                  equ object_rsvd+30 ; and +31 ; address of background data in screen 0 w
0000                  (./engine/constant):00261         rsv_prev_xy_pixel_0           equ object_rsvd+32 ;
0000                  (./engine/constant):00262         rsv_prev_x_pixel_0            equ object_rsvd+32 ; previous x screen coordinate b
0000                  (./engine/constant):00263         rsv_prev_y_pixel_0            equ object_rsvd+33 ; previous y screen coordinate b, must follow x_pixel
0000                  (./engine/constant):00264         rsv_prev_xy1_pixel_0          equ object_rsvd+34 ;
0000                  (./engine/constant):00265         rsv_prev_x1_pixel_0           equ object_rsvd+34 ; previous x+x_offset-(x_size/2) screen coordinate b
0000                  (./engine/constant):00266         rsv_prev_y1_pixel_0           equ object_rsvd+35 ; previous y+y_offset-(y_size/2) screen coordinate b, must follow x1_pixel
0000                  (./engine/constant):00267         rsv_prev_xy2_pixel_0          equ object_rsvd+36 ;
0000                  (./engine/constant):00268         rsv_prev_x2_pixel_0           equ object_rsvd+36 ; previous x+x_offset+(x_size/2) screen coordinate b
0000                  (./engine/constant):00269         rsv_prev_y2_pixel_0           equ object_rsvd+37 ; previous y+y_offset+(y_size/2) screen coordinate b, must follow x2_pixel
0000                  (./engine/constant):00270         rsv_prev_render_flags_0       equ object_rsvd+38 ;
                      (./engine/constant):00271         * --- rsv_prev_render_flags_0 bitfield variables ---
0000                  (./engine/constant):00272         rsv_prev_render_overlay_mask  equ $01 ; (bit 0) if a sprite has been rendered with compilated sprite and no background save on screen buffer 0/1
0000                  (./engine/constant):00273         rsv_prev_render_onscreen_mask equ $80 ; (bit 7) DEPENDENCY should be bit 7 - has been rendered on screen buffer 0/1
                      (./engine/constant):00274         
0000                  (./engine/constant):00275         rsv_buffer_1                  equ object_rsvd+39 ; Start index of buffer 1 variables
0000                  (./engine/constant):00276         rsv_priority_1                equ object_rsvd+39 ; internal value that hold priority in video buffer 1
0000                  (./engine/constant):00277         rsv_priority_prev_obj_1       equ object_rsvd+40 ; and +41 ; previous object (OST address) in display priority list for video buffer 1 (0000 if none) w
0000                  (./engine/constant):00278         rsv_priority_next_obj_1       equ object_rsvd+42 ; and +43 ; next object (OST address) in display priority list for video buffer 1 (0000 if none) w
0000                  (./engine/constant):00279         rsv_prev_mapping_frame_1      equ object_rsvd+44 ; and +45 ; reference to previous image in video buffer 1 w
0000                  (./engine/constant):00280         rsv_prev_erase_nb_cell_1      equ object_rsvd+46 ; b
0000                  (./engine/constant):00281         rsv_prev_page_erase_routine_1 equ object_rsvd+47 ; b
0000                  (./engine/constant):00282         rsv_prev_erase_routine_1      equ object_rsvd+48 ; and +49 ; w
0000                  (./engine/constant):00283         rsv_bgdata_1                  equ object_rsvd+50 ; and +51 ; address of background data in screen 1 w
0000                  (./engine/constant):00284         rsv_prev_xy_pixel_1           equ object_rsvd+52 ;
0000                  (./engine/constant):00285         rsv_prev_x_pixel_1            equ object_rsvd+52 ; previous x screen coordinate b
0000                  (./engine/constant):00286         rsv_prev_y_pixel_1            equ object_rsvd+53 ; previous y screen coordinate b, must follow x_pixel
0000                  (./engine/constant):00287         rsv_prev_xy1_pixel_1          equ object_rsvd+54 ;
0000                  (./engine/constant):00288         rsv_prev_x1_pixel_1           equ object_rsvd+54 ; previous x+x_size screen coordinate b
0000                  (./engine/constant):00289         rsv_prev_y1_pixel_1           equ object_rsvd+55 ; previous y+y_size screen coordinate b, must follow x_pixel
0000                  (./engine/constant):00290         rsv_prev_xy2_pixel_1          equ object_rsvd+56 ;
0000                  (./engine/constant):00291         rsv_prev_x2_pixel_1           equ object_rsvd+56 ; previous x+x_size screen coordinate b
0000                  (./engine/constant):00292         rsv_prev_y2_pixel_1           equ object_rsvd+57 ; previous y+y_size screen coordinate b, must follow x_pixel
0000                  (./engine/constant):00293         rsv_prev_render_flags_1       equ object_rsvd+58 ;
                      (./engine/constant):00294         
0000                  (./engine/constant):00295         buf_priority                  equ 0  ; offset for each rsv_buffer variables
0000                  (./engine/constant):00296         buf_priority_prev_obj         equ 1  ;
0000                  (./engine/constant):00297         buf_priority_next_obj         equ 3  ;
0000                  (./engine/constant):00298         buf_prev_mapping_frame        equ 5  ;
0000                  (./engine/constant):00299         buf_erase_nb_cell             equ 7  ;
0000                  (./engine/constant):00300         buf_page_erase_routine        equ 8 ;
0000                  (./engine/constant):00301         buf_erase_routine             equ 9 ;
0000                  (./engine/constant):00302         buf_bgdata                    equ 11 ;
0000                  (./engine/constant):00303         buf_prev_xy_pixel             equ 13 ;
0000                  (./engine/constant):00304         buf_prev_x_pixel              equ 13 ;
0000                  (./engine/constant):00305         buf_prev_y_pixel              equ 14 ;
0000                  (./engine/constant):00306         buf_prev_xy1_pixel            equ 15 ;
0000                  (./engine/constant):00307         buf_prev_x1_pixel             equ 15 ;
0000                  (./engine/constant):00308         buf_prev_y1_pixel             equ 16 ;
0000                  (./engine/constant):00309         buf_prev_xy2_pixel            equ 17 ;
0000                  (./engine/constant):00310         buf_prev_x2_pixel             equ 17 ;
0000                  (./engine/constant):00311         buf_prev_y2_pixel             equ 18 ;
0000                  (./engine/constant):00312         buf_prev_render_flags         equ 19 ;
                      (./engine/constant):00313          else
                      (./engine/constant):00314         * ---------------------------------------------------------------------------
                      (./engine/constant):00315         * reserved variables (engine) - buffer specific - overlay pack
                      (./engine/constant):00316         
     003A             (./engine/constant):00317         rsv_priority                  equ object_rsvd   ; internal value that hold priority in video buffer 0
     003B             (./engine/constant):00318         rsv_priority_prev_obj         equ object_rsvd+1 ; and +2 ; previous object (OST address) in display priority list for video buffer 0 (0000 if none) w
     003D             (./engine/constant):00319         rsv_priority_next_obj         equ object_rsvd+3 ; and +4 ; next object (OST address) in display priority list for video buffer 0 (0000 if none) w
                      (./engine/constant):00320         
                      (./engine/constant):00321         ; ---------------------------------------------------------------------------
                      (./engine/constant):00322         ; when childsprites are activated (i.e. bit #6 of render_flags set)
                      (./engine/constant):00323         ; object_base_size+ext_variables_size should cover at least 7+56 bytes 
                      (./engine/constant):00324         ; subtype is recovered
     0001             (./engine/constant):00325         mainspr_childsprites    equ   subtype         ; amount of child sprites
     0007             (./engine/constant):00326         mainspr_width           equ   run_object_next+2
     0008             (./engine/constant):00327         mainspr_height          equ   run_object_next+3
     0009             (./engine/constant):00328         mainspr_x_pos           equ   mainspr_height+1
     000B             (./engine/constant):00329         mainspr_y_pos           equ   mainspr_height+3
     000D             (./engine/constant):00330         mainspr_mapframe        equ   mainspr_height+5
     000F             (./engine/constant):00331         sub2_x_pos              equ   mainspr_x_pos+6
     0011             (./engine/constant):00332         sub2_y_pos              equ   mainspr_y_pos+6
     0013             (./engine/constant):00333         sub2_mapframe           equ   mainspr_mapframe+6
     0015             (./engine/constant):00334         sub3_x_pos              equ   sub2_x_pos+6
     0017             (./engine/constant):00335         sub3_y_pos              equ   sub2_y_pos+6
     0019             (./engine/constant):00336         sub3_mapframe           equ   sub2_mapframe+6
     001B             (./engine/constant):00337         sub4_x_pos              equ   sub3_x_pos+6
     001D             (./engine/constant):00338         sub4_y_pos              equ   sub3_y_pos+6
     001F             (./engine/constant):00339         sub4_mapframe           equ   sub3_mapframe+6
     0021             (./engine/constant):00340         sub5_x_pos              equ   sub4_x_pos+6
     0023             (./engine/constant):00341         sub5_y_pos              equ   sub4_y_pos+6
     0025             (./engine/constant):00342         sub5_mapframe           equ   sub4_mapframe+6
     0027             (./engine/constant):00343         sub6_x_pos              equ   sub5_x_pos+6
     0029             (./engine/constant):00344         sub6_y_pos              equ   sub5_y_pos+6
     002B             (./engine/constant):00345         sub6_mapframe           equ   sub5_mapframe+6
     002D             (./engine/constant):00346         sub7_x_pos              equ   sub6_x_pos+6
     002F             (./engine/constant):00347         sub7_y_pos              equ   sub6_y_pos+6
     0031             (./engine/constant):00348         sub7_mapframe           equ   sub6_mapframe+6
     0033             (./engine/constant):00349         sub8_x_pos              equ   sub7_x_pos+6
     0035             (./engine/constant):00350         sub8_y_pos              equ   sub7_y_pos+6
     0037             (./engine/constant):00351         sub8_mapframe           equ   sub7_mapframe+6
     0039             (./engine/constant):00352         sub9_x_pos              equ   sub8_x_pos+6
     003B             (./engine/constant):00353         sub9_y_pos              equ   sub8_y_pos+6
     003D             (./engine/constant):00354         sub9_mapframe           equ   sub8_mapframe+6
     0006             (./engine/constant):00355         next_subspr             equ   6 ; size of a subsprite data
                      (./engine/constant):00356          endc
                      (./engine/constant):00357          endc
                      (./global/global-p):00006             INCLUDE "./engine/macros.asm"
0000                  (./engine/macros.a):00001         _ldd MACRO
                      (./engine/macros.a):00002                 ldd   #((\1)*256)+\2
                      (./engine/macros.a):00003          ENDM
                      (./engine/macros.a):00004          
0000                  (./engine/macros.a):00005         _ldx MACRO
                      (./engine/macros.a):00006                 ldx   #((\1)*256)+\2
                      (./engine/macros.a):00007          ENDM
                      (./engine/macros.a):00008          
0000                  (./engine/macros.a):00009         _ldy MACRO
                      (./engine/macros.a):00010                 ldy   #((\1)*256)+\2
                      (./engine/macros.a):00011          ENDM
                      (./engine/macros.a):00012          
0000                  (./engine/macros.a):00013         _ldu MACRO
                      (./engine/macros.a):00014                 ldu   #((\1)*256)+\2
                      (./engine/macros.a):00015          ENDM  
                      (./engine/macros.a):00016          
0000                  (./engine/macros.a):00017         _lds MACRO
                      (./engine/macros.a):00018                 lds   #((\1)*256)+\2
                      (./engine/macros.a):00019          ENDM   
                      (./engine/macros.a):00020          
0000                  (./engine/macros.a):00021         _SetCartPageA MACRO
                      (./engine/macros.a):00022          IFDEF T2
                      (./engine/macros.a):00023                 jsr   SetCartPageA
                      (./engine/macros.a):00024          ELSE
                      (./engine/macros.a):00025                 sta   $E7E6                    ; selection de la page RAM en zone cartouche
                      (./engine/macros.a):00026          ENDC
                      (./engine/macros.a):00027          ENDM      
                      (./engine/macros.a):00028          
0000                  (./engine/macros.a):00029         _GetCartPageA MACRO
                      (./engine/macros.a):00030          IFDEF T2
                      (./engine/macros.a):00031                 jsr   GetCartPageA
                      (./engine/macros.a):00032          ELSE
                      (./engine/macros.a):00033                 lda   $E7E6
                      (./engine/macros.a):00034          ENDC
                      (./engine/macros.a):00035          ENDM
                      (./engine/macros.a):00036         
0000                  (./engine/macros.a):00037         _SetCartPageB MACRO
                      (./engine/macros.a):00038          IFDEF T2
                      (./engine/macros.a):00039                 jsr   SetCartPageB
                      (./engine/macros.a):00040          ELSE
                      (./engine/macros.a):00041                 stb   $E7E6                    ; selection de la page RAM en zone cartouche
                      (./engine/macros.a):00042          ENDC
                      (./engine/macros.a):00043          ENDM      
                      (./engine/macros.a):00044          
0000                  (./engine/macros.a):00045         _GetCartPageB MACRO
                      (./engine/macros.a):00046          IFDEF T2
                      (./engine/macros.a):00047                 jsr   GetCartPageB
                      (./engine/macros.a):00048          ELSE
                      (./engine/macros.a):00049                 ldb   $E7E6
                      (./engine/macros.a):00050          ENDC
                      (./engine/macros.a):00051          ENDM     
                      (./engine/macros.a):00052         
0000                  (./engine/macros.a):00053         _RunObjectSwap MACRO
                      (./engine/macros.a):00054                 ; param 1 : ObjID_
                      (./engine/macros.a):00055                 ; param 2 : Object data RAM address
                      (./engine/macros.a):00056                 ; manual launch of an object from a different dynamic memory page and not from the resident page 1
                      (./engine/macros.a):00057                 lda   Obj_Index_Page+\1
                      (./engine/macros.a):00058                 sta   PSR_Page   
                      (./engine/macros.a):00059                 ldd   Obj_Index_Address+2*\1
                      (./engine/macros.a):00060                 std   PSR_Address       
                      (./engine/macros.a):00061                 ldu   \2             
                      (./engine/macros.a):00062                 jsr   RunPgSubRoutine
                      (./engine/macros.a):00063          ENDM    
                      (./engine/macros.a):00064         
0000                  (./engine/macros.a):00065         _RunObjectSwapRoutine MACRO
                      (./engine/macros.a):00066                 ; param 1 : ObjID_
                      (./engine/macros.a):00067                 ; param 2 : Object routine
                      (./engine/macros.a):00068                 ; manual launch of an object from a different dynamic memory page and not from the resident page 1
                      (./engine/macros.a):00069                 lda   Obj_Index_Page+\1   
                      (./engine/macros.a):00070                 sta   PSR_Page   
                      (./engine/macros.a):00071                 ldd   Obj_Index_Address+2*\1
                      (./engine/macros.a):00072                 std   PSR_Address       
                      (./engine/macros.a):00073                 ldb   \2        
                      (./engine/macros.a):00074                 jsr   RunPgSubRoutine
                      (./engine/macros.a):00075          ENDM 
                      (./engine/macros.a):00076          
0000                  (./engine/macros.a):00077         _MountObject MACRO 
                      (./engine/macros.a):00078                 ; param 1 : ObjID_
                      (./engine/macros.a):00079                 ; manual mount of an object from the resident page 1
                      (./engine/macros.a):00080                 lda   Obj_Index_Page+\1
                      (./engine/macros.a):00081                 _SetCartPageA
                      (./engine/macros.a):00082                 ldx   Obj_Index_Address+2*\1
                      (./engine/macros.a):00083          ENDM
                      (./engine/macros.a):00084         
0000                  (./engine/macros.a):00085         _RunObject MACRO 
                      (./engine/macros.a):00086                 ; param 1 : ObjID_
                      (./engine/macros.a):00087                 ; param 2 : Object data RAM address
                      (./engine/macros.a):00088                 ; manual launch of an object from the resident page 1
                      (./engine/macros.a):00089                 _MountObject \1
                      (./engine/macros.a):00090                 ldu   \2        
                      (./engine/macros.a):00091                 jsr   ,x
                      (./engine/macros.a):00092          ENDM
                      (./engine/macros.a):00093         
0000                  (./engine/macros.a):00094         _RunObjectRoutineA MACRO 
                      (./engine/macros.a):00095                 ; param 1 : ObjID_
                      (./engine/macros.a):00096                 ; param 2 : Object routine
                      (./engine/macros.a):00097                 ; manual launch of an object from the resident page 1
                      (./engine/macros.a):00098                 ; this object does not need or have a data structure for this routine
                      (./engine/macros.a):00099                 _MountObject \1
                      (./engine/macros.a):00100                 lda   \2        
                      (./engine/macros.a):00101                 jsr   ,x
                      (./engine/macros.a):00102          ENDM
                      (./engine/macros.a):00103         
0000                  (./engine/macros.a):00104         _RunObjectRoutineB MACRO 
                      (./engine/macros.a):00105                 ; param 1 : ObjID_
                      (./engine/macros.a):00106                 ; param 2 : Object routine
                      (./engine/macros.a):00107                 ; manual launch of an object from the resident page 1
                      (./engine/macros.a):00108                 ; this object does not need or have a data structure for this routine
                      (./engine/macros.a):00109                 _MountObject \1
                      (./engine/macros.a):00110                 ldb   \2        
                      (./engine/macros.a):00111                 jsr   ,x
                      (./engine/macros.a):00112          ENDM
                      (./engine/macros.a):00113         
0000                  (./engine/macros.a):00114         _SwitchScreenBuffer MACRO
                      (./engine/macros.a):00115                 ldb   $E7E5
                      (./engine/macros.a):00116                 eorb  #1                       ; switch btw page 2 and 3
                      (./engine/macros.a):00117                 orb   #$02
                      (./engine/macros.a):00118                 stb   $E7E5
                      (./engine/macros.a):00119          ENDM
                      (./engine/macros.a):00120         
0000                  (./engine/macros.a):00121         _asld MACRO
                      (./engine/macros.a):00122                 aslb
                      (./engine/macros.a):00123                 rola
                      (./engine/macros.a):00124          ENDM        
                      (./engine/macros.a):00125          
0000                  (./engine/macros.a):00126         _asrd MACRO
                      (./engine/macros.a):00127                 asra
                      (./engine/macros.a):00128                 rorb
                      (./engine/macros.a):00129          ENDM      
                      (./engine/macros.a):00130          
0000                  (./engine/macros.a):00131         _lsld MACRO
                      (./engine/macros.a):00132                 lslb
                      (./engine/macros.a):00133                 rola
                      (./engine/macros.a):00134          ENDM        
                      (./engine/macros.a):00135          
0000                  (./engine/macros.a):00136         _lsrd MACRO
                      (./engine/macros.a):00137                 lsra
                      (./engine/macros.a):00138                 rorb
                      (./engine/macros.a):00139          ENDM
                      (./engine/macros.a):00140          
0000                  (./engine/macros.a):00141         _rold MACRO
                      (./engine/macros.a):00142                 rolb
                      (./engine/macros.a):00143                 rola
                      (./engine/macros.a):00144          ENDM    
                      (./engine/macros.a):00145          
0000                  (./engine/macros.a):00146         _rord MACRO
                      (./engine/macros.a):00147                 rora
                      (./engine/macros.a):00148                 rorb
                      (./engine/macros.a):00149          ENDM
                      (./engine/macros.a):00150         
0000                  (./engine/macros.a):00151         _negd MACRO
                      (./engine/macros.a):00152                 nega
                      (./engine/macros.a):00153                 negb
                      (./engine/macros.a):00154                 sbca  #0
                      (./engine/macros.a):00155          ENDM
                      (./engine/macros.a):00156         
0000                  (./engine/macros.a):00157         _cba MACRO
                      (./engine/macros.a):00158                 pshs  b
                      (./engine/macros.a):00159                 cmpa  ,s+
                      (./engine/macros.a):00160          ENDM
                      (./engine/macros.a):00161         
0000                  (./engine/macros.a):00162         _aba MACRO
                      (./engine/macros.a):00163                 pshs  b
                      (./engine/macros.a):00164                 adda  ,s+
                      (./engine/macros.a):00165          ENDM
                      (./engine/macros.a):00166         
0000                  (./engine/macros.a):00167         _sba MACRO
                      (./engine/macros.a):00168                 pshs  b
                      (./engine/macros.a):00169                 suba  ,s+
                      (./engine/macros.a):00170          ENDM
                      (./engine/macros.a):00171         
0000                  (./engine/macros.a):00172         _cab MACRO
                      (./engine/macros.a):00173                 pshs  a
                      (./engine/macros.a):00174                 cmpb  ,s+
                      (./engine/macros.a):00175          ENDM
                      (./engine/macros.a):00176         
0000                  (./engine/macros.a):00177         _aab MACRO
                      (./engine/macros.a):00178                 pshs  a
                      (./engine/macros.a):00179                 addb  ,s+
                      (./engine/macros.a):00180          ENDM
                      (./engine/macros.a):00181         
0000                  (./engine/macros.a):00182         _sab MACRO
                      (./engine/macros.a):00183                 pshs  a
                      (./engine/macros.a):00184                 subb  ,s+
                      (./engine/macros.a):00185          ENDM
                      (./engine/macros.a):00186         
0000                  (./engine/macros.a):00187         _breakpoint MACRO
                      (./engine/macros.a):00188          IFDEF DEBUG
                      (./engine/macros.a):00189                 pshs  CC
                      (./engine/macros.a):00190                 sta   >$ffff
                      (./engine/macros.a):00191                 puls  CC
                      (./engine/macros.a):00192          ENDC
                      (./engine/macros.a):00193          ENDM
                      (./global/global-p):00007             INCLUDE "./engine/system/to8/map.const.asm"
                      (./engine/system/t):00001         ; Thomson TO8 - Memory map
                      (./engine/system/t):00002         
                      (./engine/system/t):00003         ; -----------------------------------------------------------------------------
                      (./engine/system/t):00004         ; system addresses
                      (./engine/system/t):00005         
                      (./engine/system/t):00006         ; mc6846
     E7C0             (./engine/system/t):00007         map.MC6846.CSR      equ $E7C0
     E7C1             (./engine/system/t):00008         map.MC6846.CRC      equ $E7C1
     E7C2             (./engine/system/t):00009         map.MC6846.DDRC     equ $E7C2
     E7C3             (./engine/system/t):00010         map.MC6846.PRC      equ $E7C3 ; (bit0) set half ram page 0 (low or high) in video area ($4000-$5FFF)
     E7C4             (./engine/system/t):00011         map.MC6846.CSR2     equ $E7C4
     E7C5             (./engine/system/t):00012         map.MC6846.TCR      equ $E7C5 ; irq timer ctrl
     E7C6             (./engine/system/t):00013         map.MC6846.TMSB     equ $E7C6 ; irq timer MSB
     E7C7             (./engine/system/t):00014         map.MC6846.TLSB     equ $E7C7 ; irq timer LSB
                      (./engine/system/t):00015         
                      (./engine/system/t):00016         ; mc6821 system
     E7C8             (./engine/system/t):00017         map.MC6821.PRA      equ $E7C8
     E7C9             (./engine/system/t):00018         map.MC6821.PRB      equ $E7C9
     E7CA             (./engine/system/t):00019         map.MC6821.CRA      equ $E7CA
     E7CB             (./engine/system/t):00020         map.MC6821.CRB      equ $E7CB
                      (./engine/system/t):00021         
                      (./engine/system/t):00022         ; mc6821 music and game
     E7CC             (./engine/system/t):00023         map.MC6821.PRA1     equ $E7CC
     E7CD             (./engine/system/t):00024         map.MC6821.PRA2     equ $E7CD
     E7CE             (./engine/system/t):00025         map.MC6821.CRA1     equ $E7CE
     E7CF             (./engine/system/t):00026         map.MC6821.CRA2     equ $E7CF
                      (./engine/system/t):00027         
                      (./engine/system/t):00028         ; thmfc01 gate controler floppy disk
     E7D0             (./engine/system/t):00029         map.THMFC01.STAT0   equ $E7D0
     E7D0             (./engine/system/t):00030         map.THMFC01.CMD0    equ $E7D0
     E7D1             (./engine/system/t):00031         map.THMFC01.STAT1   equ $E7D1
     E7D1             (./engine/system/t):00032         map.THMFC01.CMD1    equ $E7D1
     E7D2             (./engine/system/t):00033         map.THMFC01.CMD2    equ $E7D2
     E7D3             (./engine/system/t):00034         map.THMFC01.WDATA   equ $E7D3
     E7D3             (./engine/system/t):00035         map.THMFC01.RDATA   equ $E7D3
     E7D4             (./engine/system/t):00036         map.THMFC01.WCLK    equ $E7D4
     E7D5             (./engine/system/t):00037         map.THMFC01.WSECT   equ $E7D5
     E7D6             (./engine/system/t):00038         map.THMFC01.TRCK    equ $E7D6
     E7D7             (./engine/system/t):00039         map.THMFC01.CELL    equ $E7D7
                      (./engine/system/t):00040         
                      (./engine/system/t):00041         ; ef9369 palette
     E7DA             (./engine/system/t):00042         map.EF9369.D        equ $E7DA
     E7DB             (./engine/system/t):00043         map.EF9369.A        equ $E7DB
                      (./engine/system/t):00044         
                      (./engine/system/t):00045         ; cf74021 gate array page mode - (TO8D: EFG2021FN)
     E7DC             (./engine/system/t):00046         map.CF74021.LGAMOD  equ $E7DC
     E7DD             (./engine/system/t):00047         map.CF74021.SYS2    equ $E7DD ; (bit0-3) set screen border color, (bit6-7) set onscreen video memory page
     E7E4             (./engine/system/t):00048         map.CF74021.COM     equ $E7E4
     E7E5             (./engine/system/t):00049         map.CF74021.DATA    equ $E7E5 ; (bit0-4) set ram page in data area ($A000-$DFFF)
     E7E6             (./engine/system/t):00050         map.CF74021.CART    equ $E7E6 ; (bit0-4) set page in cartridge area ($0000-$3FFF), (bit5) ram over cartridge, (bit6) write enable
     E7E7             (./engine/system/t):00051         map.CF74021.SYS1    equ $E7E7
                      (./engine/system/t):00052         
                      (./engine/system/t):00053         ; extension port
     00E7             (./engine/system/t):00054         map.EXTPORT         equ $E7
     E7F0             (./engine/system/t):00055         map.IEEE488         equ $E7F0 ; to E7F7
     E7F2             (./engine/system/t):00056         map.EF5860.CTRL     equ $E7F2 ; MIDI
     E7F3             (./engine/system/t):00057         map.EF5860.TX       equ $E7F3 ; MIDI
                      (./engine/system/t):00058          ifndef SOUND_CARD_PROTOTYPE
0000                  (./engine/system/t):00059         map.YM2413.A        equ $E7FC
0000                  (./engine/system/t):00060         map.YM2413.D        equ $E7FD
0000                  (./engine/system/t):00061         map.SN76489.D       equ $E7F7
                      (./engine/system/t):00062          else
     E7FC             (./engine/system/t):00063         map.YM2413.A        equ $E7FC
     E7FD             (./engine/system/t):00064         map.YM2413.D        equ $E7FD
     E7FF             (./engine/system/t):00065         map.SN76489.D       equ $E7FF
                      (./engine/system/t):00066          endc
     E7FE             (./engine/system/t):00067         map.MEA8000.D       equ $E7FE
     E7FF             (./engine/system/t):00068         map.MEA8000.A       equ $E7FF
                      (./engine/system/t):00069         
                      (./engine/system/t):00070         ; ROM routines
     E806             (./engine/system/t):00071         map.GETC            equ $E806
     E809             (./engine/system/t):00072         map.KTST            equ $E809
     E82A             (./engine/system/t):00073         map.DKCO            equ $E82A ; read or write floppy disk routine
     E830             (./engine/system/t):00074         map.IRQ.EXIT        equ $E830 ; to exit an irq
                      (./engine/system/t):00075         
                      (./engine/system/t):00076         ; system variables
     6019             (./engine/system/t):00077         map.STATUS          equ $6019 ; status bitfield
     6048             (./engine/system/t):00078         map.DK.OPC          equ $6048 ; operation
     6049             (./engine/system/t):00079         map.DK.DRV          equ $6049 ; drive
     604C             (./engine/system/t):00080         map.DK.SEC          equ $604C ; sector
     604A             (./engine/system/t):00081         map.DK.TRK          equ $604A ; $604B ; track
     604E             (./engine/system/t):00082         map.DK.STA          equ $604E ; return status
     604F             (./engine/system/t):00083         map.DK.BUF          equ $604F ; $6050 ; data write location
     6023             (./engine/system/t):00084         map.FIRQPT          equ $6023 ; routine firq
     6027             (./engine/system/t):00085         map.TIMERPT         equ $6027 ; routine irq timer
     6081             (./engine/system/t):00086         map.CF74021.SYS1.R  equ $6081 ; reading value for map.CF74021.SYS1
                      (./engine/system/t):00087         
                      (./engine/system/t):00088         ; -----------------------------------------------------------------------------
                      (./engine/system/t):00089         ; constants
                      (./engine/system/t):00090         
     0035             (./engine/system/t):00091         map.EF5860.TX_IRQ_ON  equ %00110101 ; 8bits, no parity check, stop 1, tx interrupt
     0015             (./engine/system/t):00092         map.EF5860.TX_IRQ_OFF equ %00010101 ; 8bits, no parity check, stop 1, no interrupt
     4DFF             (./engine/system/t):00093         map.IRQ.ONE_FRAME     equ 312*64-1  ; one frame timer (lines*cycles_per_lines-1), timer launch at -1
                      (./engine/system/t):00094         
                      (./engine/system/t):00095         ; -----------------------------------------------------------------------------
                      (./engine/system/t):00096         ; mapping to generic names
                      (./engine/system/t):00097         
     ????             (./engine/system/t):00098         map.DAC            equ map.mc6821.PRA2
     ????             (./engine/system/t):00099         map.RND            equ map.cf74021.CART
                      (./global/global-p):00008         
                      (./global/global-p):00009             INCLUDE "./global/global-equates.asm"
                      (./global/global-e):00001          IFNDEF GLOBAL_EQUATES
     0001             (./global/global-e):00002         GLOBAL_EQUATES EQU 1
                      (./global/global-e):00003         * Graphics
     7F7F             (./global/global-e):00004         XY_CENTERED_FULL_IMAGE  EQU $7F7F 
     0007             (./global/global-e):00005         LAYER_BACKGROUND        EQU 7 
     00FF             (./global/global-e):00006         OUT_OF_SYNC_VBL         EQU 255
     0001             (./global/global-e):00007         MUSIC_LOOP              EQU 1
     0000             (./global/global-e):00008         NO_CALLBACK             EQU $0000
                      (./global/global-e):00009          ENDC
                      (./global/global-p):00010             INCLUDE "./global/global-macros.asm"
                      (./global/global-m):00001         
0000                  (./global/global-m):00002         _objectManager.new.u MACRO
                      (./global/global-m):00003             jsr   LoadObject_u
                      (./global/global-m):00004             lda   \1
                      (./global/global-m):00005             sta   id,u
                      (./global/global-m):00006             ENDM
                      (./global/global-m):00007         
0000                  (./global/global-m):00008         _objectManager.new.x MACRO
                      (./global/global-m):00009             jsr   LoadObject_x
                      (./global/global-m):00010             lda   \1
                      (./global/global-m):00011             sta   id,x
                      (./global/global-m):00012             ENDM    
                      (./global/global-m):00013         
0000                  (./global/global-m):00014         _object.routines.init MACRO
                      (./global/global-m):00015             lda   routine,u
                      (./global/global-m):00016             asla
                      (./global/global-m):00017             ldx   \1
                      (./global/global-m):00018             jmp   [a,x]  
                      (./global/global-m):00019             ENDM     
                      (./global/global-m):00020         
0000                  (./global/global-m):00021         _object.routines.next MACRO
                      (./global/global-m):00022             inc routine,u
                      (./global/global-m):00023             ENDM      
                      (./global/global-m):00024         
0000                  (./global/global-m):00025         _music.init.SN76489 MACRO
                      (./global/global-m):00026             ldx   \1
                      (./global/global-m):00027             ldb   \2
                      (./global/global-m):00028             ldy   \3
                      (./global/global-m):00029             jsr   vgc_init 
                      (./global/global-m):00030             ENDM
                      (./global/global-m):00031         
0000                  (./global/global-m):00032         _music.init.YM2413 MACRO
                      (./global/global-m):00033             ldx   \1
                      (./global/global-m):00034             ldb   \2
                      (./global/global-m):00035             ldy   \3
                      (./global/global-m):00036             jsr   YVGM_PlayMusic 
                      (./global/global-m):00037             ENDM
                      (./global/global-m):00038         
0000                  (./global/global-m):00039         _music.init.IRQ    MACRO
                      (./global/global-m):00040             jsr   IrqInit
                      (./global/global-m):00041             ldd   \1
                      (./global/global-m):00042             std   Irq_user_routine
                      (./global/global-m):00043             lda   \2                     
                      (./global/global-m):00044             ldx   \3
                      (./global/global-m):00045             jsr   IrqSync
                      (./global/global-m):00046             jsr   IrqOn  
                      (./global/global-m):00047             ENDM
                      (./global/global-m):00048         
0000                  (./global/global-m):00049         _gameMode.init MACRO
                      (./global/global-m):00050             jsr   InitGlobals
                      (./global/global-m):00051             jsr   InitStack
                      (./global/global-m):00052             jsr   LoadAct
                      (./global/global-m):00053             jsr   InitJoypads
                      (./global/global-m):00054             lda   \1
                      (./global/global-m):00055             sta   glb_Cur_Game_Mode
                      (./global/global-m):00056             ENDM   
                      (./global/global-m):00057         
                      (./global/global-m):00058         
                      (./global/global-m):00059         
0000                  (./global/global-m):00060         _image.set.u MACRO
                      (./global/global-m):00061                 ldd   \1   
                      (./global/global-m):00062                 std   image_set,u
                      (./global/global-m):00063                 ldd   \2
                      (./global/global-m):00064                 std   xy_pixel,u
                      (./global/global-m):00065                 ldb   \3
                      (./global/global-m):00066                 stb   priority,u
                      (./global/global-m):00067                 lda   render_flags,u
                      (./global/global-m):00068                 ora   \4
                      (./global/global-m):00069                 sta   render_flags,u
                      (./global/global-m):00070                 ENDM    
                      (./global/global-m):00071         
0000                  (./global/global-m):00072         _image.update.u MACRO
                      (./global/global-m):00073                 ldd   \1   
                      (./global/global-m):00074                 std   image_set,u    
                      (./global/global-m):00075                 ENDM            
                      (./global/global-m):00076         
0000                  (./global/global-m):00077         _palette.set MACRO
                      (./global/global-m):00078                 ldd   \1
                      (./global/global-m):00079                 std   Pal_current
                      (./global/global-m):00080                 ENDM   
                      (./global/global-m):00081         
0000                  (./global/global-m):00082         _palette.show MACRO
                      (./global/global-m):00083                 clr   PalRefresh
                      (./global/global-m):00084                 jsr   PalUpdateNow
                      (./global/global-m):00085                 ENDM     
                      (./global/global-m):00086         
0000                  (./global/global-m):00087         _palette.fade MACRO                    
                      (./global/global-m):00088                 jsr   LoadObject_x
                      (./global/global-m):00089                 stx   \3
                      (./global/global-m):00090                 lda   #ObjID_PaletteFade
                      (./global/global-m):00091                 sta   id,x                 
                      (./global/global-m):00092                 ldd   \1
                      (./global/global-m):00093                 std   o_fade_src,x     ; _src
                      (./global/global-m):00094                 ldd   \2
                      (./global/global-m):00095                 std   o_fade_dst,x   ; _dest 
                      (./global/global-m):00096                 ldd   \4
                      (./global/global-m):00097                 std   o_fade_sleep,x   ; _sleep time before start
                      (./global/global-m):00098                 ldd   \5
                      (./global/global-m):00099                 std   o_fade_callback,x   ; _callback
                      (./global/global-m):00100                 ldd   \6
                      (./global/global-m):00101                 std   o_fade_unload,x   ; _unload
                      (./global/global-m):00102         
                      (./global/global-m):00103                 ENDM
                      (./global/global-m):00104         
0000                  (./global/global-m):00105         _joysticks.test MACRO
                      (./global/global-m):00106                 ldb   \1
                      (./global/global-m):00107                 bitb  \2
                      (./global/global-m):00108                 ENDM        
                      (./global/global-m):00109         
0000                  (./global/global-m):00110         _system.reboot MACRO
                      (./global/global-m):00111                 jsr IrqOff
                      (./global/global-m):00112                 jsr sn_reset
                      (./global/global-m):00113                 jsr YVGM_SilenceAll
                      (./global/global-m):00114                 ldd #$A55A   ; boot signature part 1      
                      (./global/global-m):00115                 std $60FE
                      (./global/global-m):00116                 lda #$40     ; boot signature part 2
                      (./global/global-m):00117                 sta $605F
                      (./global/global-m):00118                 com $60D1    ; changing boot signature, to avoid booting to basic after a first boot from disk
                      (./global/global-m):00119                 jmp [$FFFE]
                      (./global/global-m):00120                 ENDM
                      (./global/global-p):00011             INCLUDE "./global/global-variables.asm"
                      (./global/global-v):00001          IFNDEF GLOBAL_VARIABLES
                      (./global/global-v):00002         
     9DF0             (./global/global-v):00003         GLOBAL_VARIABLES EQU $9DF0
                      (./global/global-v):00004         
     9DF0             (./global/global-v):00005         PALETTE_FADER EQU GLOBAL_VARIABLES+0 ; 2 bytes
     9DF2             (./global/global-v):00006         NEXT_GAME_MODE_PRESENT EQU GLOBAL_VARIABLES+2 ; 2 byte
     9DF4             (./global/global-v):00007         NEXT_GAME_MODE EQU GLOBAL_VARIABLES+4 ; 1 byte
                      (./global/global-v):00008         
                      (./global/global-v):00009          ENDC
                      (./global/global-p):00012         
                      (./global/global-p):00013             INCLUDE "./engine/objects/palette/fade/fade.equ"
                      (./engine/objects/):00001         * ---------------------------------------------------------------------------
                      (./engine/objects/):00002         * Object Status Table offsets
                      (./engine/objects/):00003         * ---------------------------------------------------------------------------
                      (./engine/objects/):00004          IFNDEF o_fade_src
     0026             (./engine/objects/):00005         o_fade_src      equ ext_variables         * ptr to source pal
     0028             (./engine/objects/):00006         o_fade_dst      equ ext_variables+2       * ptr to destination pal
     002A             (./engine/objects/):00007         o_fade_mask     equ ext_variables+4       * masque pour l'aternance du traitemet vert/rouge
     002B             (./engine/objects/):00008         o_fade_cycles   equ ext_variables+5       * nb of color steps
     002C             (./engine/objects/):00009         o_fade_save     equ ext_variables+6       * buffer de comparaison
     002E             (./engine/objects/):00010         o_fade_idx      equ ext_variables+8       * index de la couleur courante dans le traitement 
     002F             (./engine/objects/):00011         o_fade_curwait  equ ext_variables+9       * current wait time
     0030             (./engine/objects/):00012         o_fade_wait     equ ext_variables+10      * wait time
     0031             (./engine/objects/):00013         o_fade_callback equ ext_variables+11      * callback addr when fade is over
     0033             (./engine/objects/):00014         o_fade_sleep    equ ext_variables+13      * prochain déclenchement du fader (depuis Vint_runcount)
     0035             (./engine/objects/):00015         o_fade_unload   equ ext_variables+15      * 00 = pas de unload ; différent de 00 : unload automatique 
                      (./engine/objects/):00016         
     0003             (./engine/objects/):00017         o_fade_routine_idle equ 3
                      (./engine/objects/):00018          ENDC
                      (/home/robin/githu):00008                 INCLUDE "./engine/graphics/buffer/gfxlock.macro.asm"
                      (./engine/graphics):00001         * =============================================================================
                      (./engine/graphics):00002         * macros
                      (./engine/graphics):00003         * =============================================================================
                      (./engine/graphics):00004         
0000                  (./engine/graphics):00005         _gfxlock.init MACRO
                      (./engine/graphics):00006                 lda   #-1
                      (./engine/graphics):00007                 sta   gfxlock.status
                      (./engine/graphics):00008                 lda   gfxlock.backBuffer.status ; init backBuffer.id based on backBuffer.status
                      (./engine/graphics):00009                 anda  #%00000001
                      (./engine/graphics):00010                 sta   gfxlock.backBuffer.id     ; id is 0 or 1
                      (./engine/graphics):00011          ENDM
                      (./engine/graphics):00012         
0000                  (./engine/graphics):00013         _gfxlock.on MACRO
                      (./engine/graphics):00014                 lda   gfxlock.status
                      (./engine/graphics):00015                 bne   >
                      (./engine/graphics):00016                 jsr   gfxlock.bufferSwap.wait  ; wait if second gfx frame is reached
                      (./engine/graphics):00017         !       lda   #1
                      (./engine/graphics):00018                 sta   gfxlock.status
                      (./engine/graphics):00019          ENDM
                      (./engine/graphics):00020         
0000                  (./engine/graphics):00021         _gfxlock.off MACRO
                      (./engine/graphics):00022                 clr   gfxlock.status
                      (./engine/graphics):00023          ENDM
                      (./engine/graphics):00024         
0000                  (./engine/graphics):00025         _gfxlock.loop MACRO
                      (./engine/graphics):00026                 lda   gfxlock.backBuffer.id    ; switch id at the end of gfxlock
                      (./engine/graphics):00027                 eora  #%00000001
                      (./engine/graphics):00028                 sta   gfxlock.backBuffer.id
                      (./engine/graphics):00029                 ldd   gfxlock.frame.count
                      (./engine/graphics):00030                 subd  gfxlock.frame.lastCount
                      (./engine/graphics):00031                 stb   gfxlock.frameDrop.count  ; store the number of elapsed 50Hz frames since last main game loop
                      (./engine/graphics):00032                 ldd   gfxlock.frame.count
                      (./engine/graphics):00033                 std   gfxlock.frame.lastCount
                      (./engine/graphics):00034          ENDM
                      (./engine/graphics):00035         
0000                  (./engine/graphics):00036         _gfxlock.backProcess.on MACRO
                      (./engine/graphics):00037                 ; param 1 : routine address
                      (./engine/graphics):00038                 ldd   #\1
                      (./engine/graphics):00039                 std   gfxlock.backProcess
                      (./engine/graphics):00040                 lda   #1
                      (./engine/graphics):00041                 sta   gfxlock.backProcess.status
                      (./engine/graphics):00042          ENDM
                      (./engine/graphics):00043         
0000                  (./engine/graphics):00044         _gfxlock.backProcess.off MACRO
                      (./engine/graphics):00045                 clr   gfxlock.backProcess.status
                      (./engine/graphics):00046          ENDM
                      (/home/robin/githu):00009         
                      (/home/robin/githu):00010                 org   $6100
                      (/home/robin/githu):00011         
                      (/home/robin/githu):00012                 opt cd
                      (/home/robin/githu):00013         
                      (/home/robin/githu):00014         
                      (/home/robin/githu):00015         ; DEV SCROLL BUFFER
6100                  (/home/robin/githu):00016         _mountScrollBuffer MACRO
                      (/home/robin/githu):00017                ldb   VS_ObjID\1
                      (/home/robin/githu):00018                ldx   #Obj_Index_Page
                      (/home/robin/githu):00019                lda   b,x   
                      (/home/robin/githu):00020                _SetCartPageA
                      (/home/robin/githu):00021                aslb
                      (/home/robin/githu):00022                ldx   #Obj_Index_Address
                      (/home/robin/githu):00023                ldx   b,x                      ; set buffer code address in x
                      (/home/robin/githu):00024                ENDM   
                      (/home/robin/githu):00025         
                      (/home/robin/githu):00026         
                      (/home/robin/githu):00027         * ============================================================================== 
                      (/home/robin/githu):00028         * Init
                      (/home/robin/githu):00029         * ============================================================================== 
                      (/home/robin/githu):00030                 _gameMode.init #GmID_scrollscreen
6100 BD6891           (   _gameMode.init):00001 [8]         jsr   InitGlobals
6103 BD6A36           (   _gameMode.init):00002 [8]         jsr   InitStack
6106 BD7C35           (   _gameMode.init):00003 [8]         jsr   LoadAct
6109 BD6BD9           (   _gameMode.init):00004 [8]         jsr   InitJoypads
610C 8600             (   _gameMode.init):00005 [2]         lda   #GmID_scrollscreen
610E B769F2           (   _gameMode.init):00006 [5]         sta   glb_Cur_Game_Mode
                      (/home/robin/githu):00031                 _gfxlock.init
6111 86FF             (    _gfxlock.init):00001 [2]             lda   #-1
6113 B7677B           (    _gfxlock.init):00002 [5]             sta   gfxlock.status
6116 B667A3           (    _gfxlock.init):00003 [5]             lda   gfxlock.backBuffer.status ; init backBuffer.id based on backBuffer.status
6119 8401             (    _gfxlock.init):00004 [2]             anda  #%00000001
611B B76780           (    _gfxlock.init):00005 [5]             sta   gfxlock.backBuffer.id     ; id is 0 or 1
                      (/home/robin/githu):00032                 _music.init.IRQ #UserIRQ,#OUT_OF_SYNC_VBL,#Irq_one_frame         ; Setting IRQ for music
611E BD6C27           (  _music.init.IRQ):00001 [8]         jsr   IrqInit
6121 CC6186           (  _music.init.IRQ):00002 [3]         ldd   #UserIRQ
6124 FD6C25           (  _music.init.IRQ):00003 [6]         std   Irq_user_routine
6127 86FF             (  _music.init.IRQ):00004 [2]         lda   #OUT_OF_SYNC_VBL                     
6129 8E4DFF           (  _music.init.IRQ):00005 [3]         ldx   #Irq_one_frame
612C BD6C7B           (  _music.init.IRQ):00006 [8]         jsr   IrqSync
612F BD6C3D           (  _music.init.IRQ):00007 [8]         jsr   IrqOn  
                      (/home/robin/githu):00033                 _palette.set #Palette_scrollscreen
6132 CC7C00           (     _palette.set):00001 [3]             ldd   #Palette_scrollscreen
6135 FD6915           (     _palette.set):00002 [6]             std   Pal_current
                      (/home/robin/githu):00034                 _palette.show
6138 7F6914           (    _palette.show):00001 [7]             clr   PalRefresh
613B BD6937           (    _palette.show):00002 [8]             jsr   PalUpdateNow
                      (/home/robin/githu):00035                 
                      (/home/robin/githu):00036         
                      (/home/robin/githu):00037         * init scroll
613E 8601             (/home/robin/githu):00038 [2]             lda   #ObjID_scrollA
6140 B767D5           (/home/robin/githu):00039 [5]             sta   VS_ObjIDA
6143 8602             (/home/robin/githu):00040 [2]             lda   #ObjID_scrollB
6145 B767D6           (/home/robin/githu):00041 [5]             sta   VS_ObjIDB
                      (/home/robin/githu):00042         
6148 8601             (/home/robin/githu):00043 [2]             lda   #1
614A B767D7           (/home/robin/githu):00044 [5]             sta   VS_scroll_step
                      (/home/robin/githu):00045         
614D 860A             (/home/robin/githu):00046 [2]             lda   #10
614F B767D9           (/home/robin/githu):00047 [5]             sta   VS_viewport_line_pos
6152 8678             (/home/robin/githu):00048 [2]             lda   #120
6154 B7681B           (/home/robin/githu):00049 [5]             sta   VS_viewport_size
6157 BD67D8           (/home/robin/githu):00050 [8]             jsr   VerticalScrollUpdateViewport
                      (/home/robin/githu):00051         
                      (/home/robin/githu):00052                 ;_mountScrollBuffer A ; X points to the address of the Scroll Buffer A
                      (/home/robin/githu):00053                 ;jsr InitScrollBuffer
                      (/home/robin/githu):00054                 ;_mountScrollBuffer B ; X points to the address of the Scroll Buffer B
                      (/home/robin/githu):00055                 ;jsr InitScrollBuffer
                      (/home/robin/githu):00056         
                      (/home/robin/githu):00057         * ============================================================================== * Main Loop
                      (/home/robin/githu):00058         * ==============================================================================
615A                  (/home/robin/githu):00059         LevelMainLoop
615A BD67E7           (/home/robin/githu):00060 [8]             jsr   VerticalScrollMoveUp
                      (/home/robin/githu):00061                 _gfxlock.on
615D B6677B           (      _gfxlock.on):00001 [5]             lda   gfxlock.status
6160 2603             (      _gfxlock.on):00002 [3]             bne   >
6162 BD67BF           (      _gfxlock.on):00003 [8]             jsr   gfxlock.bufferSwap.wait  ; wait if second gfx frame is reached
6165 8601             (      _gfxlock.on):00004 [2]     !       lda   #1
6167 B7677B           (      _gfxlock.on):00005 [5]             sta   gfxlock.status
                      (/home/robin/githu):00062                 ;jsr   VerticalScroll                           
                      (/home/robin/githu):00063                 _gfxlock.off
616A 7F677B           (     _gfxlock.off):00001 [7]             clr   gfxlock.status
                      (/home/robin/githu):00064                 _gfxlock.loop
616D B66780           (    _gfxlock.loop):00001 [5]             lda   gfxlock.backBuffer.id    ; switch id at the end of gfxlock
6170 8801             (    _gfxlock.loop):00002 [2]             eora  #%00000001
6172 B76780           (    _gfxlock.loop):00003 [5]             sta   gfxlock.backBuffer.id
6175 FC6783           (    _gfxlock.loop):00004 [6]             ldd   gfxlock.frame.count
6178 B36785           (    _gfxlock.loop):00005 [7]             subd  gfxlock.frame.lastCount
617B F76782           (    _gfxlock.loop):00006 [5]             stb   gfxlock.frameDrop.count  ; store the number of elapsed 50Hz frames since last main game loop
617E FC6783           (    _gfxlock.loop):00007 [6]             ldd   gfxlock.frame.count
6181 FD6785           (    _gfxlock.loop):00008 [6]             std   gfxlock.frame.lastCount
6184 20D4             (/home/robin/githu):00065 [3]             bra   LevelMainLoop
                      (/home/robin/githu):00066         
                      (/home/robin/githu):00067         
6186                  (/home/robin/githu):00068         UserIRQ
6186 BD6787           (/home/robin/githu):00069 [8]             jsr   gfxlock.bufferSwap.check
6189 BD6937           (/home/robin/githu):00070 [8]             jsr   PalUpdateNow
618C 39               (/home/robin/githu):00071 [5]             rts
                      (/home/robin/githu):00072         
                      (/home/robin/githu):00073         
                      (/home/robin/githu):00074          
                      (/home/robin/githu):00075         
618D                  (/home/robin/githu):00076         ScrollChunk_Start
618D CC0000           (/home/robin/githu):00077 [3]            LDD #$0000
6190 8E0000           (/home/robin/githu):00078 [3]            LDX #$0000
6193 108E0000         (/home/robin/githu):00079 [4]            LDY #$0000
6197 CE0000           (/home/robin/githu):00080 [3]            LDU #$0000
619A 3476             (/home/robin/githu):00081 [5+8]          PSHS D,X,Y,U
619C                  (/home/robin/githu):00082         ScrollChunk_End
                      (/home/robin/githu):00083         
619C 0F               (/home/robin/githu):00084         currentColor FCB $0F
                      (/home/robin/githu):00085         
619D                  (/home/robin/githu):00086         UpdateScrollChunkColor
                      (/home/robin/githu):00087                _breakpoint
                      (      _breakpoint):00001          IFDEF DEBUG
619D 3401             (      _breakpoint):00002 [5+1]           pshs  CC
619F B7FFFF           (      _breakpoint):00003 [5]             sta   >$ffff
61A2 3501             (      _breakpoint):00004 [5+1]           puls  CC
                      (      _breakpoint):00005          ENDC
61A4 3416             (/home/robin/githu):00088 [5+4]          PSHS D,X
61A6 CE618D           (/home/robin/githu):00089 [3]            LDU #ScrollChunk_Start
61A9 B6619C           (/home/robin/githu):00090 [5]            LDA currentColor
61AC 48               (/home/robin/githu):00091 [2]            LSLA
61AD 48               (/home/robin/githu):00092 [2]            LSLA
61AE 48               (/home/robin/githu):00093 [2]            LSLA
61AF 48               (/home/robin/githu):00094 [2]            LSLA
61B0 BA619C           (/home/robin/githu):00095 [5]            ORA currentColor
61B3 1F89             (/home/robin/githu):00096 [6]            TFR A,B
61B5 ED41             (/home/robin/githu):00097 [5+1]          STD 1,U  ; offset 1
61B7 ED44             (/home/robin/githu):00098 [5+1]          STD 4,U  ; offset 4
61B9 ED48             (/home/robin/githu):00099 [5+1]          STD 8,U  ; offset 8
61BB ED4B             (/home/robin/githu):00100 [5+1]          STD 11,U ; offset 11
61BD 7A619C           (/home/robin/githu):00101 [7]            DEC currentColor
61C0 2605             (/home/robin/githu):00102 [3]            BNE @exit
61C2 860F             (/home/robin/githu):00103 [2]            LDA #$0F
61C4 B7619C           (/home/robin/githu):00104 [5]            STA currentColor
61C7 3516             (/home/robin/githu):00105 [5+4]   @exit  PULS D,X
61C9 39               (/home/robin/githu):00106 [5]            RTS
                      (/home/robin/githu):00107         
                      (/home/robin/githu):00108          
                      (/home/robin/githu):00109         
61CA                  (/home/robin/githu):00110         WriteScrollChunk ; X contains the address to write the scroll chunk
61CA CE618D           (/home/robin/githu):00111 [3]            LDU #ScrollChunk_Start ; U will iterate over the scroll chunk data
61CD                  (/home/robin/githu):00112         @loop     
61CD A6C0             (/home/robin/githu):00113 [4+2]          LDA ,U+                  ; loading byte         
61CF A780             (/home/robin/githu):00114 [4+2]          STA ,X+                  ; storing A
61D1 1183619C         (/home/robin/githu):00115 [5]            CMPU #ScrollChunk_End
61D5 26F6             (/home/robin/githu):00116 [3]            BNE @loop                ; end of the scroll chunk is not reached
61D7 39               (/home/robin/githu):00117 [5]            RTS
                      (/home/robin/githu):00118         
61D8                  (/home/robin/githu):00119         WriteScrollLine ; X contains the address to write the scroll chunk
61D8 BD619D           (/home/robin/githu):00120 [8]           JSR UpdateScrollChunkColor
61DB C605             (/home/robin/githu):00121 [2]           LDB #5    ; 5 scroll chunks in a ligne
                      (/home/robin/githu):00122         
61DD BD61CA           (/home/robin/githu):00123 [8]     @loop JSR WriteScrollChunk
61E0 5A               (/home/robin/githu):00124 [2]           DECB
61E1 26FA             (/home/robin/githu):00125 [3]           BNE @loop        
61E3 39               (/home/robin/githu):00126 [5]           RTS
                      (/home/robin/githu):00127         
61E4                  (/home/robin/githu):00128         InitScrollBuffer
                      (/home/robin/githu):00129               _breakpoint
                      (      _breakpoint):00001          IFDEF DEBUG
61E4 3401             (      _breakpoint):00002 [5+1]           pshs  CC
61E6 B7FFFF           (      _breakpoint):00003 [5]             sta   >$ffff
61E9 3501             (      _breakpoint):00004 [5+1]           puls  CC
                      (      _breakpoint):00005          ENDC
61EB 860F             (/home/robin/githu):00130 [2]           LDA #$0F
61ED B7619C           (/home/robin/githu):00131 [5]           STA currentColor
61F0 108E00C9         (/home/robin/githu):00132 [4]           LDY #VS_buffer_size
61F4 BF6203           (/home/robin/githu):00133 [6]           STX buffer_loop_addr
61F7                  (/home/robin/githu):00134         @loop
61F7 BD61D8           (/home/robin/githu):00135 [8]           JSR WriteScrollLine
61FA 313F             (/home/robin/githu):00136 [4+1]         LEAY -1,Y
61FC 26F9             (/home/robin/githu):00137 [3]           BNE @loop
61FE 867E             (/home/robin/githu):00138 [2]           LDA #$7E
6200 A780             (/home/robin/githu):00139 [4+2]         STA ,X+
6202 CC0000           (/home/robin/githu):00140 [3]           LDD #$0000
     6203             (/home/robin/githu):00141         buffer_loop_addr EQU *-2      
6205 ED84             (/home/robin/githu):00142 [5+0]         STD ,X
                      (/home/robin/githu):00143               _breakpoint
                      (      _breakpoint):00001          IFDEF DEBUG
6207 3401             (      _breakpoint):00002 [5+1]           pshs  CC
6209 B7FFFF           (      _breakpoint):00003 [5]             sta   >$ffff
620C 3501             (      _breakpoint):00004 [5+1]           puls  CC
                      (      _breakpoint):00005          ENDC
620E 39               (/home/robin/githu):00144 [5]           RTS
                      (/home/robin/githu):00145         
                      (/home/robin/githu):00146         
                      (/home/robin/githu):00147         
                      (/home/robin/githu):00148              
                      (/home/robin/githu):00149                           
                      (/home/robin/githu):00150         
                      (/home/robin/githu):00151         * ---------------------------------------------------------------------------
                      (/home/robin/githu):00152         * Game Mode RAM variables
                      (/home/robin/githu):00153         * ---------------------------------------------------------------------------
                      (/home/robin/githu):00154         
                      (/home/robin/githu):00155                 INCLUDE "./game-mode/scrollscreen/ram-data.asm"
                      (./game-mode/scrol):00001         
                      (./game-mode/scrol):00002         ; ext_variables_size is for dynamic objects
     0014             (./game-mode/scrol):00003         ext_variables_size                equ 20
                      (./game-mode/scrol):00004         
                      (./game-mode/scrol):00005         * ===========================================================================
                      (./game-mode/scrol):00006         * Object Constants
                      (./game-mode/scrol):00007         * ===========================================================================
     0014             (./game-mode/scrol):00008         nb_dynamic_objects           equ 20
     0014             (./game-mode/scrol):00009         nb_graphical_objects         equ 20 * max 64 total
                      (./game-mode/scrol):00010         * ===========================================================================
                      (./game-mode/scrol):00011         * Object Status Table - OST
                      (./game-mode/scrol):00012         * ===========================================================================
     9F00             (./game-mode/scrol):00013         MainCharacter                 equ dp
                      (./game-mode/scrol):00014         
620F 0000000000000000 (./game-mode/scrol):00015         Dynamic_Object_RAM            fill  0,(nb_dynamic_objects)*object_size
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     00000000
66FB                  (./game-mode/scrol):00016         Dynamic_Object_RAM_End
                      (./game-mode/scrol):00017         
                      (./game-mode/scrol):00018         
66FB                  (./game-mode/scrol):00019         Tile_Data_RAM_A_Start
66FB 1111111111111111 (./game-mode/scrol):00020            FDB $1111,$1111,$1111,$1111  ; 32 px x 8 px 
6703 2222222222222222 (./game-mode/scrol):00021            FDB $2222,$2222,$2222,$2222  ; 
670B 3333333333333333 (./game-mode/scrol):00022            FDB $3333,$3333,$3333,$3333  ; 
6713 4444444444444444 (./game-mode/scrol):00023            FDB $4444,$4444,$4444,$4444  ; 
671B 5555555555555555 (./game-mode/scrol):00024            FDB $5555,$5555,$5555,$5555  ;
6723 6666666666666666 (./game-mode/scrol):00025            FDB $6666,$6666,$6666,$6666  ;
672B 7777777777777777 (./game-mode/scrol):00026            FDB $7777,$7777,$7777,$7777  ;
6733 8888888888888888 (./game-mode/scrol):00027            FDB $8888,$8888,$8888,$8888  ;
673B                  (./game-mode/scrol):00028         Tile_Data_RAM_A_End
                      (./game-mode/scrol):00029         
673B                  (./game-mode/scrol):00030         Tile_Data_RAM_B_Start
673B 1111111111111111 (./game-mode/scrol):00031            FDB $1111,$1111,$1111,$1111  ; 
6743 2222222222222222 (./game-mode/scrol):00032            FDB $2222,$2222,$2222,$2222  ; 
674B 3333333333333333 (./game-mode/scrol):00033            FDB $3333,$3333,$3333,$3333  ; 
6753 4444444444444444 (./game-mode/scrol):00034            FDB $4444,$4444,$4444,$4444  ; 
675B 5555555555555555 (./game-mode/scrol):00035            FDB $5555,$5555,$5555,$5555  ;
6763 6666666666666666 (./game-mode/scrol):00036            FDB $6666,$6666,$6666,$6666  ;
676B 7777777777777777 (./game-mode/scrol):00037            FDB $7777,$7777,$7777,$7777  ;
6773 8888888888888888 (./game-mode/scrol):00038            FDB $8888,$8888,$8888,$8888  ;
677B                  (./game-mode/scrol):00039         Tile_Data_RAM_B_End
                      (./game-mode/scrol):00040         
                      (./game-mode/scrol):00041         
                      (/home/robin/githu):00156                 
                      (/home/robin/githu):00157         * ============================================================================== * Routines
                      (/home/robin/githu):00158         * ==============================================================================
                      (/home/robin/githu):00159                 INCLUDE "./engine/graphics/buffer/gfxlock.asm"
                      (./engine/graphics):00001         *******************************************************************************
                      (./engine/graphics):00002         * double buffering gfx write lock
                      (./engine/graphics):00003         * -----------------------------------------------------------------------------
                      (./engine/graphics):00004         *
                      (./engine/graphics):00005         * Swap buffers with a 50hz irq, when beam is near VBL.
                      (./engine/graphics):00006         * gfxlock.irq should be called by user irq routine.
                      (./engine/graphics):00007         *
                      (./engine/graphics):00008         * To tell engine when gfx rendering begins or ends, the user uses macros :
                      (./engine/graphics):00009         * _gfxlock.init : should be called before irq starts
                      (./engine/graphics):00010         * _gfxlock.on   : should be called before entering rendering routines
                      (./engine/graphics):00011         * _gfxlock.off : should be called as soon as rendering is over for a frame
                      (./engine/graphics):00012         *
                      (./engine/graphics):00013         * A wait routine will only runs if a second gfx rendering lock is set during
                      (./engine/graphics):00014         * a single screen frame. User can set a back process routine during wait.
                      (./engine/graphics):00015         *
                      (./engine/graphics):00016         * Irq must be in sync with VBL to avoid palette change artifacts.
                      (./engine/graphics):00017         *
                      (./engine/graphics):00018         *******************************************************************************
                      (./engine/graphics):00019         
                      (./engine/graphics):00020         * =============================================================================
                      (./engine/graphics):00021         * variables
                      (./engine/graphics):00022         * =============================================================================
                      (./engine/graphics):00023         
677B 00               (./engine/graphics):00024         gfxlock.status             fcb   0 ; 1: gfx rendering is running
677C 00               (./engine/graphics):00025         gfxlock.bufferSwap.status  fcb   0 ; -1: a swap buffer was made
677D 00               (./engine/graphics):00026         gfxlock.backProcess.status fcb   0 ; 1: a back process is active during wait
                      (./engine/graphics):00027         
677E 0000             (./engine/graphics):00028         gfxlock.bufferSwap.count   fdb   0 ; buffer swap counter
6780 00               (./engine/graphics):00029         gfxlock.backBuffer.id      fcb   0 ; back buffer set to read operations (0 or 1)
                      (./engine/graphics):00030         
6781 00               (./engine/graphics):00031         gfxlock.frameDrop.count_w  fcb   0 ; zero pad
6782 00               (./engine/graphics):00032         gfxlock.frameDrop.count    fcb   0 ; elapsed 50Hz frames since last main game loop
6783 0000             (./engine/graphics):00033         gfxlock.frame.count        fdb   0 ; elapsed 50Hz frames since init
6785 0000             (./engine/graphics):00034         gfxlock.frame.lastCount    fdb   0 ; elapsed 50Hz frames at last main game loop
                      (./engine/graphics):00035         
                      (./engine/graphics):00036         * =============================================================================
                      (./engine/graphics):00037         * routines
                      (./engine/graphics):00038         * =============================================================================
                      (./engine/graphics):00039         
6787                  (./engine/graphics):00040         gfxlock.bufferSwap.check
6787 B6677B           (./engine/graphics):00041 [5]             lda   gfxlock.status
678A 2608             (./engine/graphics):00042 [3]             bne   >
678C BD6795           (./engine/graphics):00043 [8]             jsr   gfxlock.bufferSwap.do    ; swap only when gfx was redered
678F 86FF             (./engine/graphics):00044 [2]             lda   #-1
6791 B7677B           (./engine/graphics):00045 [5]             sta   gfxlock.status
6794 39               (./engine/graphics):00046 [5]     !       rts
                      (./engine/graphics):00047         
6795                  (./engine/graphics):00048         gfxlock.bufferSwap.do
6795 F667A3           (./engine/graphics):00049 [5]             ldb   gfxlock.backBuffer.status
6798 C440             (./engine/graphics):00050 [2]             andb  #%01000000               ; set bit 6 based on flip/flop
679A CA80             (./engine/graphics):00051 [2]             orb   #%10000000               ; set bit 7=1, bit 0-3=frame color
     679B             (./engine/graphics):00052         gfxlock.screenBorder.color equ *-1
679C F7E7DD           (./engine/graphics):00053 [5]             stb   map.CF74021.SYS2         ; set visible video buffer (2 or 3)
679F 7367A3           (./engine/graphics):00054 [7]             com   gfxlock.backBuffer.status
67A2 C600             (./engine/graphics):00055 [2]             ldb   #$00
     67A3             (./engine/graphics):00056         gfxlock.backBuffer.status equ   *-1
67A4 C401             (./engine/graphics):00057 [2]             andb  #%00000001               ; set bit 0 based on flip/flop
67A6 CA02             (./engine/graphics):00058 [2]             orb   #%00000010               ; set bit 1=1
67A8 F7E7E5           (./engine/graphics):00059 [5]             stb   map.CF74021.DATA         ; mount working video buffer in visible RAM
67AB F6E7C3           (./engine/graphics):00060 [5]             ldb   map.MC6846.PRC
67AE C801             (./engine/graphics):00061 [2]             eorb  #%00000001               ; swap half-page in $4000 $5FFF
67B0 F7E7C3           (./engine/graphics):00062 [5]             stb   map.MC6846.PRC
                      (./engine/graphics):00063                 
67B3 7C677F           (./engine/graphics):00064 [7]             inc   gfxlock.bufferSwap.count+1
67B6 2603             (./engine/graphics):00065 [3]             bne   >
67B8 7C677E           (./engine/graphics):00066 [7]             inc   gfxlock.bufferSwap.count
                      (./engine/graphics):00067         !
67BB 73677C           (./engine/graphics):00068 [7]             com   gfxlock.bufferSwap.status
67BE 39               (./engine/graphics):00069 [5]             rts
                      (./engine/graphics):00070         
67BF                  (./engine/graphics):00071         gfxlock.bufferSwap.wait
67BF 7F677C           (./engine/graphics):00072 [7]             clr   gfxlock.bufferSwap.status
67C2 7D677D           (./engine/graphics):00073 [7]     @loop   tst   gfxlock.backProcess.status
67C5 2703             (./engine/graphics):00074 [3]             beq   >
67C7 BD1234           (./engine/graphics):00075 [8]             jsr   $1234                     ; do some back processing
     67C8             (./engine/graphics):00076         gfxlock.backProcess.routine equ *-2
67CA B6677B           (./engine/graphics):00077 [5]     !       lda   gfxlock.status
67CD 2605             (./engine/graphics):00078 [3]             bne   >
67CF 7D677C           (./engine/graphics):00079 [7]             tst   gfxlock.bufferSwap.status
67D2 27EE             (./engine/graphics):00080 [3]             beq   @loop                     ; loop until irq make a swap
67D4 39               (./engine/graphics):00081 [5]     !       rts
                      (/home/robin/githu):00160                 INCLUDE "./engine/graphics/tilemap/vertical-scroll/scrolling.asm"
                      (./engine/graphics):00001         * ============================================
                      (./engine/graphics):00002         * Vertical Scroll
                      (./engine/graphics):00003         * ============================================
                      (./engine/graphics):00004         
     007E             (./engine/graphics):00005         OPCODE_JMP_E equ $7E
     004B             (./engine/graphics):00006         VS_line_size equ 75
     00C9             (./engine/graphics):00007         VS_buffer_size equ 201          ; nb lines in buffer is 201 (0-200 to fit JMP return)
                      (./engine/graphics):00008         
67D5 00               (./engine/graphics):00009         VS_ObjIDA fcb 0
67D6 00               (./engine/graphics):00010         VS_ObjIDB fcb 0
67D7 00               (./engine/graphics):00011         VS_scroll_step fcb 0
                      (./engine/graphics):00012         
67D8                  (./engine/graphics):00013         VerticalScrollUpdateViewport
67D8 8600             (./engine/graphics):00014 [2]             lda   #0
     67D9             (./engine/graphics):00015         VS_viewport_line_pos equ *-1
67DA BB681B           (./engine/graphics):00016 [5]             adda  VS_viewport_size
67DD C628             (./engine/graphics):00017 [2]             ldb   #40 ; nb of bytes in a line
67DF 3D               (./engine/graphics):00018 [11]            mul
67E0 C3A000           (./engine/graphics):00019 [4]             addd  #$A000
67E3 FD6841           (./engine/graphics):00020 [6]             std   VS_mem_pos
67E6 39               (./engine/graphics):00021 [5]             rts
                      (./engine/graphics):00022         
67E7                  (./engine/graphics):00023         VerticalScrollMoveUp
                      (./engine/graphics):00024                 ; TODO update buffer code with tilemap
67E7 F66844           (./engine/graphics):00025 [5]             ldb   VS_cur_line
67EA FB67D7           (./engine/graphics):00026 [5]             addb  VS_scroll_step
67ED C1C9             (./engine/graphics):00027 [2]             cmpb  #VS_buffer_size
67EF 2303             (./engine/graphics):00028 [3]             bls   >
67F1 8300C9           (./engine/graphics):00029 [4]             subd  #VS_buffer_size           ; cycling in buffer
67F4 F76844           (./engine/graphics):00030 [5]     !       stb   VS_cur_line
67F7 39               (./engine/graphics):00031 [5]             rts
                      (./engine/graphics):00032         
67F8                  (./engine/graphics):00033         VerticalScrollMoveDown
                      (./engine/graphics):00034                 ; TODO update buffer code with tilemap
67F8 F66844           (./engine/graphics):00035 [5]             ldb   VS_cur_line
67FB F067D7           (./engine/graphics):00036 [5]             subb  VS_scroll_step
67FE 2402             (./engine/graphics):00037 [3]             bcc   >
6800 CBC9             (./engine/graphics):00038 [2]             addb  #VS_buffer_size           ; cycling in buffer
6802 F76844           (./engine/graphics):00039 [5]     !       stb   VS_cur_line
6805 39               (./engine/graphics):00040 [5]             rts
                      (./engine/graphics):00041         
                      (./engine/graphics):00042         
                      (./engine/graphics):00043         ; when the first screen line is part of the scroll, as S is used to write in video buffer,
                      (./engine/graphics):00044         ; you should expect 12 bytes to be written in or near video memory by the irq call.
                      (./engine/graphics):00045         ; if it occurs at the end of the buffer routine, before S is retored, this can 
                      (./engine/graphics):00046         ; erase bytes at $9FF4-$9FFF, so live this aera unsed
                      (./engine/graphics):00047         
6806                  (./engine/graphics):00048         VerticalScroll
6806 F667D5           (./engine/graphics):00049 [5]             ldb   VS_ObjIDA
6809 8E7C20           (./engine/graphics):00050 [3]     @loop   ldx   #Obj_Index_Page
680C A685             (./engine/graphics):00051 [4+1]           lda   b,x   
                      (./engine/graphics):00052                 _SetCartPageA                  ; mount page that contain buffer code
                      (    _SetCartPageA):00001          IFDEF T2
                      (    _SetCartPageA):00002                 jsr   SetCartPageA
                      (    _SetCartPageA):00003          ELSE
680E B7E7E6           (    _SetCartPageA):00004 [5]             sta   $E7E6                    ; selection de la page RAM en zone cartouche
                      (    _SetCartPageA):00005          ENDC
6811 58               (./engine/graphics):00053 [2]             aslb
6812 8E7C23           (./engine/graphics):00054 [3]             ldx   #Obj_Index_Address
6815 AE85             (./engine/graphics):00055 [5+1]           ldx   b,x                      ; set buffer code address in x
6817 F66844           (./engine/graphics):00056 [5]             ldb   VS_cur_line              ; screen start line (0-199)
681A CBC8             (./engine/graphics):00057 [2]             addb  #200                     ; viewport size (1-200)
     681B             (./engine/graphics):00058         VS_viewport_size equ *-1
681C 2504             (./engine/graphics):00059 [3]             bcs   @undo
681E C1C9             (./engine/graphics):00060 [2]             cmpb  #VS_buffer_size
6820 2302             (./engine/graphics):00061 [3]             bls   >
6822 C0C9             (./engine/graphics):00062 [2]     @undo   subb  #VS_buffer_size          ; cycling in buffer
6824 864B             (./engine/graphics):00063 [2]     !       lda   #VS_line_size
6826 3D               (./engine/graphics):00064 [11]            mul
6827 338B             (./engine/graphics):00065 [4+4]           leau  d,x                      ; set u where a jump should be placed for return to caller
6829 3722             (./engine/graphics):00066 [5+3]           pulu  a,y
682B FF6851           (./engine/graphics):00067 [6]             stu   @save_u
682E 3422             (./engine/graphics):00068 [5+3]           pshs  a,y                      ; save 3 bytes in buffer that will be erased by the jmp return
6830 867E             (./engine/graphics):00069 [2]             lda   #OPCODE_JMP_E            ; build jmp instruction
6832 108E684C         (./engine/graphics):00070 [4]             ldy   #@ret                    ; this works even at the end of table because there is 
6836 A75D             (./engine/graphics):00071 [4+1]           sta   -3,u                     ; already a jmp for looping into the buffer
6838 10AF5E           (./engine/graphics):00072 [6+1]           sty   -2,u                     ; no need to have some padding
683B 10FF684E         (./engine/graphics):00073 [7]             sts   @save_s
683F 10CEBF40         (./engine/graphics):00074 [4]             lds   #$BF40
     6841             (./engine/graphics):00075         VS_mem_pos equ *-2
6843 8600             (./engine/graphics):00076 [2]             lda   #0
     6844             (./engine/graphics):00077         VS_cur_line equ *-1
6845 C64B             (./engine/graphics):00078 [2]             ldb   #VS_line_size
6847 3D               (./engine/graphics):00079 [11]            mul
6848 308B             (./engine/graphics):00080 [4+4]           leax  d,x                      ; set starting position in buffer code
684A 6E84             (./engine/graphics):00081 [3+0]           jmp   ,x
684C 10CE0000         (./engine/graphics):00082 [4]     @ret    lds   #0
     684E             (./engine/graphics):00083         @save_s equ   *-2
6850 CE0000           (./engine/graphics):00084 [3]             ldu   #0
     6851             (./engine/graphics):00085         @save_u equ   *-2
6853 3512             (./engine/graphics):00086 [5+3]           puls  a,x
6855 3612             (./engine/graphics):00087 [5+3]           pshu  a,x                      ; restore 3 bytes in buffer
6857 B66841           (./engine/graphics):00088 [5]             lda   VS_mem_pos
685A 81C0             (./engine/graphics):00089 [2]             cmpa  #$C0
685C 240A             (./engine/graphics):00090 [3]             bhs   >                        ; exit if second buffer code as been executed
685E 8B20             (./engine/graphics):00091 [2]             adda  #$20                     ; else execute second buffer code
6860 B76841           (./engine/graphics):00092 [5]             sta   VS_mem_pos
6863 F667D6           (./engine/graphics):00093 [5]             ldb   VS_ObjIDB
6866 20A1             (./engine/graphics):00094 [3]             bra   @loop
6868 B66841           (./engine/graphics):00095 [5]     !       lda   VS_mem_pos
686B 8020             (./engine/graphics):00096 [2]             suba  #$20
686D B76841           (./engine/graphics):00097 [5]             sta   VS_mem_pos               ; restore to first buffer
6870 39               (./engine/graphics):00098 [5]             rts
                      (/home/robin/githu):00161                 INCLUDE "./engine/palette/color/Pal_black.asm"
6871                  (./engine/palette/):00001         Pal_black
6871 0000000000000000 (./engine/palette/):00002                 fill  0,$20
     0000000000000000
     0000000000000000
     0000000000000000
                      (/home/robin/githu):00162                 INCLUDE "./global/global-trailer-includes.asm"
                      (./global/global-t):00001         ; common utilities
                      (./global/global-t):00002             INCLUDE "./engine/InitGlobals.asm"
                      (./engine/InitGlob):00001         
6891                  (./engine/InitGlob):00002         InitGlobals
6891 CC0000           (./engine/InitGlob):00003 [3]             ldd   #0
                      (./engine/InitGlob):00004         
                      (./engine/InitGlob):00005                 ; clear direct_page data
6894 8E9F00           (./engine/InitGlob):00006 [3]             ldx   #dp
6897 8600             (./engine/InitGlob):00007 [2]             lda   #0
6899 A780             (./engine/InitGlob):00008 [4+2]   !       sta   ,x+
689B 8CA000           (./engine/InitGlob):00009 [4]             cmpx  #dp+256
689E 26F9             (./engine/InitGlob):00010 [3]             bne   <
                      (./engine/InitGlob):00011         
                      (./engine/InitGlob):00012          ifdef DrawSprites
                      (./engine/InitGlob):00013                 ldd   #screen_left
                      (./engine/InitGlob):00014                 std   glb_camera_x_offset
                      (./engine/InitGlob):00015                 ldd   #screen_top
                      (./engine/InitGlob):00016                 std   glb_camera_y_offset
                      (./engine/InitGlob):00017          endc
                      (./engine/InitGlob):00018         
68A0 8601             (./engine/InitGlob):00019 [2]             lda   #1
68A2 B79FD5           (./engine/InitGlob):00020 [5]             sta   glb_alphaTiles
68A5 39               (./engine/InitGlob):00021 [5]             rts
                      (./global/global-t):00003             INCLUDE "./engine/ram/BankSwitch.asm"
                      (./engine/ram/Bank):00001         ; WARNING those are subroutines, so no dp should be used
                      (./engine/ram/Bank):00002         ; because dp will be specific to caller
                      (./engine/ram/Bank):00003         
68A6                  (./engine/ram/Bank):00004         SetCartPageA
68A6 B79FD1           (./engine/ram/Bank):00005 [5]             sta   >glb_Page
68A9 2A25             (./engine/ram/Bank):00006 [3]             bpl   @RAMPg
68AB B6E7E6           (./engine/ram/Bank):00007 [5]             lda   >$E7E6
68AE 84DF             (./engine/ram/Bank):00008 [2]             anda  #$DF                     ; passe le bit5 a 0 pour cartouche au lieu de 1 pour RAM
68B0 B7E7E6           (./engine/ram/Bank):00009 [5]             sta   >$E7E6
68B3 86F0             (./engine/ram/Bank):00010 [2]             lda   #$F0                     ; sortie du mode commande T.2
68B5 B70555           (./engine/ram/Bank):00011 [5]             sta   >$0555                   ; dans le cas ou l'irq intervient en cours de changement de page
68B8 86AA             (./engine/ram/Bank):00012 [2]             lda   #$AA                     ; sequence pour commutation de page T.2
68BA B70555           (./engine/ram/Bank):00013 [5]             sta   >$0555
68BD 44               (./engine/ram/Bank):00014 [2]             lsra                           ; lda   #$55
68BE B702AA           (./engine/ram/Bank):00015 [5]             sta   >$02AA
68C1 86C0             (./engine/ram/Bank):00016 [2]             lda   #$C0
68C3 B70555           (./engine/ram/Bank):00017 [5]             sta   >$0555
68C6 B69FD1           (./engine/ram/Bank):00018 [5]             lda   >glb_Page
68C9 847F             (./engine/ram/Bank):00019 [2]             anda  #$7F                     ; le bit 7 doit etre a 0        
68CB B70555           (./engine/ram/Bank):00020 [5]             sta   >$0555                   ; selection de la page T.2 en zone cartouche
68CE 2003             (./engine/ram/Bank):00021 [3]             bra   @rts
68D0 B7E7E6           (./engine/ram/Bank):00022 [5]     @RAMPg  sta   >$E7E6                   ; selection de la page RAM en zone cartouche (bit 5 integre au numero de page)
68D3 39               (./engine/ram/Bank):00023 [5]     @rts    rts
                      (./engine/ram/Bank):00024         
68D4                  (./engine/ram/Bank):00025         SetCartPageB
68D4 F79FD1           (./engine/ram/Bank):00026 [5]             stb   >glb_Page
68D7 2A25             (./engine/ram/Bank):00027 [3]             bpl   @RAMPg
68D9 F6E7E6           (./engine/ram/Bank):00028 [5]             ldb   >$E7E6
68DC C4DF             (./engine/ram/Bank):00029 [2]             andb  #$DF                     ; passe le bit5 a 0 pour cartouche au lieu de 1 pour RAM
68DE F7E7E6           (./engine/ram/Bank):00030 [5]             stb   >$E7E6
68E1 C6F0             (./engine/ram/Bank):00031 [2]             ldb   #$F0                     ; sortie du mode commande T.2
68E3 F70555           (./engine/ram/Bank):00032 [5]             stb   >$0555                   ; dans le cas ou l'irq intervient en cours de changement de page
68E6 C6AA             (./engine/ram/Bank):00033 [2]             ldb   #$AA                     ; sequence pour commutation de page T.2
68E8 F70555           (./engine/ram/Bank):00034 [5]             stb   >$0555
68EB 54               (./engine/ram/Bank):00035 [2]             lsrb                           ; lda   #$55
68EC F702AA           (./engine/ram/Bank):00036 [5]             stb   >$02AA
68EF C6C0             (./engine/ram/Bank):00037 [2]             ldb   #$C0
68F1 F70555           (./engine/ram/Bank):00038 [5]             stb   >$0555
68F4 F69FD1           (./engine/ram/Bank):00039 [5]             ldb   >glb_Page
68F7 C47F             (./engine/ram/Bank):00040 [2]             andb  #$7F                     ; le bit 7 doit etre a 0        
68F9 F70555           (./engine/ram/Bank):00041 [5]             stb   >$0555                   ; selection de la page T.2 en zone cartouche
68FC 2003             (./engine/ram/Bank):00042 [3]             bra   @rts
68FE F7E7E6           (./engine/ram/Bank):00043 [5]     @RAMPg  stb   >$E7E6                   ; selection de la page RAM en zone cartouche (bit 5 integre au numero de page)
6901 39               (./engine/ram/Bank):00044 [5]     @rts    rts
                      (./engine/ram/Bank):00045         
6902                  (./engine/ram/Bank):00046         GetCartPageA
6902 B69FD1           (./engine/ram/Bank):00047 [5]             lda   >glb_Page                ; glb_page at 0 means that glb_page variable is not in use
6905 2603             (./engine/ram/Bank):00048 [3]             bne   @rts                     ; usefull when we dont work with T2 (ex: optimized tilemap that use only RAM)
6907 B6E7E6           (./engine/ram/Bank):00049 [5]             lda   >$E7E6
690A 39               (./engine/ram/Bank):00050 [5]     @rts    rts
                      (./engine/ram/Bank):00051         
690B                  (./engine/ram/Bank):00052         GetCartPageB
690B F69FD1           (./engine/ram/Bank):00053 [5]             ldb   >glb_Page                ; glb_page at 0 means that glb_page variable is not in use
690E 2603             (./engine/ram/Bank):00054 [3]             bne   @rts                     ; usefull when we dont work with T2 (ex: optimized tilemap that use only RAM)
6910 F6E7E6           (./engine/ram/Bank):00055 [5]             ldb   >$E7E6
6913 39               (./engine/ram/Bank):00056 [5]     @rts   rts
                      (./engine/ram/Bank):00057         
                      (./global/global-t):00004             ;INCLUDE "./engine/graphics/vbl/WaitVBL.asm"
                      (./global/global-t):00005             INCLUDE "./engine/palette/PalUpdateNow.asm"
                      (./engine/palette/):00001         * ---------------------------------------------------------------------------
                      (./engine/palette/):00002         * PalUpdateNow
                      (./engine/palette/):00003         * ----------------
                      (./engine/palette/):00004         * Subroutine to update palette right now
                      (./engine/palette/):00005         *
                      (./engine/palette/):00006         * input REG : none
                      (./engine/palette/):00007         * reset REG : [d] [x] [y]
                      (./engine/palette/):00008         * ---------------------------------------------------------------------------
                      (./engine/palette/):00009         
6914 FF               (./engine/palette/):00010         PalRefresh      fcb   $FF
6915 6917             (./engine/palette/):00011         Pal_current     fdb   Pal_buffer
6917 0000000000000000 (./engine/palette/):00012         Pal_buffer      fill  0,$20          
     0000000000000000
     0000000000000000
     0000000000000000
                      (./engine/palette/):00013         
     E7               (./engine/palette/):00014                 setdp $E7
6937                  (./engine/palette/):00015         PalUpdateNow 
6937 7D6914           (./engine/palette/):00016 [7]             tst   PalRefresh
693A 2679             (./engine/palette/):00017 [3]             bne   @rts
693C 3408             (./engine/palette/):00018 [5+1]           pshs  dp
693E CC00E7           (./engine/palette/):00019 [3]             ldd   #$E7
6941 1F9B             (./engine/palette/):00020 [6]             tfr   b,dp  
6943 BE6915           (./engine/palette/):00021 [6]             ldx   Pal_current
6946 97DB             (./engine/palette/):00022 [4]             sta   <$DB                     * color index 0
6948 EC84             (./engine/palette/):00023 [5+0]   !       ldd   ,x                       * load color
694A 97DA             (./engine/palette/):00024 [4]             sta   <$DA                     * set green and red
694C D7DA             (./engine/palette/):00025 [4]             stb   <$DA                     * set blue
694E EC02             (./engine/palette/):00026 [5+1]           ldd   2,x
6950 97DA             (./engine/palette/):00027 [4]             sta   <$DA
6952 D7DA             (./engine/palette/):00028 [4]             stb   <$DA
6954 EC04             (./engine/palette/):00029 [5+1]           ldd   4,x
6956 97DA             (./engine/palette/):00030 [4]             sta   <$DA
6958 D7DA             (./engine/palette/):00031 [4]             stb   <$DA
695A EC06             (./engine/palette/):00032 [5+1]           ldd   6,x
695C 97DA             (./engine/palette/):00033 [4]             sta   <$DA
695E D7DA             (./engine/palette/):00034 [4]             stb   <$DA
6960 EC08             (./engine/palette/):00035 [5+1]           ldd   8,x
6962 97DA             (./engine/palette/):00036 [4]             sta   <$DA
6964 D7DA             (./engine/palette/):00037 [4]             stb   <$DA
6966 EC0A             (./engine/palette/):00038 [5+1]           ldd   10,x
6968 97DA             (./engine/palette/):00039 [4]             sta   <$DA
696A D7DA             (./engine/palette/):00040 [4]             stb   <$DA
696C EC0C             (./engine/palette/):00041 [5+1]           ldd   12,x
696E 97DA             (./engine/palette/):00042 [4]             sta   <$DA
6970 D7DA             (./engine/palette/):00043 [4]             stb   <$DA
6972 EC0E             (./engine/palette/):00044 [5+1]           ldd   14,x
6974 97DA             (./engine/palette/):00045 [4]             sta   <$DA
6976 D7DA             (./engine/palette/):00046 [4]             stb   <$DA
6978 EC8810           (./engine/palette/):00047 [5+1]           ldd   16,x
697B 97DA             (./engine/palette/):00048 [4]             sta   <$DA
697D D7DA             (./engine/palette/):00049 [4]             stb   <$DA
697F EC8812           (./engine/palette/):00050 [5+1]           ldd   18,x
6982 97DA             (./engine/palette/):00051 [4]             sta   <$DA
6984 D7DA             (./engine/palette/):00052 [4]             stb   <$DA
6986 EC8814           (./engine/palette/):00053 [5+1]           ldd   20,x
6989 97DA             (./engine/palette/):00054 [4]             sta   <$DA
698B D7DA             (./engine/palette/):00055 [4]             stb   <$DA
698D EC8816           (./engine/palette/):00056 [5+1]           ldd   22,x
6990 97DA             (./engine/palette/):00057 [4]             sta   <$DA
6992 D7DA             (./engine/palette/):00058 [4]             stb   <$DA
6994 EC8818           (./engine/palette/):00059 [5+1]           ldd   24,x
6997 97DA             (./engine/palette/):00060 [4]             sta   <$DA
6999 D7DA             (./engine/palette/):00061 [4]             stb   <$DA
699B EC881A           (./engine/palette/):00062 [5+1]           ldd   26,x
699E 97DA             (./engine/palette/):00063 [4]             sta   <$DA
69A0 D7DA             (./engine/palette/):00064 [4]             stb   <$DA
69A2 EC881C           (./engine/palette/):00065 [5+1]           ldd   28,x
69A5 97DA             (./engine/palette/):00066 [4]             sta   <$DA
69A7 D7DA             (./engine/palette/):00067 [4]             stb   <$DA
69A9 EC881E           (./engine/palette/):00068 [5+1]           ldd   30,x
69AC 97DA             (./engine/palette/):00069 [4]             sta   <$DA
69AE D7DA             (./engine/palette/):00070 [4]             stb   <$DA
69B0 736914           (./engine/palette/):00071 [7]             com   PalRefresh               * update flag, next run this routine will be ignored if no pal update is requested
69B3 3588             (./engine/palette/):00072 [5+3]           puls dp,pc
69B5 39               (./engine/palette/):00073 [5]     @rts    rts
                      (./engine/palette/):00074         
     9F               (./engine/palette/):00075                 setdp dp/256
                      (./global/global-t):00006             INCLUDE "./engine/ram/ClearDataMemory.asm"
                      (./engine/ram/Clea):00001         ********************************************************************************
                      (./engine/ram/Clea):00002         * Clear memory in data area (16Ko)
                      (./engine/ram/Clea):00003         * [X] : word that will be copied in the whole page
                      (./engine/ram/Clea):00004         ********************************************************************************
                      (./engine/ram/Clea):00005         
69B6                  (./engine/ram/Clea):00006         ClearDataMem 
69B6 3448             (./engine/ram/Clea):00007 [5+3]           pshs  u,dp
69B8 10FF69E6         (./engine/ram/Clea):00008 [7]             sts   ClearDataMem_3+2
69BC 10CEE000         (./engine/ram/Clea):00009 [4]             lds   #$E000
69C0 3384             (./engine/ram/Clea):00010 [4+0]           leau  ,x
69C2 3184             (./engine/ram/Clea):00011 [4+0]           leay  ,x
69C4 1F10             (./engine/ram/Clea):00012 [6]             tfr   x,d
69C6 1F8B             (./engine/ram/Clea):00013 [6]             tfr   a,dp
69C8                  (./engine/ram/Clea):00014         ClearDataMem_2
69C8 347E             (./engine/ram/Clea):00015 [5+9]           pshs  u,y,x,dp,b,a
69CA 347E             (./engine/ram/Clea):00016 [5+9]           pshs  u,y,x,dp,b,a
69CC 347E             (./engine/ram/Clea):00017 [5+9]           pshs  u,y,x,dp,b,a
69CE 347E             (./engine/ram/Clea):00018 [5+9]           pshs  u,y,x,dp,b,a
69D0 347E             (./engine/ram/Clea):00019 [5+9]           pshs  u,y,x,dp,b,a
69D2 347E             (./engine/ram/Clea):00020 [5+9]           pshs  u,y,x,dp,b,a
69D4 347E             (./engine/ram/Clea):00021 [5+9]           pshs  u,y,x,dp,b,a
69D6 347E             (./engine/ram/Clea):00022 [5+9]           pshs  u,y,x,dp,b,a
69D8 347E             (./engine/ram/Clea):00023 [5+9]           pshs  u,y,x,dp,b,a
69DA 3478             (./engine/ram/Clea):00024 [5+7]           pshs  u,y,x,dp
69DC 118CA010         (./engine/ram/Clea):00025 [5]             cmps  #$A010                 
69E0 26E6             (./engine/ram/Clea):00026 [3]             bne   ClearDataMem_2
69E2 33E4             (./engine/ram/Clea):00027 [4+0]           leau  ,s          
69E4                  (./engine/ram/Clea):00028         ClearDataMem_3        
69E4 10CE0000         (./engine/ram/Clea):00029 [4]             lds   #$0000        ; start of memory should not be written with S as an index because of IRQ  
69E8 3636             (./engine/ram/Clea):00030 [5+6]           pshu  d,x,y         ; saving 12 bytes + (2 bytes * _sr calls) inside IRQ routine
69EA 3636             (./engine/ram/Clea):00031 [5+6]           pshu  d,x,y         ; DEPENDENCY on nb of _sr calls inside IRQ routine (here 16 bytes of margin)
69EC 3616             (./engine/ram/Clea):00032 [5+4]           pshu  d,x
69EE 35C8             (./engine/ram/Clea):00033 [5+5]           puls  dp,u,pc
                      (./global/global-t):00007         
                      (./global/global-t):00008             INCLUDE "./engine/level-management/LoadGameMode.asm"
                      (./engine/level-ma):00001         ********************************************************************************
                      (./engine/level-ma):00002         * LoadGameMode - Charge un nouveau niveau de jeu si requis
                      (./engine/level-ma):00003         * ------------------------------------------------------------------------------
                      (./engine/level-ma):00004         * 
                      (./engine/level-ma):00005         *
                      (./engine/level-ma):00006         ********************************************************************************
                      (./engine/level-ma):00007         
69F0 00               (./engine/level-ma):00008         GameMode           fcb   $00
69F1 00               (./engine/level-ma):00009         ChangeGameMode     fcb   $00
69F2 00               (./engine/level-ma):00010         glb_Cur_Game_Mode  fcb   $00
69F3 00               (./engine/level-ma):00011         glb_Next_Game_Mode fcb   $00
                      (./engine/level-ma):00012         
69F4                  (./engine/level-ma):00013         LoadGameMode
69F4 B669F1           (./engine/level-ma):00014 [5]             lda   ChangeGameMode
69F7 2601             (./engine/level-ma):00015 [3]             bne   LoadGameModeNow
69F9 39               (./engine/level-ma):00016 [5]             rts
                      (./engine/level-ma):00017                 
69FA                  (./engine/level-ma):00018         LoadGameModeNow
                      (./engine/level-ma):00019         
                      (./engine/level-ma):00020          IFDEF T2
                      (./engine/level-ma):00021                 lda   #$80                     ; ROM page 0
                      (./engine/level-ma):00022                 _SetCartPageA
                      (./engine/level-ma):00023                        
                      (./engine/level-ma):00024                 lda   GameMode
                      (./engine/level-ma):00025                 ldb   glb_Cur_Game_Mode
                      (./engine/level-ma):00026                 jmp   Build_RAMLoaderManager          
                      (./engine/level-ma):00027          ELSE
69FA C664             (./engine/level-ma):00028 [2]             ldb   #$64                     ; Page 4 contains RAMLoaderManager
69FC F7E7E6           (./engine/level-ma):00029 [5]             stb   $E7E6
69FF B669F0           (./engine/level-ma):00030 [5]             lda   GameMode
6A02 F669F2           (./engine/level-ma):00031 [5]             ldb   glb_Cur_Game_Mode
6A05 7E0000           (./engine/level-ma):00032 [4]             jmp   >$0000          
                      (./engine/level-ma):00033          ENDC
                      (./engine/level-ma):00034                     
                      (./global/global-t):00009         
                      (./global/global-t):00010             ; object management
                      (./global/global-t):00011             INCLUDE "./engine/object-management/RunObjects.asm"
                      (./engine/object-m):00001         * ---------------------------------------------------------------------------
                      (./engine/object-m):00002         * RunObjects
                      (./engine/object-m):00003         * ------------
                      (./engine/object-m):00004         * Subroutines to run, load and unload objects
                      (./engine/object-m):00005         *
                      (./engine/object-m):00006         * RunObjects
                      (./engine/object-m):00007         * ----------
                      (./engine/object-m):00008         * Run all object's code
                      (./engine/object-m):00009         *
                      (./engine/object-m):00010         * LoadObject_u, LoadObject_x
                      (./engine/object-m):00011         * --------------------------
                      (./engine/object-m):00012         * Find a empty object slot and link the new object in run list
                      (./engine/object-m):00013         * return zero flag when no more memory avaible
                      (./engine/object-m):00014         * return the allocated memory in u or x
                      (./engine/object-m):00015         *
                      (./engine/object-m):00016         * UnloadObject_u, UnloadObject_x
                      (./engine/object-m):00017         * ------------------------------
                      (./engine/object-m):00018         * Unlink object (u or x) from run list and clear object's data
                      (./engine/object-m):00019         *
                      (./engine/object-m):00020         * ---------------------------------------------------------------------------
                      (./engine/object-m):00021         
6A08 0000             (./engine/object-m):00022         object_list_first fdb   0
6A0A 0000             (./engine/object-m):00023         object_list_last  fdb   0
                      (./engine/object-m):00024         
                      (./engine/object-m):00025         ; Stack Structure to hold free object slot addresses
6A0C 0000000000000000 (./engine/object-m):00026         STACK_SLOT_ADDRESS FILL 0,nb_dynamic_objects*2 
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
6A34                  (./engine/object-m):00027         STACK_SLOT_ADDRESS_END   
6A34 0000             (./engine/object-m):00028         STACK_POINTER FDB 0 ; Stack pointer on the STACK
                      (./engine/object-m):00029         
                      (./engine/object-m):00030         ; loop to init the Stack
6A36                  (./engine/object-m):00031         InitStack
6A36 CE6A34           (./engine/object-m):00032 [3]             ldu   #STACK_SLOT_ADDRESS_END  
6A39 8E66BC           (./engine/object-m):00033 [3]             ldx   #Dynamic_Object_RAM_End-object_size
6A3C 3610             (./engine/object-m):00034 [5+2]   @loop   pshu  x
6A3E 3088C1           (./engine/object-m):00035 [4+1]           leax -object_size,x
6A41 11836A0C         (./engine/object-m):00036 [5]             cmpu  #STACK_SLOT_ADDRESS
6A45 26F5             (./engine/object-m):00037 [3]             bne   @loop
6A47 FF6A34           (./engine/object-m):00038 [6]             stu   STACK_POINTER    
6A4A 39               (./engine/object-m):00039 [5]             rts    
                      (./engine/object-m):00040         
6A4B                  (./engine/object-m):00041         RunObjects
6A4B FE6A08           (./engine/object-m):00042 [6]             ldu   object_list_first
6A4E 271E             (./engine/object-m):00043 [3]             beq   @rts
6A50 E6C4             (./engine/object-m):00044 [4+0]   !       ldb   id,u                     ; Load an object with id=0 allows to book a empty slot
6A52 271B             (./engine/object-m):00045 [3]             beq   @skip                    ; that will be usable later, we need to skip in this case (no object index)
6A54 8E7C20           (./engine/object-m):00046 [3]             ldx   #Obj_Index_Page
6A57 3A               (./engine/object-m):00047 [3]             abx
6A58 A684             (./engine/object-m):00048 [4+0]           lda   ,x              
                      (./engine/object-m):00049                 _SetCartPageA         
                      (    _SetCartPageA):00001          IFDEF T2
                      (    _SetCartPageA):00002                 jsr   SetCartPageA
                      (    _SetCartPageA):00003          ELSE
6A5A B7E7E6           (    _SetCartPageA):00004 [5]             sta   $E7E6                    ; selection de la page RAM en zone cartouche
                      (    _SetCartPageA):00005          ENDC
6A5D 58               (./engine/object-m):00050 [2]             aslb                  
6A5E 8E7C23           (./engine/object-m):00051 [3]             ldx   #Obj_Index_Address
6A61 3A               (./engine/object-m):00052 [3]             abx
6A62 EC45             (./engine/object-m):00053 [5+1]           ldd   run_object_next,u        ; in case of self-deletion by current object
6A64 FD6A6A           (./engine/object-m):00054 [6]             std   object_list_next         ; we need to save the next object in run list
6A67 AD94             (./engine/object-m):00055 [7+3]           jsr   [,x]              
6A69 CE0000           (./engine/object-m):00056 [3]             ldu   #0
     6A6A             (./engine/object-m):00057         object_list_next equ   *-2    
6A6C 26E2             (./engine/object-m):00058 [3]             bne   <         
6A6E 39               (./engine/object-m):00059 [5]     @rts    rts   
6A6F EE45             (./engine/object-m):00060 [5+1]   @skip   ldu   run_object_next,u
6A71 26DD             (./engine/object-m):00061 [3]             bne   <
6A73 39               (./engine/object-m):00062 [5]             rts
                      (./engine/object-m):00063         
6A74                  (./engine/object-m):00064         LoadObject_u
6A74 FE6A34           (./engine/object-m):00065 [6]             ldu STACK_POINTER              ; is there a free slot ?
6A77 11836A34         (./engine/object-m):00066 [5]             cmpu #STACK_SLOT_ADDRESS_END   ; 
6A7B 2601             (./engine/object-m):00067 [3]             bne @link                      ; Yes a slot is free, let's get it and link it
6A7D 39               (./engine/object-m):00068 [5]             rts                            ; return z=1 when not found
6A7E                  (./engine/object-m):00069         @link
6A7E 3706             (./engine/object-m):00070 [5+2]           pulu D                         ; get a the free slot from the slot stack
6A80 FF6A34           (./engine/object-m):00071 [6]             stu STACK_POINTER              ; updating the slot stack pointer
6A83 1F03             (./engine/object-m):00072 [6]             tfr D,U                        ; U is now pointing to the free slot address        
6A85 3410             (./engine/object-m):00073 [5+2]           pshs  x
6A87 BE6A0A           (./engine/object-m):00074 [6]             ldx   object_list_last
6A8A 2709             (./engine/object-m):00075 [3]             beq   >
6A8C EF05             (./engine/object-m):00076 [5+1]           stu   run_object_next,x
6A8E FF6A0A           (./engine/object-m):00077 [6]             stu   object_list_last
6A91 AF43             (./engine/object-m):00078 [5+1]           stx   run_object_prev,u
6A93 3590             (./engine/object-m):00079 [5+4]           puls  x,pc                     ; return z=0 when found
6A95 FF6A0A           (./engine/object-m):00080 [6]     !       stu   object_list_last
6A98 FF6A08           (./engine/object-m):00081 [6]             stu   object_list_first
6A9B 3590             (./engine/object-m):00082 [5+4]           puls  x,pc                     ; return z=0 when found
                      (./engine/object-m):00083         
6A9D                  (./engine/object-m):00084         LoadObject_x
6A9D BE6A34           (./engine/object-m):00085 [6]             ldx STACK_POINTER              ; is there a free slot ?
6AA0 8C6A34           (./engine/object-m):00086 [4]             cmpx #STACK_SLOT_ADDRESS_END   ; 
6AA3 2601             (./engine/object-m):00087 [3]             bne @link                      ; Yes a slot is free, let's get it and link it
6AA5 39               (./engine/object-m):00088 [5]             rts                            ; return z=1 when not found
6AA6                  (./engine/object-m):00089         @link
6AA6 3440             (./engine/object-m):00090 [5+2]           pshs  u                        ; let's save U
6AA8 3302             (./engine/object-m):00091 [4+1]           leau 2,x                        ; X contains de address of the stack, so let's transfer it to U
6AAA AE84             (./engine/object-m):00092 [5+0]           ldx ,x                         ; get a the free slot from the slot stack, X points this free slot
6AAC FF6A34           (./engine/object-m):00093 [6]             stu STACK_POINTER              ; updating the slot stack pointer
6AAF FE6A0A           (./engine/object-m):00094 [6]             ldu   object_list_last
6AB2 2709             (./engine/object-m):00095 [3]             beq   >
6AB4 AF45             (./engine/object-m):00096 [5+1]           stx   run_object_next,u
6AB6 BF6A0A           (./engine/object-m):00097 [6]             stx   object_list_last
6AB9 EF03             (./engine/object-m):00098 [5+1]           stu   run_object_prev,x
6ABB 35C0             (./engine/object-m):00099 [5+4]           puls  u,pc                     ; return z=0 when found
6ABD BF6A0A           (./engine/object-m):00100 [6]     !       stx   object_list_last
6AC0 BF6A08           (./engine/object-m):00101 [6]             stx   object_list_first
6AC3 35C0             (./engine/object-m):00102 [5+4]           puls  u,pc                     ; return z=0 when found
                      (./engine/object-m):00103         
6AC5                  (./engine/object-m):00104         UnloadObject_u
6AC5 3476             (./engine/object-m):00105 [5+8]           pshs  d,x,y,u
                      (./engine/object-m):00106                 ; let's update the stack
6AC7 1F30             (./engine/object-m):00107 [6]             tfr U,D
6AC9 FE6A34           (./engine/object-m):00108 [6]             ldu STACK_POINTER
6ACC 3606             (./engine/object-m):00109 [5+2]           pshu D
6ACE FF6A34           (./engine/object-m):00110 [6]             stu STACK_POINTER
6AD1 1F03             (./engine/object-m):00111 [6]             tfr D,U
                      (./engine/object-m):00112                 ; done
6AD3 11B36A6A         (./engine/object-m):00113 [8]             cmpu  object_list_next         ; if current object to delete
6AD7 2609             (./engine/object-m):00114 [3]             bne   >                        ; is the following to execute
6AD9 10AE45           (./engine/object-m):00115 [6+1]           ldy   run_object_next,u
6ADC 10BF6A6A         (./engine/object-m):00116 [7]             sty   object_list_next         ; then update the next object in RunObjects routine
6AE0 2716             (./engine/object-m):00117 [3]             beq   @noNext
6AE2 10AE45           (./engine/object-m):00118 [6+1]   !       ldy   run_object_next,u
6AE5 2711             (./engine/object-m):00119 [3]             beq   @noNext
6AE7 AE43             (./engine/object-m):00120 [5+1]           ldx   run_object_prev,u
6AE9 AF23             (./engine/object-m):00121 [5+1]           stx   run_object_prev,y
6AEB 2705             (./engine/object-m):00122 [3]             beq   @noPrev
6AED 10AF05           (./engine/object-m):00123 [6+1]           sty   run_object_next,x
6AF0 2015             (./engine/object-m):00124 [3]             bra   @clearObj
6AF2 10BF6A08         (./engine/object-m):00125 [7]     @noPrev sty   object_list_first
6AF6 200F             (./engine/object-m):00126 [3]             bra   @clearObj
6AF8 AE43             (./engine/object-m):00127 [5+1]   @noNext ldx   run_object_prev,u
6AFA 2703             (./engine/object-m):00128 [3]             beq   >
6AFC 10AF05           (./engine/object-m):00129 [6+1]           sty   run_object_next,x
6AFF BF6A0A           (./engine/object-m):00130 [6]     !       stx   object_list_last
6B02 2603             (./engine/object-m):00131 [3]             bne   @clearObj
6B04 BF6A08           (./engine/object-m):00132 [6]             stx   object_list_first
6B07                  (./engine/object-m):00133         @clearObj
6B07 33C83F           (./engine/object-m):00134 [4+1]           leau  object_size,u ; move to end of data object structure
6B0A                  (./engine/object-m):00135         UnloadObject_clear
6B0A CC0000           (./engine/object-m):00136 [3]             ldd   #$0000        ; init regs to zero
6B0D 8E0000           (./engine/object-m):00137 [3]             ldx   #$0000
6B10 3184             (./engine/object-m):00138 [4+0]           leay  ,x
                      (./engine/object-m):00139         
6B12 3636363636363636 (./engine/object-m):00140                 fill $36,(object_size/6)*2 ; generate object_size/6 assembly instructions $3636 (pshu  d,x,y) 
     3636363636363636
     36363636
                      (./engine/object-m):00141         
                      (./engine/object-m):00142                 IFEQ object_size%6-5
                      (./engine/object-m):00143                 pshu  a,x,y
                      (./engine/object-m):00144                 ENDC
                      (./engine/object-m):00145         
                      (./engine/object-m):00146                 IFEQ object_size%6-4
                      (./engine/object-m):00147                 pshu  d,x
                      (./engine/object-m):00148                 ENDC
                      (./engine/object-m):00149         
                      (./engine/object-m):00150                 IFEQ object_size%6-3
6B26 3612             (./engine/object-m):00151 [5+3]           pshu  a,x
                      (./engine/object-m):00152                 ENDC
                      (./engine/object-m):00153         
                      (./engine/object-m):00154                 IFEQ object_size%6-2
                      (./engine/object-m):00155                 pshu  d
                      (./engine/object-m):00156                 ENDC
                      (./engine/object-m):00157         
                      (./engine/object-m):00158                 IFEQ object_size%6-1
                      (./engine/object-m):00159                 pshu  a
                      (./engine/object-m):00160                 ENDC
                      (./engine/object-m):00161         
                      (./engine/object-m):00162                 
                      (./engine/object-m):00163         
6B28 35F6             (./engine/object-m):00164 [5+10]          puls  d,x,y,u,pc
                      (./engine/object-m):00165         
6B2A                  (./engine/object-m):00166         UnloadObject_x
6B2A 3476             (./engine/object-m):00167 [5+8]           pshs  d,x,y,u
                      (./engine/object-m):00168                 ; let's update the stack
6B2C FE6A34           (./engine/object-m):00169 [6]             ldu STACK_POINTER
6B2F 3610             (./engine/object-m):00170 [5+2]           pshu X
6B31 FF6A34           (./engine/object-m):00171 [6]             stu STACK_POINTER
                      (./engine/object-m):00172                 ; done
6B34 BC6A6A           (./engine/object-m):00173 [7]             cmpx  object_list_next         ; if current object to delete
6B37 2626             (./engine/object-m):00174 [3]             bne   >                        ; is the following to execute
6B39 10AE05           (./engine/object-m):00175 [6+1]           ldy   run_object_next,x
6B3C 10BF6A6A         (./engine/object-m):00176 [7]             sty   object_list_next         ; then update the next object in RunObjects routine
6B40 2716             (./engine/object-m):00177 [3]             beq   @noNext
6B42 10AE05           (./engine/object-m):00178 [6+1]           ldy   run_object_next,x 
6B45 2711             (./engine/object-m):00179 [3]             beq   @noNext
6B47 EE03             (./engine/object-m):00180 [5+1]           ldu   run_object_prev,x
6B49 EF23             (./engine/object-m):00181 [5+1]           stu   run_object_prev,y
6B4B 2705             (./engine/object-m):00182 [3]             beq   @noPrev
6B4D 10AF45           (./engine/object-m):00183 [6+1]           sty   run_object_next,u
6B50 2015             (./engine/object-m):00184 [3]             bra   @clearObj
6B52 10BF6A08         (./engine/object-m):00185 [7]     @noPrev sty   object_list_first
6B56 200F             (./engine/object-m):00186 [3]             bra   @clearObj
6B58 EE03             (./engine/object-m):00187 [5+1]   @noNext ldu   run_object_prev,x
6B5A 2703             (./engine/object-m):00188 [3]             beq   >
6B5C 10AF45           (./engine/object-m):00189 [6+1]           sty   run_object_next,u
6B5F FF6A0A           (./engine/object-m):00190 [6]     !       stu   object_list_last
6B62 2603             (./engine/object-m):00191 [3]             bne   @clearObj
6B64 FF6A08           (./engine/object-m):00192 [6]             stu   object_list_first
6B67                  (./engine/object-m):00193         @clearObj
6B67 33883F           (./engine/object-m):00194 [4+1]           leau  object_size,x ; move to end of data object structure
6B6A 209E             (./engine/object-m):00195 [3]             bra   UnloadObject_clear
                      (./engine/object-m):00196         
6B6C                  (./engine/object-m):00197         ManagedObjects_ClearAll
6B6C CC0000           (./engine/object-m):00198 [3]             ldd   #0
6B6F 8E0000           (./engine/object-m):00199 [3]             ldx   #0
6B72 3184             (./engine/object-m):00200 [4+0]           leay  ,x
6B74 CE66FB           (./engine/object-m):00201 [3]             ldu   #Dynamic_Object_RAM_End
6B77 11836215         (./engine/object-m):00202 [5]     !       cmpu  #Dynamic_Object_RAM+6
6B7B 2304             (./engine/object-m):00203 [3]             bls   >
6B7D 3636             (./engine/object-m):00204 [5+6]           pshu  d,x,y
6B7F 20F6             (./engine/object-m):00205 [3]             bra   <
6B81 3602             (./engine/object-m):00206 [5+1]   !       pshu  a
6B83 1183620F         (./engine/object-m):00207 [5]             cmpu  #Dynamic_Object_RAM
6B87 26F8             (./engine/object-m):00208 [3]             bne   <
6B89 FD6A08           (./engine/object-m):00209 [6]             std   object_list_first
6B8C FD6A0A           (./engine/object-m):00210 [6]             std   object_list_last
6B8F 39               (./engine/object-m):00211 [5]             rts
                      (./global/global-t):00012             INCLUDE "./engine/object-management/ObjectMoveSync.asm"
                      (./engine/object-m):00001         * ---------------------------------------------------------------------------
                      (./engine/object-m):00002         * Subroutine translating object speed to update object position
                      (./engine/object-m):00003         * This moves the object horizontally and vertically
                      (./engine/object-m):00004         * but does not apply gravity to it
                      (./engine/object-m):00005         * ---------------------------------------------------------------------------
                      (./engine/object-m):00006         
6B90                  (./engine/object-m):00007         ObjectMoveSync
6B90 E6C81A           (./engine/object-m):00008 [4+1]           ldb   x_vel,u
6B93 1D               (./engine/object-m):00009 [2]             sex                            ; velocity is positive or negative, take care of that
6B94 B76BAC           (./engine/object-m):00010 [5]             sta   @a+1
                      (./engine/object-m):00011         ; apply X velocity in sync with framerate
                      (./engine/object-m):00012         ; ---------------------------------------
6B97 BE6781           (./engine/object-m):00013 [6]             ldx   gfxlock.frameDrop.count_w ; take number of elapsed frame since last render and multiply by velocity
6B9A 2603             (./engine/object-m):00014 [3]             bne   @loop1
6B9C 8E0001           (./engine/object-m):00015 [3]             ldx   #1
6B9F                  (./engine/object-m):00016         @loop1   
6B9F ECC813           (./engine/object-m):00017 [5+1]           ldd   x_pos+1,u                ; x_pos must be followed by x_sub in memory
6BA2 E3C81A           (./engine/object-m):00018 [6+1]           addd  x_vel,u
6BA5 EDC813           (./engine/object-m):00019 [5+1]           std   x_pos+1,u                ; update low byte of x_pos and x_sub byte
6BA8 A6C812           (./engine/object-m):00020 [4+1]           lda   x_pos,u
6BAB                  (./engine/object-m):00021         @a
6BAB 8900             (./engine/object-m):00022 [2]             adca  #$00                     ; (dynamic) parameter is modified by the result of sign extend
6BAD A7C812           (./engine/object-m):00023 [4+1]           sta   x_pos,u                  ; update high byte of x_pos
6BB0 301F             (./engine/object-m):00024 [4+1]           leax  -1,x
6BB2 26EB             (./engine/object-m):00025 [3]             bne   @loop1 
                      (./engine/object-m):00026         
6BB4 E6C81C           (./engine/object-m):00027 [4+1]           ldb   y_vel,u
6BB7 1D               (./engine/object-m):00028 [2]             sex                            ; velocity is positive or negative, take care of that
6BB8 B76BD0           (./engine/object-m):00029 [5]             sta   @b+1
                      (./engine/object-m):00030         ; apply Y velocity in sync with framerate
                      (./engine/object-m):00031         ; ---------------------------------------
6BBB BE6781           (./engine/object-m):00032 [6]             ldx   gfxlock.frameDrop.count_w ; take number of elapsed frame since last render and multiply by velocity
6BBE 2603             (./engine/object-m):00033 [3]             bne   @loop2
6BC0 8E0001           (./engine/object-m):00034 [3]             ldx   #1
6BC3                  (./engine/object-m):00035         @loop2   
6BC3 ECC816           (./engine/object-m):00036 [5+1]           ldd   y_pos+1,u                ; y_pos must be followed by y_sub in memory
6BC6 E3C81C           (./engine/object-m):00037 [6+1]           addd  y_vel,u
6BC9 EDC816           (./engine/object-m):00038 [5+1]           std   y_pos+1,u                ; update low byte of y_pos and y_sub byte
6BCC A6C815           (./engine/object-m):00039 [4+1]           lda   y_pos,u
6BCF                  (./engine/object-m):00040         @b
6BCF 8900             (./engine/object-m):00041 [2]             adca  #$00                     ; (dynamic) parameter is modified by the result of sign extend
6BD1 A7C815           (./engine/object-m):00042 [4+1]           sta   y_pos,u                  ; update high byte of y_pos
6BD4 301F             (./engine/object-m):00043 [4+1]           leax  -1,x
6BD6 26EB             (./engine/object-m):00044 [3]             bne   @loop2   
6BD8 39               (./engine/object-m):00045 [5]     @c      rts
                      (./global/global-t):00013         
                      (./global/global-t):00014             ; joystick
                      (./global/global-t):00015             INCLUDE "./engine/joypad/InitJoypads.asm"
                      (./engine/joypad/I):00001         
                      (./engine/joypad/I):00002         ; $E7CE/$E7CF (bit 2) allow selection of a register in $E7CC/$E7CD:
                      (./engine/joypad/I):00003         ; (bit2) 0: Data Direction Register A (DDRA)
                      (./engine/joypad/I):00004         ; (bit2) 1: Peripherial Interface A (PIA) Register
                      (./engine/joypad/I):00005         
6BD9                  (./engine/joypad/I):00006         InitJoypads
                      (./engine/joypad/I):00007                 ; configure MC6821 to be able to read joypads (1&2) direction
6BD9 B6E7CE           (./engine/joypad/I):00008 [5]             lda   $E7CE  ; read Control Register A (CRA)
6BDC 84FB             (./engine/joypad/I):00009 [2]             anda  #$FB   ; unset bit 2 
6BDE B7E7CE           (./engine/joypad/I):00010 [5]             sta   $E7CE  ; select Data Direction Register A (DDRA)
6BE1 C400             (./engine/joypad/I):00011 [2]             andb  #0     ; unset all bits
6BE3 F7E7CC           (./engine/joypad/I):00012 [5]             stb   $E7CC  ; Peripherial Interface A (PIA) lines set as input
6BE6 8A04             (./engine/joypad/I):00013 [2]             ora   #$04   ; set b2
6BE8 B7E7CE           (./engine/joypad/I):00014 [5]             sta   $E7CE  ; select Peripherial Interface A (PIA) Register
                      (./engine/joypad/I):00015         
                      (./engine/joypad/I):00016                 ; configure MC6821 to be able to read joypads (1&2) buttons
6BEB B6E7CF           (./engine/joypad/I):00017 [5]             lda   $E7CF  ; read Control Register B (CRB)
6BEE 84FB             (./engine/joypad/I):00018 [2]             anda  #$FB   ; unset bit 2 
6BF0 B7E7CF           (./engine/joypad/I):00019 [5]             sta   $E7CF  ; select Data Direction Register B (DDRB)
                      (./engine/joypad/I):00020                 ;ldb   #$3F  ; set DAC bits (0-5)
                      (./engine/joypad/I):00021                 ;stb   $E7CD ; DAC bits set as output
6BF3 C400             (./engine/joypad/I):00022 [2]             andb  #0     ; unset all bits
6BF5 F7E7CD           (./engine/joypad/I):00023 [5]             stb   $E7CD  ; Peripherial Interface B (PIB) lines set as input
6BF8 8A04             (./engine/joypad/I):00024 [2]             ora   #$04   ; set b2
6BFA B7E7CF           (./engine/joypad/I):00025 [5]             sta   $E7CF  ; select Peripherial Interface B (PIB) Register
6BFD 39               (./engine/joypad/I):00026 [5]             rts
                      (./global/global-t):00016             INCLUDE "./engine/joypad/ReadJoypads.asm"
                      (./engine/joypad/R):00001         ********************************************************************************
                      (./engine/joypad/R):00002         * Get joystick parameters (Version 1)
                      (./engine/joypad/R):00003         *
                      (./engine/joypad/R):00004         * Read Joypads and store result as Press and Help values :
                      (./engine/joypad/R):00005         * One byte with direction for player 1 and player 2
                      (./engine/joypad/R):00006         * One byte with button for player 1 and player 2
                      (./engine/joypad/R):00007         *
                      (./engine/joypad/R):00008         * Note : to have one byte for each player, use V2
                      (./engine/joypad/R):00009         * ------------------------------------------------------------------------------
                      (./engine/joypad/R):00010         *
                      (./engine/joypad/R):00011         * Joypads Direction
                      (./engine/joypad/R):00012         * -----------------
                      (./engine/joypad/R):00013         * Register: $E7CC (8bits)
                      (./engine/joypad/R):00014         *
                      (./engine/joypad/R):00015         * Joypad2     Joypad1
                      (./engine/joypad/R):00016         * 1111        1111 (0: press | 1: release)  
                      (./engine/joypad/R):00017         * ||||_Up     ||||_Up
                      (./engine/joypad/R):00018         * |||__Down   |||__Down
                      (./engine/joypad/R):00019         * ||___Left   ||___Left
                      (./engine/joypad/R):00020         * |____Right  |____Right
                      (./engine/joypad/R):00021         *
                      (./engine/joypad/R):00022         * Joypads Bouttons
                      (./engine/joypad/R):00023         * ----------------
                      (./engine/joypad/R):00024         * Register: $E7CD (8bits)
                      (./engine/joypad/R):00025         *
                      (./engine/joypad/R):00026         *   [------] 6 bits DAC
                      (./engine/joypad/R):00027         * 11 001100 (0: press | 1: release) 
                      (./engine/joypad/R):00028         * ||   ||
                      (./engine/joypad/R):00029         * ||   ||_ Btn B Joypad1
                      (./engine/joypad/R):00030         * ||   |__ Btn B Joypad2
                      (./engine/joypad/R):00031         * ||
                      (./engine/joypad/R):00032         * ||______ Btn A Joypad1
                      (./engine/joypad/R):00033         * |_______ Btn A Joypad2
                      (./engine/joypad/R):00034         *
                      (./engine/joypad/R):00035         * Result values: Joypads_Held, Joypads_Press
                      (./engine/joypad/R):00036         * -----------------------------------------------
                      (./engine/joypad/R):00037         * (16 bits)
                      (./engine/joypad/R):00038         * Joypad2     Joypad1                                                          
                      (./engine/joypad/R):00039         * 0000        0000 (0: release | 1: press) 00 000000 (0: release | 1: press)  
                      (./engine/joypad/R):00040         * ||||_Up     ||||_Up                       ||  ||         
                      (./engine/joypad/R):00041         * |||__Down   |||__Down                     ||  ||_ Btn B Joypad1
                      (./engine/joypad/R):00042         * ||___Left   ||___Left                     ||  |__ Btn B Joypad2                   
                      (./engine/joypad/R):00043         * |____Right  |____Right                    ||_____ Btn A Joypad1                 
                      (./engine/joypad/R):00044         *                                           |______ Btn A Joypad2
                      (./engine/joypad/R):00045         ********************************************************************************
                      (./engine/joypad/R):00046         
                      (./engine/joypad/R):00047         ; dedicated mask
     0001             (./engine/joypad/R):00048         c1_button_up_mask            equ   %00000001 
     0002             (./engine/joypad/R):00049         c1_button_down_mask          equ   %00000010 
     0004             (./engine/joypad/R):00050         c1_button_left_mask          equ   %00000100 
     0008             (./engine/joypad/R):00051         c1_button_right_mask         equ   %00001000 
     0040             (./engine/joypad/R):00052         c1_button_A_mask             equ   %01000000 
     0004             (./engine/joypad/R):00053         c1_button_B_mask             equ   %00000100 
                      (./engine/joypad/R):00054         
     0010             (./engine/joypad/R):00055         c2_button_up_mask            equ   %00010000 
     0020             (./engine/joypad/R):00056         c2_button_down_mask          equ   %00100000  
     0040             (./engine/joypad/R):00057         c2_button_left_mask          equ   %01000000 
     0080             (./engine/joypad/R):00058         c2_button_right_mask         equ   %10000000 
     0080             (./engine/joypad/R):00059         c2_button_A_mask             equ   %10000000 
     0008             (./engine/joypad/R):00060         c2_button_B_mask             equ   %00001000 
                      (./engine/joypad/R):00061         
                      (./engine/joypad/R):00062         ; common mask
     0011             (./engine/joypad/R):00063         c_button_up_mask             equ   %00010001 
     0022             (./engine/joypad/R):00064         c_button_down_mask           equ   %00100010 
     0044             (./engine/joypad/R):00065         c_button_left_mask           equ   %01000100 
     0088             (./engine/joypad/R):00066         c_button_right_mask          equ   %10001000 
     00C0             (./engine/joypad/R):00067         c_button_A_mask              equ   %11000000 
     000C             (./engine/joypad/R):00068         c_button_B_mask              equ   %00001100 
                      (./engine/joypad/R):00069         
                      (./engine/joypad/R):00070         ; player mask
     000F             (./engine/joypad/R):00071         c1_dpad                      equ   %00001111 
     00F0             (./engine/joypad/R):00072         c2_dpad                      equ   %11110000
     0044             (./engine/joypad/R):00073         c1_butn                      equ   %01000100 
     0088             (./engine/joypad/R):00074         c2_butn                      equ   %10001000 
                      (./engine/joypad/R):00075         
6BFE                  (./engine/joypad/R):00076         Joypads_Read
6BFE 00               (./engine/joypad/R):00077         Dpad_Read                    fcb   $00
6BFF 00               (./engine/joypad/R):00078         Fire_Read                    fcb   $00
                      (./engine/joypad/R):00079            
6C00                  (./engine/joypad/R):00080         Joypads
6C00                  (./engine/joypad/R):00081         Joypads_Held                           
6C00 00               (./engine/joypad/R):00082         Dpad_Held                    fcb   $00 
6C01 00               (./engine/joypad/R):00083         Fire_Held                    fcb   $00 
6C02                  (./engine/joypad/R):00084         Joypads_Press                          
6C02 00               (./engine/joypad/R):00085         Dpad_Press                   fcb   $00 
6C03 00               (./engine/joypad/R):00086         Fire_Press                   fcb   $00 
                      (./engine/joypad/R):00087         
                      (./engine/joypad/R):00088                                                *; ---------------------------------------------------------------------------
                      (./engine/joypad/R):00089                                                *; Subroutine to read joypad input, and send it to the RAM
                      (./engine/joypad/R):00090                                                *; ---------------------------------------------------------------------------
                      (./engine/joypad/R):00091                                                *; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
                      (./engine/joypad/R):00092                                                *
                      (./engine/joypad/R):00093                                                *; sub_111C:
6C04                  (./engine/joypad/R):00094         ReadJoypads                            *ReadJoypads:
                      (./engine/joypad/R):00095                                                *    lea (Ctrl_1).w,a0         ; address where joypad states are written
                      (./engine/joypad/R):00096                                                *    lea (HW_Port_1_Data).l,a1 ; first joypad port
                      (./engine/joypad/R):00097                                                *    bsr.s   Joypad_Read       ; do the first joypad
                      (./engine/joypad/R):00098                                                *    addq.w  #2,a1             ; do the second joypad
                      (./engine/joypad/R):00099                                                *
                      (./engine/joypad/R):00100                                                *; sub_112A:
                      (./engine/joypad/R):00101                                                *Joypad_Read:
                      (./engine/joypad/R):00102                                                *    move.b  #0,(a1)           ; Poll controller data port
                      (./engine/joypad/R):00103                                                *    nop
                      (./engine/joypad/R):00104                                                *    nop
                      (./engine/joypad/R):00105                                                *    move.b  (a1),d0           ; Get controller port data (start/A)
                      (./engine/joypad/R):00106                                                *    lsl.b   #2,d0
                      (./engine/joypad/R):00107                                                *    andi.b  #$C0,d0
                      (./engine/joypad/R):00108                                                *    move.b  #$40,(a1)         ; Poll controller data port again
                      (./engine/joypad/R):00109                                                *    nop
                      (./engine/joypad/R):00110                                                *    nop
                      (./engine/joypad/R):00111                                                *    move.b  (a1),d1           ; Get controller port data (B/C/Dpad)
                      (./engine/joypad/R):00112                                                *    andi.b  #$3F,d1
                      (./engine/joypad/R):00113                                                *    or.b    d1,d0             ; Fuse together into one controller bit array
6C04 FCE7CC           (./engine/joypad/R):00114 [6]             ldd   $E7CC
6C07 43               (./engine/joypad/R):00115 [2]             coma
6C08 53               (./engine/joypad/R):00116 [2]             comb                           *    not.b   d0
6C09 FD6BFE           (./engine/joypad/R):00117 [6]             std   Joypads_Read        
6C0C FC6C00           (./engine/joypad/R):00118 [6]             ldd   Joypads_Held             *    move.b  (a0),d1           ; Get held button data
6C0F B86BFE           (./engine/joypad/R):00119 [5]             eora  Dpad_Read                *    eor.b   d0,d1             ; Toggle off buttons that are being held                       
6C12 F86BFF           (./engine/joypad/R):00120 [5]             eorb  Fire_Read
                      (./engine/joypad/R):00121                                                *    move.b  d0,(a0)+          ; Put raw controller input (for held buttons) in F604/F606
6C15 B46BFE           (./engine/joypad/R):00122 [5]             anda  Dpad_Read                *    and.b   d0,d1
6C18 F46BFF           (./engine/joypad/R):00123 [5]             andb  Fire_Read
6C1B FD6C02           (./engine/joypad/R):00124 [6]             std   Joypads_Press            *    move.b  d1,(a0)+          ; Put pressed controller input in F605/F607
6C1E FC6BFE           (./engine/joypad/R):00125 [6]             ldd   Joypads_Read
6C21 FD6C00           (./engine/joypad/R):00126 [6]             std   Joypads_Held
6C24 39               (./engine/joypad/R):00127 [5]             rts                            *    rts
                      (./engine/joypad/R):00128                                                *; End of function Joypad_Read
                      (./global/global-t):00017         
                      (./global/global-t):00018              ; sound
                      (./global/global-t):00019             INCLUDE "./engine/irq/Irq.asm"        
                      (./engine/irq/Irq.):00001         
                      (./engine/irq/Irq.):00002         * ---------------------------------------------------------------------------
                      (./engine/irq/Irq.):00003         * IRQ Manager
                      (./engine/irq/Irq.):00004         * ---------------------------------------------------------------------------
                      (./engine/irq/Irq.):00005         *
                      (./engine/irq/Irq.):00006         * IrqSet50Hz
                      (./engine/irq/Irq.):00007         * -----------------------------------
                      (./engine/irq/Irq.):00008         * input REG : [none]
                      (./engine/irq/Irq.):00009         * reset REG : [d]
                      (./engine/irq/Irq.):00010         *
                      (./engine/irq/Irq.):00011         * IrqOn
                      (./engine/irq/Irq.):00012         * -----------------------------------
                      (./engine/irq/Irq.):00013         * reset REG : [a]
                      (./engine/irq/Irq.):00014         *
                      (./engine/irq/Irq.):00015         * IrqOff
                      (./engine/irq/Irq.):00016         * -----------------------------------
                      (./engine/irq/Irq.):00017         * reset REG : [a]
                      (./engine/irq/Irq.):00018         *
                      (./engine/irq/Irq.):00019         * IrqSync
                      (./engine/irq/Irq.):00020         * -----------------------------------
                      (./engine/irq/Irq.):00021         * This routine sync irq timer with a desired screen line refresh
                      (./engine/irq/Irq.):00022         * The timer (irq duration) is an input parameter (usually Irq_one_frame)
                      (./engine/irq/Irq.):00023         * input REG : [a] screen line (0-255)
                      (./engine/irq/Irq.):00024         *             [x] timer value
                      (./engine/irq/Irq.):00025         * reset REG : [d]
                      (./engine/irq/Irq.):00026         * feature request - implement a screen line range of 0-311
                      (./engine/irq/Irq.):00027         *
                      (./engine/irq/Irq.):00028         * IrqManager (irq call)
                      (./engine/irq/Irq.):00029         * -----------------------------------
                      (./engine/irq/Irq.):00030         * This routine run all requested engine code before and after the user irq
                      (./engine/irq/Irq.):00031         * routine (in Irq_user_routine)
                      (./engine/irq/Irq.):00032         * input REG : [dp] $E7 (set by the monitor)
                      (./engine/irq/Irq.):00033         * reset REG : [none]
                      (./engine/irq/Irq.):00034         *
                      (./engine/irq/Irq.):00035         * Special mode (glb_Page==0) is when page switching does not need to test
                      (./engine/irq/Irq.):00036         * if RAM or ROM is in use. In this case RAM is always expected as page type.
                      (./engine/irq/Irq.):00037         * This allows the use of <$E6 register without calling engine macro for
                      (./engine/irq/Irq.):00038         * page switch, thus it reduces the cycles cost. Used in tile rendering.
                      (./engine/irq/Irq.):00039         *
                      (./engine/irq/Irq.):00040         * Example of user routines (may be grouped in a subroutine) :
                      (./engine/irq/Irq.):00041         * - PalUpdateNow
                      (./engine/irq/Irq.):00042         * - PalCycling
                      (./engine/irq/Irq.):00043         * - PalRaster_1c
                      (./engine/irq/Irq.):00044         * - MusicFrame
                      (./engine/irq/Irq.):00045         * - PSGFrame
                      (./engine/irq/Irq.):00046         * - IrqObjSmps
                      (./engine/irq/Irq.):00047         * - IrqTimer
                      (./engine/irq/Irq.):00048         *
                      (./engine/irq/Irq.):00049         * ---------------------------------------------------------------------------
                      (./engine/irq/Irq.):00050         
6C25 0000             (./engine/irq/Irq.):00051         Irq_user_routine fdb 0                 ; user irq routine called by IrqManager 
     4DFF             (./engine/irq/Irq.):00052         Irq_one_frame    equ 312*64-1          ; one frame timer (lines*cycles_per_lines-1), timer launch at -1
     0040             (./engine/irq/Irq.):00053         Irq_one_line     equ 64
                      (./engine/irq/Irq.):00054                
6C27                  (./engine/irq/Irq.):00055         IrqInit
6C27 CC6C9A           (./engine/irq/Irq.):00056 [3]             ldd   #IrqManager
6C2A FD6027           (./engine/irq/Irq.):00057 [6]             std   TIMERPT
6C2D 39               (./engine/irq/Irq.):00058 [5]             rts
                      (./engine/irq/Irq.):00059         
6C2E                  (./engine/irq/Irq.):00060         IrqSet50Hz
6C2E C642             (./engine/irq/Irq.):00061 [2]             ldb   #$42
6C30 F7E7C5           (./engine/irq/Irq.):00062 [5]             stb   MC6846.TCR               ; timer precision x8
6C33 CC4DFF           (./engine/irq/Irq.):00063 [3]             ldd   #Irq_one_frame           ; on every frame
6C36 FDE7C6           (./engine/irq/Irq.):00064 [6]             std   MC6846.TMSB
6C39 BD6C3D           (./engine/irq/Irq.):00065 [8]             jsr   IrqOn   
6C3C 39               (./engine/irq/Irq.):00066 [5]             rts
                      (./engine/irq/Irq.):00067                
6C3D                  (./engine/irq/Irq.):00068         IrqOn         
6C3D B66019           (./engine/irq/Irq.):00069 [5]             lda   $6019                           
6C40 8A20             (./engine/irq/Irq.):00070 [2]             ora   #$20
6C42 B76019           (./engine/irq/Irq.):00071 [5]             sta   $6019                    ; STATUS register
6C45 1CEF             (./engine/irq/Irq.):00072 [3]             andcc #$EF                     ; tell 6809 to activate irq
6C47 39               (./engine/irq/Irq.):00073 [5]             rts
                      (./engine/irq/Irq.):00074                 
6C48                  (./engine/irq/Irq.):00075         IrqOff 
6C48 B66019           (./engine/irq/Irq.):00076 [5]             lda   $6019                           
6C4B 84DF             (./engine/irq/Irq.):00077 [2]             anda  #$DF
6C4D B76019           (./engine/irq/Irq.):00078 [5]             sta   $6019                    ; STATUS register
6C50 1A10             (./engine/irq/Irq.):00079 [3]             orcc  #$10                     ; tell 6809 to inactivate irq
6C52 39               (./engine/irq/Irq.):00080 [5]             rts
                      (./engine/irq/Irq.):00081         
6C53                  (./engine/irq/Irq.):00082         IrqPause
6C53 3402             (./engine/irq/Irq.):00083 [5+1]           pshs  a
6C55 B66019           (./engine/irq/Irq.):00084 [5]             lda   $6019
6C58 8420             (./engine/irq/Irq.):00085 [2]             anda  #$20
6C5A 2607             (./engine/irq/Irq.):00086 [3]             bne   @irqoff
6C5C 8600             (./engine/irq/Irq.):00087 [2]             lda   #0
6C5E B76C70           (./engine/irq/Irq.):00088 [5]             sta   @irqst
6C61 2008             (./engine/irq/Irq.):00089 [3]             bra   >
6C63 8601             (./engine/irq/Irq.):00090 [2]     @irqoff lda   #1
6C65 B76C70           (./engine/irq/Irq.):00091 [5]             sta   @irqst
6C68 BD6C48           (./engine/irq/Irq.):00092 [8]             jsr   IrqOff
6C6B 3582             (./engine/irq/Irq.):00093 [5+3]   !       puls  a,pc
6C6D                  (./engine/irq/Irq.):00094         IrqUnpause
6C6D 3402             (./engine/irq/Irq.):00095 [5+1]           pshs  a
6C6F 8600             (./engine/irq/Irq.):00096 [2]             lda   #0
     6C70             (./engine/irq/Irq.):00097         @irqst  equ   *-1
6C71 2703             (./engine/irq/Irq.):00098 [3]             beq   >
6C73 BD6C3D           (./engine/irq/Irq.):00099 [8]             jsr   IrqOn
6C76 7F6C70           (./engine/irq/Irq.):00100 [7]     !       clr   @irqst
6C79 3582             (./engine/irq/Irq.):00101 [5+3]           puls  a,pc
                      (./engine/irq/Irq.):00102         
6C7B                  (./engine/irq/Irq.):00103         IrqSync 
6C7B C642             (./engine/irq/Irq.):00104 [2]             ldb   #$42
6C7D F7E7C5           (./engine/irq/Irq.):00105 [5]             stb   MC6846.TCR
                      (./engine/irq/Irq.):00106                 
6C80 C608             (./engine/irq/Irq.):00107 [2]             ldb   #8                       ; ligne * 64 (cycles per line) / 8 (nb tempo loop cycles)
6C82 3D               (./engine/irq/Irq.):00108 [11]            mul
6C83 1F02             (./engine/irq/Irq.):00109 [6]             tfr   d,y
6C85 31A8E0           (./engine/irq/Irq.):00110 [4+1]           leay  -32,y                    ; manual adjustment
                      (./engine/irq/Irq.):00111         !
6C88 7DE7E7           (./engine/irq/Irq.):00112 [7]             tst   $E7E7                    ;
6C8B 2BFB             (./engine/irq/Irq.):00113 [3]             bmi   <                        ; while spot is in a visible screen line        
6C8D 7DE7E7           (./engine/irq/Irq.):00114 [7]     !       tst   $E7E7                    ;
6C90 2AFB             (./engine/irq/Irq.):00115 [3]             bpl   <                        ; while spot is not in a visible screen line
6C92 313F             (./engine/irq/Irq.):00116 [4+1]   !       leay  -1,y                     ;
6C94 26FC             (./engine/irq/Irq.):00117 [3]             bne   <                        ; wait until desired line
                      (./engine/irq/Irq.):00118                
6C96 BFE7C6           (./engine/irq/Irq.):00119 [6]             stx   MC6846.TMSB              ; spot is at the end of desired line
6C99 39               (./engine/irq/Irq.):00120 [5]             rts  
                      (./engine/irq/Irq.):00121         
     E7               (./engine/irq/Irq.):00122                 setdp $E7
6C9A                  (./engine/irq/Irq.):00123         IrqManager
6C9A 10FF6CBE         (./engine/irq/Irq.):00124 [7]             sts   @stack                   ; backup system stack
6C9E 10CE6CF7         (./engine/irq/Irq.):00125 [4]             lds   #Irq_sys_stack           ; set tmp system stack for IRQ 
6CA2 7C6784           (./engine/irq/Irq.):00126 [7]             inc   gfxlock.frame.count+1
6CA5 2603             (./engine/irq/Irq.):00127 [3]             bne   >
6CA7 7C6783           (./engine/irq/Irq.):00128 [7]             inc   gfxlock.frame.count
                      (./engine/irq/Irq.):00129         !
6CAA 7D9FD1           (./engine/irq/Irq.):00130 [7]             tst   glb_Page                 ; test special mode (glb_Page==0)
6CAD 2714             (./engine/irq/Irq.):00131 [3]             beq   @smode                   ; branch if rendering tiles - force RAM use instead of testing ROM or RAM
                      (./engine/irq/Irq.):00132                 _GetCartPageB
                      (    _GetCartPageB):00001          IFDEF T2
                      (    _GetCartPageB):00002                 jsr   GetCartPageB
                      (    _GetCartPageB):00003          ELSE
6CAF D6E6             (    _GetCartPageB):00004 [4]             ldb   $E7E6
                      (    _GetCartPageB):00005          ENDC
6CB1 F76CB9           (./engine/irq/Irq.):00133 [5]             stb   @page                    ; backup data page normally
6CB4 AD9F6C25         (./engine/irq/Irq.):00134 [7+5]           jsr   [Irq_user_routine]
6CB8 8600             (./engine/irq/Irq.):00135 [2]             lda   #0                       ; (dynamic)
     6CB9             (./engine/irq/Irq.):00136         @page   equ   *-1
                      (./engine/irq/Irq.):00137                 _SetCartPageA                  ; restore data page
                      (    _SetCartPageA):00001          IFDEF T2
                      (    _SetCartPageA):00002                 jsr   SetCartPageA
                      (    _SetCartPageA):00003          ELSE
6CBA 97E6             (    _SetCartPageA):00004 [4]             sta   $E7E6                    ; selection de la page RAM en zone cartouche
                      (    _SetCartPageA):00005          ENDC
6CBC 10CE0000         (./engine/irq/Irq.):00138 [4]     @end    lds   #0                       ; (dynamic) restore system stack   
     6CBE             (./engine/irq/Irq.):00139         @stack  equ   *-2
6CC0 7EE830           (./engine/irq/Irq.):00140 [4]             jmp   $E830                    ; return to caller
6CC3                  (./engine/irq/Irq.):00141         @smode
6CC3 D6E6             (./engine/irq/Irq.):00142 [4]             ldb   <$E6
6CC5 F76CD2           (./engine/irq/Irq.):00143 [5]             stb   @page2                   ; backup data page
6CC8 AD9F6C25         (./engine/irq/Irq.):00144 [7+5]           jsr   [Irq_user_routine]
6CCC 8400             (./engine/irq/Irq.):00145 [2]             anda  #0
6CCE B79FD1           (./engine/irq/Irq.):00146 [5]             sta   glb_Page                 ; restore special page mode
6CD1 8600             (./engine/irq/Irq.):00147 [2]             lda   #0                       ; (dynamic)
     6CD2             (./engine/irq/Irq.):00148         @page2  equ   *-1
6CD3 97E6             (./engine/irq/Irq.):00149 [4]             sta   <$E6                     ; restore data page
6CD5 20E5             (./engine/irq/Irq.):00150 [3]             bra   @end
                      (./engine/irq/Irq.):00151         
                      (./engine/irq/Irq.):00152         ; This space allow the use of system stack inside IRQ calls
                      (./engine/irq/Irq.):00153         ; otherwise the writes in sys stack will erase data when S is in use
                      (./engine/irq/Irq.):00154         ; (outside of IRQ) for another task than sys stack, ex: stack blast copy 
6CD7 0000000000000000 (./engine/irq/Irq.):00155                 fill  0,32
     0000000000000000
     0000000000000000
     0000000000000000
6CF7                  (./engine/irq/Irq.):00156         Irq_sys_stack
                      (./engine/irq/Irq.):00157         
     9F               (./engine/irq/Irq.):00158                 setdp dp/256
                      (./global/global-t):00020         
                      (./global/global-t):00021             ; vgc player
                      (./global/global-t):00022             INCLUDE "./engine/sound/vgc/lib/vgcplayer.h.asm"
                      (./engine/sound/vg):00001         ;******************************************************************
                      (./engine/sound/vg):00002         ; 6502 BBC Micro Compressed VGM (VGC) Music Player
                      (./engine/sound/vg):00003         ; By Simon Morris
                      (./engine/sound/vg):00004         ; https://github.com/simondotm/vgm-player-bbc
                      (./engine/sound/vg):00005         ; https://github.com/simondotm/vgm-packer
                      (./engine/sound/vg):00006         ;******************************************************************
                      (./engine/sound/vg):00007         
                      (./engine/sound/vg):00008         ;  vars without huffman
6CF7 00000000         (./engine/sound/vg):00009         VGM_VARS fill 0,4
                      (./engine/sound/vg):00010         
                      (./engine/sound/vg):00011         ; registers used for each compressed stream (they are context switched)
     6CF7             (./engine/sound/vg):00012         lz_vars equ VGM_VARS+0
     6CF7             (./engine/sound/vg):00013         vgc_literal_cnt  equ lz_vars+0
     6CF9             (./engine/sound/vg):00014         vgc_match_cnt    equ lz_vars+2
                      (./engine/sound/vg):00015         
     007D             (./engine/sound/vg):00016         VGM_MUSIC_BPM equ 125
     0008             (./engine/sound/vg):00017         VGM_BEATS_PER_PATTERN equ 8
                      (./engine/sound/vg):00018         
     0018             (./engine/sound/vg):00019         VGM_FRAMES_PER_BEAT equ (50*60)/VGM_MUSIC_BPM
     00C0             (./engine/sound/vg):00020         VGM_FRAMES_PER_PATTERN equ VGM_FRAMES_PER_BEAT*VGM_BEATS_PER_PATTERN
                      (./global/global-t):00023             INCLUDE "./engine/sound/vgc/lib/vgcplayer.asm"
                      (./engine/sound/vg):00001         ;******************************************************************
                      (./engine/sound/vg):00002         ; 6502 BBC Micro Compressed VGM (VGC) Music Player
                      (./engine/sound/vg):00003         ; By Simon Morris
                      (./engine/sound/vg):00004         ; https://github.com/simondotm/vgm-player-bbc
                      (./engine/sound/vg):00005         ; https://github.com/simondotm/vgm-packer
                      (./engine/sound/vg):00006         ;
                      (./engine/sound/vg):00007         ; 6809 version
                      (./engine/sound/vg):00008         ; By Benoit Rousseau
                      (./engine/sound/vg):00009         ;******************************************************************
                      (./engine/sound/vg):00010         
                      (./engine/sound/vg):00011                 INCLUDE "./engine/sound/sn76489.asm"
                      (./engine/sound/sn):00001         
                      (./engine/sound/sn):00002         ; Reset SN76489 sound chip to a default (silent) state
                      (./engine/sound/sn):00003         ; ----------------------------------------------------
                      (./engine/sound/sn):00004         
                      (./engine/sound/sn):00005          IFNDEF sn76489.reset
6CFB                  (./engine/sound/sn):00006         sn76489.reset
6CFB 869F             (./engine/sound/sn):00007 [2]             lda   #$9F
6CFD B7E7FF           (./engine/sound/sn):00008 [5]             sta   SN76489.D
     6CFF             (./engine/sound/sn):00009         vgc_port_01 equ *-1
6D00 12               (./engine/sound/sn):00010 [2]             nop
6D01 12               (./engine/sound/sn):00011 [2]             nop
6D02 86BF             (./engine/sound/sn):00012 [2]             lda   #$BF
6D04 B7E7FF           (./engine/sound/sn):00013 [5]             sta   SN76489.D  
     6D06             (./engine/sound/sn):00014         vgc_port_02 equ *-1  
6D07 12               (./engine/sound/sn):00015 [2]             nop
6D08 12               (./engine/sound/sn):00016 [2]             nop
6D09 86DF             (./engine/sound/sn):00017 [2]             lda   #$DF
6D0B B7E7FF           (./engine/sound/sn):00018 [5]             sta   SN76489.D
     6D0D             (./engine/sound/sn):00019         vgc_port_03 equ *-1
6D0E 12               (./engine/sound/sn):00020 [2]             nop
6D0F 12               (./engine/sound/sn):00021 [2]             nop
6D10 86FF             (./engine/sound/sn):00022 [2]             lda   #$FF
6D12 B7E7FF           (./engine/sound/sn):00023 [5]             sta   SN76489.D  
     6D14             (./engine/sound/sn):00024         vgc_port_04 equ *-1
6D15 39               (./engine/sound/sn):00025 [5]             rts
                      (./engine/sound/sn):00026          ENDC
                      (./engine/sound/vg):00012         
                      (./engine/sound/vg):00013         ;---------------------------------------------------------------
                      (./engine/sound/vg):00014         ; VGM Player Library code
                      (./engine/sound/vg):00015         ;---------------------------------------------------------------
                      (./engine/sound/vg):00016         
                      (./engine/sound/vg):00017         ;--------------------------------------------------
                      (./engine/sound/vg):00018         ; user callable routines:
                      (./engine/sound/vg):00019         ;  vgc_init
                      (./engine/sound/vg):00020         ;  vgc_update
                      (./engine/sound/vg):00021         ;  sn76489.reset
                      (./engine/sound/vg):00022         ;  sn_write
                      (./engine/sound/vg):00023         ;--------------------------------------------------
                      (./engine/sound/vg):00024         
6D16                  (./engine/sound/vg):00025         vgc_registers
6D16 6CFF             (./engine/sound/vg):00026                 fdb vgc_port_01
6D18 6D06             (./engine/sound/vg):00027                 fdb vgc_port_02
6D1A 6D0D             (./engine/sound/vg):00028                 fdb vgc_port_03
6D1C 6D14             (./engine/sound/vg):00029                 fdb vgc_port_04
6D1E 6EB7             (./engine/sound/vg):00030                 fdb vgc_port_05
6D20 6ED5             (./engine/sound/vg):00031                 fdb vgc_port_06
6D22 FFFF             (./engine/sound/vg):00032                 fdb -1
                      (./engine/sound/vg):00033         
                      (./engine/sound/vg):00034         ;-------------------------------------------
                      (./engine/sound/vg):00035         ; vgc_play
                      (./engine/sound/vg):00036         ;-------------------------------------------
                      (./engine/sound/vg):00037         ; Initialise playback routine
                      (./engine/sound/vg):00038         ;  B=1 for looped playback, 0 for no loop
                      (./engine/sound/vg):00039         ;  X point to the VGC data stream to be played
                      (./engine/sound/vg):00040         ;-------------------------------------------
6D24                  (./engine/sound/vg):00041         vgc_init
6D24 BD6C53           (./engine/sound/vg):00042 [8]             jsr   IrqPause
6D27 BD6CFB           (./engine/sound/vg):00043 [8]             jsr   sn76489.reset
6D2A 8674             (./engine/sound/vg):00044 [2]             lda   #vgc_stream_buffers/256  ; HI byte of a page aligned 2Kb RAM buffer address
6D2C B76DF5           (./engine/sound/vg):00045 [5]             sta   vgc_buffers              ; stash the 2kb buffer address
6D2F F76DF7           (./engine/sound/vg):00046 [5]             stb   vgc_loop
6D32 10BF6DFC         (./engine/sound/vg):00047 [7]             sty   vgc_callback
6D36 A684             (./engine/sound/vg):00048 [4+0]           lda   ,x                       ; get memory page that contains track data
6D38 B76DFA           (./engine/sound/vg):00049 [5]             sta   vgc_source_page
                      (./engine/sound/vg):00050                 _GetCartPageB
                      (    _GetCartPageB):00001          IFDEF T2
                      (    _GetCartPageB):00002                 jsr   GetCartPageB
                      (    _GetCartPageB):00003          ELSE
6D3B F6E7E6           (    _GetCartPageB):00004 [5]             ldb   $E7E6
                      (    _GetCartPageB):00005          ENDC
6D3E F76D4D           (./engine/sound/vg):00051 [5]             stb   @a
                      (./engine/sound/vg):00052                 _SetCartPageA
                      (    _SetCartPageA):00001          IFDEF T2
                      (    _SetCartPageA):00002                 jsr   SetCartPageA
                      (    _SetCartPageA):00003          ELSE
6D41 B7E7E6           (    _SetCartPageA):00004 [5]             sta   $E7E6                    ; selection de la page RAM en zone cartouche
                      (    _SetCartPageA):00005          ENDC
6D44 AE01             (./engine/sound/vg):00053 [5+1]           ldx   1,x                      ; get ptr to track data
6D46 BF6DF8           (./engine/sound/vg):00054 [6]             stx   vgc_source               ; stash the data source addr for looping
6D49 BD6E0E           (./engine/sound/vg):00055 [8]             jsr   vgc_stream_mount         ; Prepare the data for streaming (passed in X)
6D4C 8600             (./engine/sound/vg):00056 [2]             lda   #0
     6D4D             (./engine/sound/vg):00057         @a      equ   *-1
                      (./engine/sound/vg):00058                 _SetCartPageA
                      (    _SetCartPageA):00001          IFDEF T2
                      (    _SetCartPageA):00002                 jsr   SetCartPageA
                      (    _SetCartPageA):00003          ELSE
6D4E B7E7E6           (    _SetCartPageA):00004 [5]             sta   $E7E6                    ; selection de la page RAM en zone cartouche
                      (    _SetCartPageA):00005          ENDC
6D51 7E6C6D           (./engine/sound/vg):00059 [4]             jmp   IrqUnpause
                      (./engine/sound/vg):00060         
                      (./engine/sound/vg):00061         ;-------------------------------------------
                      (./engine/sound/vg):00062         ; vgc_update
                      (./engine/sound/vg):00063         ;-------------------------------------------
                      (./engine/sound/vg):00064         ;  call every 50Hz to play music
                      (./engine/sound/vg):00065         ;  vgc_init must be called prior to this
                      (./engine/sound/vg):00066         ; On entry A is non-zero if the music should be looped
                      (./engine/sound/vg):00067         ;  returns non-zero when VGC is finished.
                      (./engine/sound/vg):00068         ;-------------------------------------------
6D54                  (./engine/sound/vg):00069         vgc_update
6D54 B66DF6           (./engine/sound/vg):00070 [5]             lda   vgc_finished
6D57 263A             (./engine/sound/vg):00071 [3]             bne   @exit        
6D59 B66DFA           (./engine/sound/vg):00072 [5]             lda   vgc_source_page
6D5C 2601             (./engine/sound/vg):00073 [3]             bne   @a
6D5E 39               (./engine/sound/vg):00074 [5]             rts                            ; no music to play
6D5F                  (./engine/sound/vg):00075         @a      _SetCartPageA
                      (    _SetCartPageA):00001          IFDEF T2
                      (    _SetCartPageA):00002                 jsr   SetCartPageA
                      (    _SetCartPageA):00003          ELSE
6D5F B7E7E6           (    _SetCartPageA):00004 [5]             sta   $E7E6                    ; selection de la page RAM en zone cartouche
                      (    _SetCartPageA):00005          ENDC
                      (./engine/sound/vg):00076                 ; SN76489 data register format is %1cctdddd where cc=channel, t=0=tone, t=1=volume, dddd=data
                      (./engine/sound/vg):00077                 ; The data is run length encoded.
                      (./engine/sound/vg):00078                 ; Get Channel 3 tone first because that contains the EOF marker        
                      (./engine/sound/vg):00079                 ; Update Tone3
6D62                  (./engine/sound/vg):00080         vgc_do_update
6D62 8603             (./engine/sound/vg):00081 [2]             lda   #3
6D64 BD6E97           (./engine/sound/vg):00082 [8]             jsr   vgc_update_register1  ; on exit C set if data changed, B is last value
6D67 2407             (./engine/sound/vg):00083 [3]             bcc   @more_updates
                      (./engine/sound/vg):00084                 ;
6D69 F66EB9           (./engine/sound/vg):00085 [5]             ldb   skip_tone3+1
6D6C C108             (./engine/sound/vg):00086 [2]             cmpb  #$08     ; EOF marker? (0x08 is an invalid tone 3 value)
6D6E 2724             (./engine/sound/vg):00087 [3]             beq   @finished
                      (./engine/sound/vg):00088                 ; 
6D70                  (./engine/sound/vg):00089         @more_updates
6D70 8607             (./engine/sound/vg):00090 [2]             lda   #7
6D72 BD6E97           (./engine/sound/vg):00091 [8]             jsr   vgc_update_register1  ; Volume3
6D75 8600             (./engine/sound/vg):00092 [2]             lda   #0
6D77 BD6EC7           (./engine/sound/vg):00093 [8]             jsr   vgc_update_register2  ; Tone0
6D7A 8604             (./engine/sound/vg):00094 [2]             lda   #4
6D7C BD6E97           (./engine/sound/vg):00095 [8]             jsr   vgc_update_register1  ; Volume0
6D7F 8601             (./engine/sound/vg):00096 [2]             lda   #1
6D81 BD6EC7           (./engine/sound/vg):00097 [8]             jsr   vgc_update_register2  ; Tone1
6D84 8605             (./engine/sound/vg):00098 [2]             lda   #5
6D86 BD6E97           (./engine/sound/vg):00099 [8]             jsr   vgc_update_register1  ; Volume1
6D89 8602             (./engine/sound/vg):00100 [2]             lda   #2
6D8B BD6EC7           (./engine/sound/vg):00101 [8]             jsr   vgc_update_register2  ; Tone2
6D8E 8606             (./engine/sound/vg):00102 [2]             lda   #6
6D90 BD6E97           (./engine/sound/vg):00103 [8]             jsr   vgc_update_register1  ; Volume2
6D93                  (./engine/sound/vg):00104         @exit
6D93 39               (./engine/sound/vg):00105 [5]             rts
                      (./engine/sound/vg):00106                 ;
6D94                  (./engine/sound/vg):00107         @finished
                      (./engine/sound/vg):00108                 ; end of tune reached
6D94 BE6DFC           (./engine/sound/vg):00109 [6]             ldx   vgc_callback             ; check callback routine
6D97 2702             (./engine/sound/vg):00110 [3]             beq   >
6D99 6E84             (./engine/sound/vg):00111 [3+0]           jmp   ,x
6D9B B66DF7           (./engine/sound/vg):00112 [5]     !       lda   vgc_loop
6D9E 270F             (./engine/sound/vg):00113 [3]             beq   @no_looping
                      (./engine/sound/vg):00114                 ; restart if looping
6DA0 BE6DF8           (./engine/sound/vg):00115 [6]             ldx   vgc_source
6DA3 B66DF7           (./engine/sound/vg):00116 [5]             lda   vgc_loop
6DA6 B66DF5           (./engine/sound/vg):00117 [5]             lda   vgc_buffers
6DA9 BD6E0E           (./engine/sound/vg):00118 [8]             jsr   vgc_stream_mount
6DAC 7E6D54           (./engine/sound/vg):00119 [4]             jmp   vgc_update
6DAF                  (./engine/sound/vg):00120         @no_looping 
                      (./engine/sound/vg):00121                 ; no looping so set flag $ stop PSG
6DAF F76DF6           (./engine/sound/vg):00122 [5]             stb   vgc_finished    ; any NZ value is fine, in this case 0x08
6DB2 7E6CFB           (./engine/sound/vg):00123 [4]             jmp   sn76489.reset   ; also returns non-zero in A
                      (./engine/sound/vg):00124         
                      (./engine/sound/vg):00125         ;-------------------------------------------
                      (./engine/sound/vg):00126         ; VGC internal routines
                      (./engine/sound/vg):00127         ; Not user callable.
                      (./engine/sound/vg):00128         ;-------------------------------------------
                      (./engine/sound/vg):00129         
                      (./engine/sound/vg):00130         ;-------------------------------------------
                      (./engine/sound/vg):00131         ; local vgc workspace
                      (./engine/sound/vg):00132         ;-------------------------------------------
                      (./engine/sound/vg):00133         
     0008             (./engine/sound/vg):00134         VGC_STREAM_CONTEXT_SIZE equ 8 ; number of bytes total workspace for a stream
     0008             (./engine/sound/vg):00135         VGC_STREAMS equ 8
                      (./engine/sound/vg):00136         
6DB5                  (./engine/sound/vg):00137         vgc_streams ; decoder contexts - 8 bytes per stream, 8 streams (64 bytes)
6DB5 0000000000000000 (./engine/sound/vg):00138                 fill 0,VGC_STREAMS*VGC_STREAM_CONTEXT_SIZE
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
                      (./engine/sound/vg):00139                 ; 0 zp_stream_src     ; stream data ptr HI/LO
                      (./engine/sound/vg):00140                 ; 2 vgc_literal_cnt    ; literal count HI/LO
                      (./engine/sound/vg):00141                 ; 4 vgc_match_cnt      ; match count HI/LO
                      (./engine/sound/vg):00142                 ; 6 lz_window_src     ; window read ptr - index LO
                      (./engine/sound/vg):00143                 ; 7 lz_window_dst     ; window write ptr - index LO
                      (./engine/sound/vg):00144         
6DF5 00               (./engine/sound/vg):00145         vgc_buffers     fcb 0    ; the HI byte of the address where the buffers are stored
6DF6 00               (./engine/sound/vg):00146         vgc_finished    fcb 0    ; a flag to indicate player has reached the end of the vgc stream
6DF7 00               (./engine/sound/vg):00147         vgc_loop        fcb 0    ; non zero if tune is to be looped
6DF8 0000             (./engine/sound/vg):00148         vgc_source      fdb 0    ; vgc data address
6DFA 0000             (./engine/sound/vg):00149         vgc_source_page fdb 0    ; vgc data address
6DFC 0000             (./engine/sound/vg):00150         vgc_callback    fdb 0    ; 0=no calback routine
                      (./engine/sound/vg):00151         
                      (./engine/sound/vg):00152         ; 8 counters for VGC register update counters (RLE)
6DFE                  (./engine/sound/vg):00153         vgc_register_counts
6DFE 0000000000000000 (./engine/sound/vg):00154                 fill 0,8
                      (./engine/sound/vg):00155         
                      (./engine/sound/vg):00156         ; Table of SN76489 flags for the 8 LATCH/DATA registers
                      (./engine/sound/vg):00157         ; %1cctdddd 
6E06                  (./engine/sound/vg):00158         vgc_register_headers
6E06 80               (./engine/sound/vg):00159                 fcb $80+%00000000   ; Tone 0
6E07 A0               (./engine/sound/vg):00160                 fcb $80+%00100000   ; Tone 1
6E08 C0               (./engine/sound/vg):00161                 fcb $80+%01000000   ; Tone 2
6E09 E0               (./engine/sound/vg):00162                 fcb $80+%01100000   ; Tone 3
6E0A 90               (./engine/sound/vg):00163                 fcb $90+%00000000   ; Volume 0
6E0B B0               (./engine/sound/vg):00164                 fcb $90+%00100000   ; Volume 1
6E0C D0               (./engine/sound/vg):00165                 fcb $90+%01000000   ; Volume 2
6E0D F0               (./engine/sound/vg):00166                 fcb $90+%01100000   ; Volume 3
                      (./engine/sound/vg):00167         
                      (./engine/sound/vg):00168         ; VGC file parsing - Initialise the system for the provided in-memory VGC data stream.
                      (./engine/sound/vg):00169         ; On entry X point to address of the vgc data
6E0E                  (./engine/sound/vg):00170         vgc_stream_mount
                      (./engine/sound/vg):00171                 ; parse data stream
                      (./engine/sound/vg):00172                 ; VGC broadly uses LZ4 frame $ block formats for convenience
                      (./engine/sound/vg):00173                 ; however there are assumptions for format:
                      (./engine/sound/vg):00174                 ;  Magic number[4], Flags[1], MaxBlockSize[1], Header checksum[1]
                      (./engine/sound/vg):00175                 ;  Contains 8 blocks
                      (./engine/sound/vg):00176                 ; Obviously since this is an 8-bit CPU no files or blocks can be > 64Kb in size        
                      (./engine/sound/vg):00177                 ; VGC streams have a different magic number to LZ4
                      (./engine/sound/vg):00178                 ; [56 47 43 XX]
                      (./engine/sound/vg):00179                 ; where XX:
                      (./engine/sound/vg):00180                 ; bit 6 - LZ 8 bit (0) or 16 bit (1)
                      (./engine/sound/vg):00181                 ; bit 7 - Huffman (1) or no huffman (0)
                      (./engine/sound/vg):00182                 ; -- 6809 version -- only support : 8 bit / no huffman
6E0E 3307             (./engine/sound/vg):00183 [4+1]           leau  7,x ; Skip frame header, and move to first block
                      (./engine/sound/vg):00184                 ; init first block position
6E10 8E0000           (./engine/sound/vg):00185 [3]             ldx   #0
6E13 108E6DFE         (./engine/sound/vg):00186 [4]             ldy   #vgc_register_counts
                      (./engine/sound/vg):00187                 ; clear vgc finished flag
6E17 7F6DF6           (./engine/sound/vg):00188 [7]             clr   vgc_finished
6E1A                  (./engine/sound/vg):00189         @block_loop
                      (./engine/sound/vg):00190                 ; get start address of encoded data for vgc_stream[x] (block ptr+4)
6E1A 3344             (./engine/sound/vg):00191 [4+1]           leau  4,u  ; skip block header
6E1C EF896DB5         (./engine/sound/vg):00192 [5+4]           stu   vgc_streams+VGC_STREAMS*0,x  ; zp_stream_src
6E20 CC0000           (./engine/sound/vg):00193 [3]             ldd   #0
6E23 ED896DC5         (./engine/sound/vg):00194 [5+4]           std   vgc_streams+VGC_STREAMS*2,x  ; literal cnt 
6E27 ED896DD5         (./engine/sound/vg):00195 [5+4]           std   vgc_streams+VGC_STREAMS*4,x  ; match cnt 
6E2B ED896DE5         (./engine/sound/vg):00196 [5+4]           std   vgc_streams+VGC_STREAMS*6,x  ; window src dst ptr 
                      (./engine/sound/vg):00197                 ; setup RLE tables
6E2F 4C               (./engine/sound/vg):00198 [2]             inca
6E30 A7A0             (./engine/sound/vg):00199 [4+2]           sta   ,y+
                      (./engine/sound/vg):00200                 ;
6E32 E65C             (./engine/sound/vg):00201 [4+1]           ldb   -4,u                     ; read 16-bit block size
6E34 A65D             (./engine/sound/vg):00202 [4+1]           lda   -3,u                     ; read 16-bit block size
6E36 33CB             (./engine/sound/vg):00203 [4+4]           leau  d,u                      ; move to next block
                      (./engine/sound/vg):00204                 ;
                      (./engine/sound/vg):00205                 ; for all 8 blocks
6E38 3002             (./engine/sound/vg):00206 [4+1]           leax  2,x
6E3A 8C0010           (./engine/sound/vg):00207 [4]             cmpx  #16
6E3D 26DB             (./engine/sound/vg):00208 [3]             bne   @block_loop
6E3F 39               (./engine/sound/vg):00209 [5]             rts
                      (./engine/sound/vg):00210         
                      (./engine/sound/vg):00211         ;----------------------------------------------------------------------
                      (./engine/sound/vg):00212         ; fetch register data byte from register stream selected in A
                      (./engine/sound/vg):00213         ; This byte will be LZ4 encoded
                      (./engine/sound/vg):00214         ;  A is register id (0-7)
                      (./engine/sound/vg):00215         ;  clobbers X,U
6E40                  (./engine/sound/vg):00216         vgc_get_register_data
                      (./engine/sound/vg):00217                 ; set the LZ4 decoder stream workspace buffer (initialised by vgc_stream_mount)
6E40 8E0000           (./engine/sound/vg):00218 [3]             ldx   #0
6E43 3086             (./engine/sound/vg):00219 [4+1]           leax  a,x
6E45 3086             (./engine/sound/vg):00220 [4+1]           leax  a,x
6E47 BB6DF5           (./engine/sound/vg):00221 [5]             adda  vgc_buffers ; hi byte of the base address of the 2Kb (8x256) vgc stream buffers
                      (./engine/sound/vg):00222                 ; store hi byte of where the 256 byte vgc stream buffer for this stream is located
6E4A B76F30           (./engine/sound/vg):00223 [5]             sta   lz_window_src ; **SELFMOD** HI
6E4D B76ED8           (./engine/sound/vg):00224 [5]             sta   lz_window_dst ; **SELFMOD** HI
                      (./engine/sound/vg):00225                 ; calculate the stream buffer context
6E50 BF6E76           (./engine/sound/vg):00226 [6]             stx   @loadX ; Stash X for later *** SELF MODIFYING SEE BELOW ***
                      (./engine/sound/vg):00227                 ;
                      (./engine/sound/vg):00228                 ; since we have 8 separately compressed register streams
                      (./engine/sound/vg):00229                 ; we have to load the required decoder context to ZP
6E53 EE896DB5         (./engine/sound/vg):00230 [5+4]           ldu   vgc_streams+VGC_STREAMS*0,x
6E57 EC896DC5         (./engine/sound/vg):00231 [5+4]           ldd   vgc_streams+VGC_STREAMS*2,x
6E5B FD6CF7           (./engine/sound/vg):00232 [6]             std   vgc_literal_cnt
6E5E EC896DD5         (./engine/sound/vg):00233 [5+4]           ldd   vgc_streams+VGC_STREAMS*4,x
6E62 FD6CF9           (./engine/sound/vg):00234 [6]             std   vgc_match_cnt
6E65 EC896DE5         (./engine/sound/vg):00235 [5+4]           ldd   vgc_streams+VGC_STREAMS*6,x
6E69 B76F31           (./engine/sound/vg):00236 [5]             sta   lz_window_src+1   ; **SELF MODIFY** LO
6E6C F76ED9           (./engine/sound/vg):00237 [5]             stb   lz_window_dst+1   ; **SELF MODIFY** LO
                      (./engine/sound/vg):00238                 ; then fetch a decompressed byte
6E6F BD6EEE           (./engine/sound/vg):00239 [8]             jsr   lz_decode_byte
6E72 F76E95           (./engine/sound/vg):00240 [5]             stb   @loadB ; Stash B for later - ** SMOD ** [4](2) faster than pha/pla 
                      (./engine/sound/vg):00241                 ; then we save the decoder context from ZP back to main ram
6E75 8E0000           (./engine/sound/vg):00242 [3]             ldx   #0  ; *** SELF MODIFIED - See above ***
     6E76             (./engine/sound/vg):00243         @loadX  equ *-2
6E78 EF896DB5         (./engine/sound/vg):00244 [5+4]           stu   vgc_streams+VGC_STREAMS*0,x
6E7C FC6CF7           (./engine/sound/vg):00245 [6]             ldd   vgc_literal_cnt
6E7F ED896DC5         (./engine/sound/vg):00246 [5+4]           std   vgc_streams+VGC_STREAMS*2,x
6E83 FC6CF9           (./engine/sound/vg):00247 [6]             ldd   vgc_match_cnt
6E86 ED896DD5         (./engine/sound/vg):00248 [5+4]           std   vgc_streams+VGC_STREAMS*4,x
6E8A B66F31           (./engine/sound/vg):00249 [5]             lda   lz_window_src+1 ; LO
6E8D F66ED9           (./engine/sound/vg):00250 [5]             ldb   lz_window_dst+1 ; LO
6E90 ED896DE5         (./engine/sound/vg):00251 [5+4]           std   vgc_streams+VGC_STREAMS*6,x
6E94 C600             (./engine/sound/vg):00252 [2]             ldb   #0 ;[2](2) - ***SELF MODIFIED - See above ***
     6E95             (./engine/sound/vg):00253         @loadB  equ *-1
6E96 39               (./engine/sound/vg):00254 [5]             rts
                      (./engine/sound/vg):00255         
                      (./engine/sound/vg):00256         ; Fetch 1 register data byte from the encoded stream and send to sound chip (volumes $ tone3)
                      (./engine/sound/vg):00257         ; A is register to update
                      (./engine/sound/vg):00258         ; on exit:
                      (./engine/sound/vg):00259         ;    C is set if an update happened and B contains last register value
                      (./engine/sound/vg):00260         ;    C is clear if no updated happened and B is preserved
                      (./engine/sound/vg):00261         
6E97                  (./engine/sound/vg):00262         vgc_update_register1
6E97 8E6DFE           (./engine/sound/vg):00263 [3]             ldx   #vgc_register_counts
6E9A 1CFE             (./engine/sound/vg):00264 [3]             andcc #$fe ; clear cc
6E9C 6A86             (./engine/sound/vg):00265 [6+1]           dec   a,x ; no effect on C
6E9E 2626             (./engine/sound/vg):00266 [3]             bne   skip_register_update
                      (./engine/sound/vg):00267         
                      (./engine/sound/vg):00268                 ; decode a byte $ send to psg
6EA0 B76EAF           (./engine/sound/vg):00269 [5]             sta   @LoadA
6EA3 BD6E40           (./engine/sound/vg):00270 [8]             jsr   vgc_get_register_data
6EA6 F76EB9           (./engine/sound/vg):00271 [5]             stb   @LoadB
6EA9 C40F             (./engine/sound/vg):00272 [2]             andb  #$0f
6EAB 8E6E06           (./engine/sound/vg):00273 [3]             ldx   #vgc_register_headers
6EAE 8600             (./engine/sound/vg):00274 [2]             lda   #0
     6EAF             (./engine/sound/vg):00275         @LoadA  equ   *-1
6EB0 EA86             (./engine/sound/vg):00276 [4+1]           orb   a,x
                      (./engine/sound/vg):00277                 ; check if it's a tone3 skip command ($ef) before we play it
                      (./engine/sound/vg):00278                 ; - this prevents the LFSR being reset unnecessarily
6EB2 C1EF             (./engine/sound/vg):00279 [2]             cmpb  #$ef
6EB4 2702             (./engine/sound/vg):00280 [3]             beq   skip_tone3
6EB6 D7FF             (./engine/sound/vg):00281 [4]             stb   <SN76489.D
     6EB7             (./engine/sound/vg):00282         vgc_port_05 equ *-1
6EB8                  (./engine/sound/vg):00283         skip_tone3
                      (./engine/sound/vg):00284                 ; get run length (top 4-bits+1)
6EB8 C600             (./engine/sound/vg):00285 [2]             ldb   #0
     6EB9             (./engine/sound/vg):00286         @LoadB  equ *-1
6EBA 54               (./engine/sound/vg):00287 [2]             lsrb
6EBB 54               (./engine/sound/vg):00288 [2]             lsrb
6EBC 54               (./engine/sound/vg):00289 [2]             lsrb
6EBD 54               (./engine/sound/vg):00290 [2]             lsrb
6EBE 5C               (./engine/sound/vg):00291 [2]             incb
6EBF 8E6DFE           (./engine/sound/vg):00292 [3]             ldx   #vgc_register_counts
6EC2 E786             (./engine/sound/vg):00293 [4+1]           stb   a,x
6EC4 1A01             (./engine/sound/vg):00294 [3]             orcc  #1 ; set cc
6EC6                  (./engine/sound/vg):00295         skip_register_update
6EC6 39               (./engine/sound/vg):00296 [5]             rts
                      (./engine/sound/vg):00297         
                      (./engine/sound/vg):00298         ; Fetch 2 register bytes (LATCH+DATA) from the encoded stream and send to sound chip (tone0, tone1, tone2)
                      (./engine/sound/vg):00299         ; Same parameters as vgc_update_register1
6EC7                  (./engine/sound/vg):00300         vgc_update_register2
6EC7 B76ED0           (./engine/sound/vg):00301 [5]             sta   @LoadA                  ; saves stream id
6ECA BD6E97           (./engine/sound/vg):00302 [8]             jsr   vgc_update_register1    ; returns stream in X if updated, and C=0 if no update needed
6ECD 24F7             (./engine/sound/vg):00303 [3]             bcc   skip_register_update
                      (./engine/sound/vg):00304                 ;
                      (./engine/sound/vg):00305                 ; decode 2nd byte and send to psg as (DATA)
6ECF 8600             (./engine/sound/vg):00306 [2]             lda   #0                      ; load stream id
     6ED0             (./engine/sound/vg):00307         @LoadA  equ   *-1
6ED1 BD6E40           (./engine/sound/vg):00308 [8]             jsr   vgc_get_register_data 
6ED4 D7FF             (./engine/sound/vg):00309 [4]             stb   <SN76489.D
     6ED5             (./engine/sound/vg):00310         vgc_port_06 equ *-1
6ED6 39               (./engine/sound/vg):00311 [5]             rts
                      (./engine/sound/vg):00312         
                      (./engine/sound/vg):00313         ;-------------------------------
                      (./engine/sound/vg):00314         ; lz4 decoder
                      (./engine/sound/vg):00315         ;-------------------------------
                      (./engine/sound/vg):00316         
                      (./engine/sound/vg):00317         ; push byte into decode buffer
                      (./engine/sound/vg):00318         ; clobbers Y, preserves A
6ED7                  (./engine/sound/vg):00319         lz_store_buffer    ; called twice - 4 byte overhead, 6 byte function. Cheaper to inline.
6ED7 F71234           (./engine/sound/vg):00320 [5]             stb   $1234   ; *** SELF MODIFIED ***
6EDA 7C6ED9           (./engine/sound/vg):00321 [7]             inc   lz_store_buffer+2
6EDD 39               (./engine/sound/vg):00322 [5]             rts                 ; [6] (1)
                      (./engine/sound/vg):00323         
                      (./engine/sound/vg):00324         ; provide these vars as cleaner addresses for the code address to be self modified
     6F30             (./engine/sound/vg):00325         lz_window_src equ lz_fetch_buffer+1 ; window read ptr HI (2 bytes) - index, 3 references
     6ED8             (./engine/sound/vg):00326         lz_window_dst equ lz_store_buffer+1 ; window write ptr HI (2 bytes) - index, 3 references
                      (./engine/sound/vg):00327         
                      (./engine/sound/vg):00328         ; Calculate a multi-byte lz4 style length into zp_temp
                      (./engine/sound/vg):00329         ; On entry A contains the initial counter value (LO)
                      (./engine/sound/vg):00330         ; Returns 16-bit length in X
6EDE                  (./engine/sound/vg):00331         lz_fetch_count
6EDE 8600             (./engine/sound/vg):00332 [2]             lda   #0
6EE0 1F01             (./engine/sound/vg):00333 [6]             tfr   d,x
6EE2 C10F             (./engine/sound/vg):00334 [2]             cmpb  #15                      ; >=15 signals byte extend
6EE4 2607             (./engine/sound/vg):00335 [3]             bne   lz_fetch_count_done
6EE6                  (./engine/sound/vg):00336         fetch
6EE6                  (./engine/sound/vg):00337         fetchByte1
6EE6 E6C0             (./engine/sound/vg):00338 [4+2]           ldb   ,u+
6EE8 3A               (./engine/sound/vg):00339 [3]             abx
6EE9 C1FF             (./engine/sound/vg):00340 [2]             cmpb  #255                     ; 255 signals byte extend       
6EEB 27F9             (./engine/sound/vg):00341 [3]             beq   fetch
6EED                  (./engine/sound/vg):00342         lz_fetch_count_done
6EED 39               (./engine/sound/vg):00343 [5]             rts
                      (./engine/sound/vg):00344         
                      (./engine/sound/vg):00345         ; decode a byte from the currently selected register stream
                      (./engine/sound/vg):00346         ; unlike typical lz style unpackers we are using a state machine
                      (./engine/sound/vg):00347         ; because it is necessary for us to be able to decode a byte at a time from 8 separate streams
6EEE                  (./engine/sound/vg):00348         lz_decode_byte
                      (./engine/sound/vg):00349             ; decoder state is:
                      (./engine/sound/vg):00350             ;  empty - fetch new token $ prepare
                      (./engine/sound/vg):00351             ;  literal - decode new literal
                      (./engine/sound/vg):00352             ;  match - decode new match
                      (./engine/sound/vg):00353         
                      (./engine/sound/vg):00354             ; lz4 block format:
                      (./engine/sound/vg):00355             ;  [TOKEN][LITERAL LENGTH][LITERALS][...][MATCH OFFSET][MATCH LENGTH]
                      (./engine/sound/vg):00356         
                      (./engine/sound/vg):00357         ; try fetching a literal byte from the stream
6EEE                  (./engine/sound/vg):00358         try_literal
6EEE B66CF8           (./engine/sound/vg):00359 [5]             lda   vgc_literal_cnt+1
6EF1 2605             (./engine/sound/vg):00360 [3]             bne   is_literal
6EF3 B66CF7           (./engine/sound/vg):00361 [5]             lda   vgc_literal_cnt
6EF6 272D             (./engine/sound/vg):00362 [3]             beq   try_match
                      (./engine/sound/vg):00363         
6EF8                  (./engine/sound/vg):00364         is_literal
6EF8                  (./engine/sound/vg):00365         fetchByte2
                      (./engine/sound/vg):00366                 ; fetch a literal $ stash in decode buffer
                      (./engine/sound/vg):00367                 ; plain LZ4 byte fetch
6EF8 E6C0             (./engine/sound/vg):00368 [4+2]           ldb   ,u+
6EFA BD6ED7           (./engine/sound/vg):00369 [8]             jsr   lz_store_buffer
6EFD F76F23           (./engine/sound/vg):00370 [5]             stb   stashB+1                 ; **SELF MODIFICATION**
                      (./engine/sound/vg):00371         
                      (./engine/sound/vg):00372                 ; using inverted counter
6F00 7C6CF8           (./engine/sound/vg):00373 [7]             inc vgc_literal_cnt+1
6F03 2603             (./engine/sound/vg):00374 [3]             bne >
6F05 7C6CF7           (./engine/sound/vg):00375 [7]             inc vgc_literal_cnt
6F08 2618             (./engine/sound/vg):00376 [3]     !       bne end_literal
                      (./engine/sound/vg):00377         
6F0A                  (./engine/sound/vg):00378         begin_matches
                      (./engine/sound/vg):00379                 ; literals run completed
                      (./engine/sound/vg):00380                 ; now fetch match offset $ length
                      (./engine/sound/vg):00381         
6F0A                  (./engine/sound/vg):00382         fetchByte3
                      (./engine/sound/vg):00383                 ; get match offset LO
                      (./engine/sound/vg):00384                 ; plain LZ4 byte fetch
6F0A E6C0             (./engine/sound/vg):00385 [4+2]           ldb   ,u+
                      (./engine/sound/vg):00386         
                      (./engine/sound/vg):00387                 ; set buffer read ptr
6F0C F76F13           (./engine/sound/vg):00388 [5]             stb   stashS+1 ; **SELF MODIFICATION**
6F0F B66ED9           (./engine/sound/vg):00389 [5]             lda   lz_window_dst+1 ; *** SELF MODIFYING CODE ***
                      (./engine/sound/vg):00390                 ;orcc  #1
6F12                  (./engine/sound/vg):00391         stashS
6F12 8000             (./engine/sound/vg):00392 [2]             suba  #0 ; **SELFMODIFIED**
                      (./engine/sound/vg):00393                 ;inca
6F14 B76F31           (./engine/sound/vg):00394 [5]             sta   lz_window_src+1 ; *** SELF MODIFYING CODE ***
                      (./engine/sound/vg):00395         
                      (./engine/sound/vg):00396                 ; fetch match length
6F17 F66CFA           (./engine/sound/vg):00397 [5]             ldb   vgc_match_cnt+1
6F1A BD6EDE           (./engine/sound/vg):00398 [8]             jsr   lz_fetch_count
                      (./engine/sound/vg):00399                 ; match length is always+4 (0=4)
                      (./engine/sound/vg):00400                 ; cant do this before because we need to detect 15
6F1D 3004             (./engine/sound/vg):00401 [4+1]           leax  4,x
6F1F BF6CF9           (./engine/sound/vg):00402 [6]             stx   vgc_match_cnt
                      (./engine/sound/vg):00403         
6F22                  (./engine/sound/vg):00404         end_literal
6F22                  (./engine/sound/vg):00405         stashB
6F22 C600             (./engine/sound/vg):00406 [2]             ldb   #0 ;**SELFMODIFIED - See above**
6F24 39               (./engine/sound/vg):00407 [5]             rts
                      (./engine/sound/vg):00408         
                      (./engine/sound/vg):00409         ; try fetching a matched byte from the stream
6F25                  (./engine/sound/vg):00410         try_match
6F25 B66CF9           (./engine/sound/vg):00411 [5]             lda   vgc_match_cnt
6F28 2605             (./engine/sound/vg):00412 [3]             bne   is_match
6F2A B66CFA           (./engine/sound/vg):00413 [5]             lda   vgc_match_cnt+1
                      (./engine/sound/vg):00414                 ; all matches done, so get a new token.
6F2D 2715             (./engine/sound/vg):00415 [3]             beq   try_token
                      (./engine/sound/vg):00416         
6F2F                  (./engine/sound/vg):00417         is_match
                      (./engine/sound/vg):00418         ; fetch a byte from the current decode buffer at the current read ptr offset
                      (./engine/sound/vg):00419         ; returns byte in B
6F2F                  (./engine/sound/vg):00420         lz_fetch_buffer
6F2F F61234           (./engine/sound/vg):00421 [5]             ldb   $1234 ; *** SELF MODIFIED ***
6F32 7C6F31           (./engine/sound/vg):00422 [7]             inc   lz_fetch_buffer+2
6F35 BD6ED7           (./engine/sound/vg):00423 [8]             jsr   lz_store_buffer    ; stash in decode buffer
                      (./engine/sound/vg):00424         
                      (./engine/sound/vg):00425                 ; for all matches
                      (./engine/sound/vg):00426                 ; we know match cnt is at least 1
6F38 B66CFA           (./engine/sound/vg):00427 [5]             lda   vgc_match_cnt+1
6F3B 2603             (./engine/sound/vg):00428 [3]             bne   skiphi
6F3D 7A6CF9           (./engine/sound/vg):00429 [7]             dec   vgc_match_cnt
6F40                  (./engine/sound/vg):00430         skiphi
6F40 7A6CFA           (./engine/sound/vg):00431 [7]             dec   vgc_match_cnt+1
                      (./engine/sound/vg):00432         
6F43                  (./engine/sound/vg):00433         end_match
6F43 39               (./engine/sound/vg):00434 [5]             rts
                      (./engine/sound/vg):00435         
                      (./engine/sound/vg):00436         ; then token parser
6F44                  (./engine/sound/vg):00437         try_token
6F44                  (./engine/sound/vg):00438         fetchByte5
                      (./engine/sound/vg):00439                 ; fetch a token
                      (./engine/sound/vg):00440                 ; plain LZ4 byte fetch 
6F44 E6C0             (./engine/sound/vg):00441 [4+2]           ldb   ,u+
                      (./engine/sound/vg):00442         
                      (./engine/sound/vg):00443                 ; unpack match length from token (bottom 4 bits)
6F46 8600             (./engine/sound/vg):00444 [2]             lda   #0
6F48 C40F             (./engine/sound/vg):00445 [2]             andb  #$0f
6F4A FD6CF9           (./engine/sound/vg):00446 [6]             std   vgc_match_cnt
                      (./engine/sound/vg):00447         
                      (./engine/sound/vg):00448                 ; unpack literal length from token (top 4 bits)
6F4D E65F             (./engine/sound/vg):00449 [4+1]           ldb   -1,u
6F4F 54               (./engine/sound/vg):00450 [2]             lsrb
6F50 54               (./engine/sound/vg):00451 [2]             lsrb
6F51 54               (./engine/sound/vg):00452 [2]             lsrb
6F52 54               (./engine/sound/vg):00453 [2]             lsrb
                      (./engine/sound/vg):00454         
                      (./engine/sound/vg):00455                 ; fetch literal extended length, passing in B
6F53 BD6EDE           (./engine/sound/vg):00456 [8]             jsr   lz_fetch_count
6F56 BF6CF7           (./engine/sound/vg):00457 [6]             stx   vgc_literal_cnt
                      (./engine/sound/vg):00458                 
                      (./engine/sound/vg):00459                 ; if no literals, begin the match sequence
                      (./engine/sound/vg):00460                 ; and fetch one match byte
                      (./engine/sound/vg):00461                 ; literal count can be 2 bytes, check both for zero
6F59 2606             (./engine/sound/vg):00462 [3]             bne   has_literals
                      (./engine/sound/vg):00463         
6F5B BD6F0A           (./engine/sound/vg):00464 [8]             jsr   begin_matches
6F5E 7E6F25           (./engine/sound/vg):00465 [4]             jmp   try_match
                      (./engine/sound/vg):00466         
6F61                  (./engine/sound/vg):00467         has_literals
                      (./engine/sound/vg):00468                 ; negate the literals counter so we can increment it rather than decrement it
6F61 FC6CF7           (./engine/sound/vg):00469 [6]             ldd   vgc_literal_cnt
6F64 40               (./engine/sound/vg):00470 [2]             nega
6F65 50               (./engine/sound/vg):00471 [2]             negb
6F66 8200             (./engine/sound/vg):00472 [2]             sbca  #0
6F68 FD6CF7           (./engine/sound/vg):00473 [6]             std   vgc_literal_cnt
                      (./engine/sound/vg):00474         
                      (./engine/sound/vg):00475                 ; ok now go back to literal parser so we can return a byte
                      (./engine/sound/vg):00476                 ; if no literals, logic will fall through to matches
6F6B 7E6EEE           (./engine/sound/vg):00477 [4]             jmp   try_literal
                      (./global/global-t):00024             INCLUDE "./engine/sound/YM2413vgm.asm"
                      (./engine/sound/YM):00001         * ---------------------------------------------------------------------------
                      (./engine/sound/YM):00002         * YM2413VGM 6809 - YM2413 VGM playback system for 6809
                      (./engine/sound/YM):00003         * ---------------------------------------------------------------------------
                      (./engine/sound/YM):00004         * by Bentoc December 2022
                      (./engine/sound/YM):00005         * ---------------------------------------------------------------------------
                      (./engine/sound/YM):00006         
                      (./engine/sound/YM):00007                 opt   c,ct
                      (./engine/sound/YM):00008                 
                      (./engine/sound/YM):00009                         INCLUDE "./engine/sound/ym2413.asm"
                      (./engine/sound/ym):00001                 
                      (./engine/sound/ym):00002                 ; Reset YM2413 sound chip to a default (silent) state
                      (./engine/sound/ym):00003                 ; ----------------------------------------------------
                      (./engine/sound/ym):00004                 
                      (./engine/sound/ym):00005                  IFNDEF ym2413.reset
6F6E                  (./engine/sound/ym):00006                 ym2413.reset
6F6E CC200E           (./engine/sound/ym):00007 [3]     4087            ldd   #$200E
6F71 F7E7FC           (./engine/sound/ym):00008 [5]     4092            stb   YM2413.A
6F74 12               (./engine/sound/ym):00009 [2]     4094            nop                            ; (wait of 2 cycles)
6F75 C600             (./engine/sound/ym):00010 [2]     4096            ldb   #0                       ; (wait of 2 cycles)
6F77 B7E7FD           (./engine/sound/ym):00011 [5]     4101            sta   YM2413.D                ; note off for all drums     
6F7A 8620             (./engine/sound/ym):00012 [2]     4103            lda   #$20                     ; (wait of 2 cycles)
6F7C 21FE             (./engine/sound/ym):00013 [3]     4106            brn   *                        ; (wait of 3 cycles)
6F7E 1E89             (./engine/sound/ym):00014 [8]     4114    @c      exg   a,b                      ; (wait of 8 cycles)                                      
6F80 1E89             (./engine/sound/ym):00015 [8]     4122            exg   a,b                      ; (wait of 8 cycles)                                      
6F82 B7E7FC           (./engine/sound/ym):00016 [5]     4127            sta   YM2413.A
6F85 12               (./engine/sound/ym):00017 [2]     4129            nop
6F86 4C               (./engine/sound/ym):00018 [2]     4131            inca
6F87 F7E7FD           (./engine/sound/ym):00019 [5]     4136            stb   YM2413.D
6F8A 8129             (./engine/sound/ym):00020 [2]     4138            cmpa  #$29                     ; (wait of 2 cycles)
6F8C 26F0             (./engine/sound/ym):00021 [3]     4141            bne   @c                       ; (wait of 3 cycles)
6F8E 39               (./engine/sound/ym):00022 [5]     4146            rts  
                      (./engine/sound/ym):00023                  ENDC
                      (./engine/sound/YM):00010                 
     6F8F             (./engine/sound/YM):00011                 YVGM_addr equ *
                      (./engine/sound/YM):00012                 
6F8F 00               (./engine/sound/YM):00013                 YVGM_MusicPage       fcb   0                ; memory page of music data
6F90 0000             (./engine/sound/YM):00014                 YVGM_MusicData       fdb   0                ; address of song data
6F92 0000             (./engine/sound/YM):00015                 YVGM_MusicDataPos    fdb   0                ; current playing position in Music Data
6F94 00               (./engine/sound/YM):00016                 YVGM_MusicStatus     fcb   0                ; 0 : stop playing, 1-255 : play music
6F95 00               (./engine/sound/YM):00017                 YVGM_WaitFrame       fcb   0                ; number of frames to wait before next play
6F96 00               (./engine/sound/YM):00018                 YVGM_loop            fcb   0                ; 0=no loop
6F97 0000             (./engine/sound/YM):00019                 YVGM_callback        fdb   0                ; 0=no calback routine
                      (./engine/sound/YM):00020                 
                      (./engine/sound/YM):00021                 ******************************************************************************
                      (./engine/sound/YM):00022                 * PlayMusic - Load a new music and init all tracks
                      (./engine/sound/YM):00023                 *
                      (./engine/sound/YM):00024                 * receives in X the address of the song
                      (./engine/sound/YM):00025                 * destroys X,A
                      (./engine/sound/YM):00026                 ******************************************************************************
                      (./engine/sound/YM):00027                 
6F99                  (./engine/sound/YM):00028                 YVGM_PlayMusic
6F99 BD6C53           (./engine/sound/YM):00029 [8]     4154            jsr   IrqPause
6F9C F76F96           (./engine/sound/YM):00030 [5]     4159            stb   YVGM_loop
6F9F 10BF6F97         (./engine/sound/YM):00031 [7]     4166            sty   YVGM_callback
                      (./engine/sound/YM):00032                         _GetCartPageA
                      (    _GetCartPageA):00001                  IFDEF T2
                      (    _GetCartPageA):00002                         jsr   GetCartPageA
                      (    _GetCartPageA):00003                  ELSE
6FA3 B6E7E6           (    _GetCartPageA):00004 [5]     4171            lda   $E7E6
                      (    _GetCartPageA):00005                  ENDC
6FA6 B76FC8           (./engine/sound/YM):00033 [5]     4176            sta   @a
6FA9 A684             (./engine/sound/YM):00034 [4+0]   4180            lda   ,x                       ; get memory page that contains track data
6FAB B76F8F           (./engine/sound/YM):00035 [5]     4185            sta   YVGM_MusicPage
6FAE B76F94           (./engine/sound/YM):00036 [5]     4190            sta   YVGM_MusicStatus
                      (./engine/sound/YM):00037                         _SetCartPageA
                      (    _SetCartPageA):00001                  IFDEF T2
                      (    _SetCartPageA):00002                         jsr   SetCartPageA
                      (    _SetCartPageA):00003                  ELSE
6FB1 B7E7E6           (    _SetCartPageA):00004 [5]     4195            sta   $E7E6                    ; selection de la page RAM en zone cartouche
                      (    _SetCartPageA):00005                  ENDC
6FB4 8601             (./engine/sound/YM):00038 [2]     4197            lda   #1
6FB6 B76F95           (./engine/sound/YM):00039 [5]     4202            sta   YVGM_WaitFrame
6FB9 AE01             (./engine/sound/YM):00040 [5+1]   4208            ldx   1,x                      ; get ptr to track data
6FBB BF6F90           (./engine/sound/YM):00041 [6]     4214            stx   YVGM_MusicData
6FBE CE718F           (./engine/sound/YM):00042 [3]     4217            ldu   #YM2413_buffer
6FC1 FF6F92           (./engine/sound/YM):00043 [6]     4223            stu   YVGM_MusicDataPos
6FC4 BD7044           (./engine/sound/YM):00044 [8]     4231            jsr   ym2413zx0_decompress
6FC7 8600             (./engine/sound/YM):00045 [2]     4233            lda   #0
     6FC8             (./engine/sound/YM):00046                 @a      equ   *-1
                      (./engine/sound/YM):00047                         _SetCartPageA
                      (    _SetCartPageA):00001                  IFDEF T2
                      (    _SetCartPageA):00002                         jsr   SetCartPageA
                      (    _SetCartPageA):00003                  ELSE
6FC9 B7E7E6           (    _SetCartPageA):00004 [5]     4238            sta   $E7E6                    ; selection de la page RAM en zone cartouche
                      (    _SetCartPageA):00005                  ENDC
6FCC BD6F6E           (./engine/sound/YM):00048 [8]     4246            jsr   ym2413.reset
6FCF 7E6C6D           (./engine/sound/YM):00049 [4]     4250            jmp   IrqUnpause
                      (./engine/sound/YM):00050                 
                      (./engine/sound/YM):00051                 ******************************************************************************
                      (./engine/sound/YM):00052                 * MusicFrame - processes a music frame (VInt)
                      (./engine/sound/YM):00053                 *
                      (./engine/sound/YM):00054                 * format:
                      (./engine/sound/YM):00055                 * -------
                      (./engine/sound/YM):00056                 * x00-x38 xnn           : (2 bytes) YM2413 registers
                      (./engine/sound/YM):00057                 * x39                   : (1 byte) end of stream
                      (./engine/sound/YM):00058                 * x40                   : (1 byte) wait 1 frames
                      (./engine/sound/YM):00059                 * ...
                      (./engine/sound/YM):00060                 * xFF                   ; (1 byte) wait 198 frames
                      (./engine/sound/YM):00061                 *
                      (./engine/sound/YM):00062                 ******************************************************************************
                      (./engine/sound/YM):00063                         
6FD2                  (./engine/sound/YM):00064                 YVGM_MusicFrame 
6FD2 B66F94           (./engine/sound/YM):00065 [5]     4255            lda   YVGM_MusicStatus
6FD5 2601             (./engine/sound/YM):00066 [3]     4258            bne   @a
6FD7 39               (./engine/sound/YM):00067 [5]     4263            rts    
6FD8 B66F95           (./engine/sound/YM):00068 [5]     4268    @a      lda   YVGM_WaitFrame
6FDB 4A               (./engine/sound/YM):00069 [2]     4270            deca
6FDC B76F95           (./engine/sound/YM):00070 [5]     4275            sta   YVGM_WaitFrame
6FDF 2701             (./engine/sound/YM):00071 [3]     4278            beq   @UpdateMusic
6FE1 39               (./engine/sound/YM):00072 [5]     4283            rts
6FE2                  (./engine/sound/YM):00073                 @UpdateMusic
6FE2 B66F8F           (./engine/sound/YM):00074 [5]     4288            lda   YVGM_MusicPage
6FE5 2601             (./engine/sound/YM):00075 [3]     4291            bne   @b
6FE7 39               (./engine/sound/YM):00076 [5]     4296            rts                            ; no music to play
6FE8                  (./engine/sound/YM):00077                 @b      _SetCartPageA
                      (    _SetCartPageA):00001                  IFDEF T2
                      (    _SetCartPageA):00002                         jsr   SetCartPageA
                      (    _SetCartPageA):00003                  ELSE
6FE8 B7E7E6           (    _SetCartPageA):00004 [5]     4301            sta   $E7E6                    ; selection de la page RAM en zone cartouche
                      (    _SetCartPageA):00005                  ENDC
6FEB                  (./engine/sound/YM):00078                 YVGM_do_MusicFrame
6FEB BE6F92           (./engine/sound/YM):00079 [6]     4307            ldx   YVGM_MusicDataPos
6FEE                  (./engine/sound/YM):00080                 @UpdateLoop
6FEE A680             (./engine/sound/YM):00081 [4+2]   4313            lda   ,x+
6FF0 8C738F           (./engine/sound/YM):00082 [4]     4317            cmpx  #YM2413_buffer_end
6FF3 2603             (./engine/sound/YM):00083 [3]     4320            bne >
6FF5 8E718F           (./engine/sound/YM):00084 [3]     4323            ldx   #YM2413_buffer
6FF8 8139             (./engine/sound/YM):00085 [2]     4325    !       cmpa  #$39
6FFA 2536             (./engine/sound/YM):00086 [3]     4328            blo   @YM2413
6FFC                  (./engine/sound/YM):00087                 @YVGM_DoWait
6FFC 8039             (./engine/sound/YM):00088 [2]     4330            suba  #$39
6FFE 2709             (./engine/sound/YM):00089 [3]     4333            beq   @DoStopTrack
7000 B76F95           (./engine/sound/YM):00090 [5]     4338            sta   YVGM_WaitFrame
7003 BF6F92           (./engine/sound/YM):00091 [6]     4344            stx   YVGM_MusicDataPos
7006 7E70E4           (./engine/sound/YM):00092 [4]     4348            jmp   ym2413zx0_resume         ; read next frame data
7009                  (./engine/sound/YM):00093                 @DoStopTrack
7009 BE6F97           (./engine/sound/YM):00094 [6]     4354            ldx   YVGM_callback            ; check callback routine
700C 2702             (./engine/sound/YM):00095 [3]     4357            beq   >
700E 6E84             (./engine/sound/YM):00096 [3+0]   4360            jmp   ,x
7010 B66F96           (./engine/sound/YM):00097 [5]     4365    !       lda   YVGM_loop
7013 2714             (./engine/sound/YM):00098 [3]     4368            beq   @no_looping
7015 8603             (./engine/sound/YM):00099 [2]     4370            lda   #3 ; fix ? should be 1 ?
7017 B76F95           (./engine/sound/YM):00100 [5]     4375            sta   YVGM_WaitFrame
701A BE6F90           (./engine/sound/YM):00101 [6]     4381            ldx   YVGM_MusicData
701D CE718F           (./engine/sound/YM):00102 [3]     4384            ldu   #YM2413_buffer
7020 FF6F92           (./engine/sound/YM):00103 [6]     4390            stu   YVGM_MusicDataPos
7023 BD7044           (./engine/sound/YM):00104 [8]     4398            jsr   ym2413zx0_decompress    
7026 7E6FD2           (./engine/sound/YM):00105 [4]     4402            jmp   YVGM_MusicFrame  
7029                  (./engine/sound/YM):00106                 @no_looping
7029 8600             (./engine/sound/YM):00107 [2]     4404            lda   #0
702B B76F94           (./engine/sound/YM):00108 [5]     4409            sta   YVGM_MusicStatus
702E BD6F6E           (./engine/sound/YM):00109 [8]     4417            jsr   ym2413.reset
7031 39               (./engine/sound/YM):00110 [5]     4422            rts
7032                  (./engine/sound/YM):00111                 @YM2413
7032 97FC             (./engine/sound/YM):00112 [4]     4426            sta   <YM2413.A
7034 E680             (./engine/sound/YM):00113 [4+2]   4432            ldb   ,x+
7036 8C738F           (./engine/sound/YM):00114 [4]     4436            cmpx  #YM2413_buffer_end
7039 2603             (./engine/sound/YM):00115 [3]     4439            bne >
703B 8E718F           (./engine/sound/YM):00116 [3]     4442            ldx   #YM2413_buffer
703E D7FD             (./engine/sound/YM):00117 [4]     4446    !       stb   <YM2413.D
7040 12               (./engine/sound/YM):00118 [2]     4448            nop
7041 12               (./engine/sound/YM):00119 [2]     4450            nop                            ; tempo (should be 24 cycles between two register writes)
7042 20AA             (./engine/sound/YM):00120 [3]     4453            bra   @UpdateLoop
                      (./engine/sound/YM):00121                 
                      (./engine/sound/YM):00122                 ; @zx0_6809_mega.asm - ZX0 decompressor for M6809 - 189 bytes
                      (./engine/sound/YM):00123                 ; Written for the LWTOOLS assembler, http://www.lwtools.ca/.
                      (./engine/sound/YM):00124                 ;
                      (./engine/sound/YM):00125                 ; Copyright (c) 2021 Doug Masten
                      (./engine/sound/YM):00126                 ; ZX0 compression (c) 2021 Einar Saukas, https://github.com/einar-saukas/ZX0
                      (./engine/sound/YM):00127                 ;
                      (./engine/sound/YM):00128                 ; This software is provided 'as-is', without any express or implied
                      (./engine/sound/YM):00129                 ; warranty. In no event will the authors be held liable for any damages
                      (./engine/sound/YM):00130                 ; arising from the use of this software.
                      (./engine/sound/YM):00131                 ;
                      (./engine/sound/YM):00132                 ; Permission is granted to anyone to use this software for any purpose,
                      (./engine/sound/YM):00133                 ; including commercial applications, and to alter it and redistribute it
                      (./engine/sound/YM):00134                 ; freely, subject to the following restrictions:
                      (./engine/sound/YM):00135                 ;
                      (./engine/sound/YM):00136                 ; 1. The origin of this software must not be misrepresented; you must not
                      (./engine/sound/YM):00137                 ;    claim that you wrote the original software. If you use this software
                      (./engine/sound/YM):00138                 ;    in a product, an acknowledgment in the product documentation would be
                      (./engine/sound/YM):00139                 ;    appreciated but is not required.
                      (./engine/sound/YM):00140                 ; 2. Altered source versions must be plainly marked as such, and must not be
                      (./engine/sound/YM):00141                 ;    misrepresented as being the original software.
                      (./engine/sound/YM):00142                 ; 3. This notice may not be removed or altered from any source distribution.
                      (./engine/sound/YM):00143                 ;
                      (./engine/sound/YM):00144                 ; ************************************************************************
                      (./engine/sound/YM):00145                 ; ALTERED SOURCE TO BE ABLE TO UNCOMPRESS ON THE FLY WITH A CYCLING BUFFER
                      (./engine/sound/YM):00146                 ; ************************************************************************
                      (./engine/sound/YM):00147                 ;------------------------------------------------------------------------------
                      (./engine/sound/YM):00148                 ; Function    : zx0_decompress
                      (./engine/sound/YM):00149                 ; Entry       : Reg X = start of compressed data
                      (./engine/sound/YM):00150                 ;             : Reg U = start of decompression buffer
                      (./engine/sound/YM):00151                 ; Exit        : Reg X = end of compressed data + 1
                      (./engine/sound/YM):00152                 ;             : Reg U = end of decompression buffer + 1
                      (./engine/sound/YM):00153                 ; Destroys    : Regs D, Y
                      (./engine/sound/YM):00154                 ; Description : Decompress ZX0 data (version 1)
                      (./engine/sound/YM):00155                 ;------------------------------------------------------------------------------
7044                  (./engine/sound/YM):00156                 ym2413zx0_decompress
                      (./engine/sound/YM):00157                 ; initialize variables
7044 10FF70E1         (./engine/sound/YM):00158 [7]     4460                       sts @saveS1
7048 10CE712E         (./engine/sound/YM):00159 [4]     4464                       lds #@stackContext
704C CC80FF           (./engine/sound/YM):00160 [3]     4467                       ldd #$80ff
704F B77109           (./engine/sound/YM):00161 [5]     4472                       sta @zx0_bit         ; init bit stream
7052 1D               (./engine/sound/YM):00162 [2]     4474                       sex                  ; reg A = $FF
7053 FD706A           (./engine/sound/YM):00163 [6]     4480                       std @zx0_offset      ; init offset = -1
                      (./engine/sound/YM):00164                 ; 0 - literal (copy next N bytes from compressed data)
7056 8D42             (./engine/sound/YM):00165 [7]     4487    @ym2413zx0_literals bsr @zx0_elias       ; obtain length
7058 1F02             (./engine/sound/YM):00166 [6]     4493                       tfr d,y              ;  "      "
705A 7F710B           (./engine/sound/YM):00167 [7]     4500                       clr @mode
705D 8D58             (./engine/sound/YM):00168 [7]     4507                       bsr @zx0_copy_bytes  ; copy literals
705F 2520             (./engine/sound/YM):00169 [3]     4510                       bcs @zx0_new_offset  ; branch if next block is new-offset
                      (./engine/sound/YM):00170                 ; 0 - copy from last offset (repeat N bytes from last offset)
7061 8D37             (./engine/sound/YM):00171 [7]     4517                       bsr @zx0_elias       ; obtain length
     7063             (./engine/sound/YM):00172                 @zx0_copy          equ *
7063 BF707D           (./engine/sound/YM):00173 [6]     4523                       stx @saveX           ; save reg X
7066 1F02             (./engine/sound/YM):00174 [6]     4529                       tfr d,y              ; setup length
     706A             (./engine/sound/YM):00175                 @zx0_offset        equ *+2
7068 30C9FFFF         (./engine/sound/YM):00176 [4+4]   4537                       leax >$ffff,u        ; calculate offset address
706C 8C718F           (./engine/sound/YM):00177 [4]     4541                       cmpx #YM2413_buffer  ; this test is a shortcut that need a buffer to be stored
706F 2404             (./engine/sound/YM):00178 [3]     4544                       bhs >                ; at an address >= buffer length
7071 30890200         (./engine/sound/YM):00179 [4+4]   4552                       leax YM2413_buffer_end-YM2413_buffer,x ; cycle buffer
7075 8601             (./engine/sound/YM):00180 [2]     4554    !                  lda #1
7077 B7710B           (./engine/sound/YM):00181 [5]     4559                       sta @mode
707A 8D3F             (./engine/sound/YM):00182 [7]     4566                       bsr @zx0_copy_bytes_b ; copy match
707C 8E0000           (./engine/sound/YM):00183 [3]     4569                       ldx #0               ; restore reg X
     707D             (./engine/sound/YM):00184                 @saveX             equ *-2
707F 24D5             (./engine/sound/YM):00185 [3]     4572                       bcc @ym2413zx0_literals ; branch if next block is literals
                      (./engine/sound/YM):00186                 ; 1 - copy from new offset (repeat N bytes from new offset)
7081 8D17             (./engine/sound/YM):00187 [7]     4579    @zx0_new_offset    bsr @zx0_elias       ; obtain offset MSB
7083 50               (./engine/sound/YM):00188 [2]     4581                       negb                 ; adjust for negative offset (set carry for RORA below)
7084 2730             (./engine/sound/YM):00189 [3]     4584                       beq @zx0_eof         ; eof? (length = 256) if so exit
7086 1F98             (./engine/sound/YM):00190 [6]     4590                       tfr b,a              ; transfer to MSB position
7088 E680             (./engine/sound/YM):00191 [4+2]   4596                       ldb ,x+              ; obtain LSB offset
                      (./engine/sound/YM):00192                                    ;cmpx #YM2413_buffer_end
                      (./engine/sound/YM):00193                                    ;blo >
                      (./engine/sound/YM):00194                                    ;ldx  #YM2413_buffer  ; cycle buffer
708A 46               (./engine/sound/YM):00195 [2]     4598    !                  rora                 ; last offset bit becomes first length bit
708B 56               (./engine/sound/YM):00196 [2]     4600                       rorb                 ;  "     "     "    "      "     "      "
708C FD706A           (./engine/sound/YM):00197 [6]     4606                       std @zx0_offset      ; preserve new offset
708F CC0001           (./engine/sound/YM):00198 [3]     4609                       ldd #1               ; set elias = 1
7092 8D20             (./engine/sound/YM):00199 [7]     4616                       bsr @zx0_elias_bt    ; get length but skip first bit
7094 5C               (./engine/sound/YM):00200 [2]     4618                       incb                 ; Tiny change to save a couple of CPU cycles
7095 26CC             (./engine/sound/YM):00201 [3]     4621                       bne @zx0_copy        
7097 4C               (./engine/sound/YM):00202 [2]     4623                       inca
7098 20C9             (./engine/sound/YM):00203 [3]     4626                       bra @zx0_copy        ; copy new offset match
                      (./engine/sound/YM):00204                 ; interlaced elias gamma coding
709A CC0001           (./engine/sound/YM):00205 [3]     4629    @zx0_elias         ldd #1               ; set elias = 1
709D 2005             (./engine/sound/YM):00206 [3]     4632                       bra @zx0_elias_start ; goto start of elias gamma coding
709F 787109           (./engine/sound/YM):00207 [7]     4639    @zx0_elias_loop    lsl @zx0_bit         ; get next bit
70A2 59               (./engine/sound/YM):00208 [2]     4641                       rolb                 ; rotate elias value
70A3 49               (./engine/sound/YM):00209 [2]     4643                       rola                 ;   "     "     "
70A4 787109           (./engine/sound/YM):00210 [7]     4650    @zx0_elias_start   lsl @zx0_bit         ; get next bit
70A7 260B             (./engine/sound/YM):00211 [3]     4653                       bne @zx0_elias_bt    ; branch if bit stream is not empty
70A9 B770B3           (./engine/sound/YM):00212 [5]     4658                       sta @saveA           ; save reg A
70AC A680             (./engine/sound/YM):00213 [4+2]   4664                       lda ,x+              ; load another 8-bits
                      (./engine/sound/YM):00214                                    ;cmpx #YM2413_buffer_end
                      (./engine/sound/YM):00215                                    ;blo >
                      (./engine/sound/YM):00216                                    ;ldx  #YM2413_buffer  ; cycle buffer
70AE 49               (./engine/sound/YM):00217 [2]     4666    !                  rola                 ; get next bit
70AF B77109           (./engine/sound/YM):00218 [5]     4671                       sta @zx0_bit         ; save bit stream
70B2 8600             (./engine/sound/YM):00219 [2]     4673                       lda #0               ; restore reg A
     70B3             (./engine/sound/YM):00220                 @saveA             equ *-1
                      (./engine/sound/YM):00221                                    endc
70B4 24E9             (./engine/sound/YM):00222 [3]     4676    @zx0_elias_bt      bcc @zx0_elias_loop  ; loop until done
70B6 39               (./engine/sound/YM):00223 [5]     4681    @zx0_eof           rts                  ; return
                      (./engine/sound/YM):00224                 ; copy Y bytes from X to U and get next bit
70B7 E680             (./engine/sound/YM):00225 [4+2]   4687    @zx0_copy_bytes    ldb ,x+              ; copy byte
70B9 200A             (./engine/sound/YM):00226 [3]     4690                       bra >
70BB E680             (./engine/sound/YM):00227 [4+2]   4696    @zx0_copy_bytes_b  ldb ,x+              ; copy byte
70BD 8C738F           (./engine/sound/YM):00228 [4]     4700                       cmpx #YM2413_buffer_end
70C0 2503             (./engine/sound/YM):00229 [3]     4703                       blo >
70C2 8E718F           (./engine/sound/YM):00230 [3]     4706                       ldx  #YM2413_buffer  ; cycle buffer
70C5 E7C0             (./engine/sound/YM):00231 [4+2]   4712    !                  stb ,u+              ;  "    "
70C7 1183738F         (./engine/sound/YM):00232 [5]     4717                       cmpu #YM2413_buffer_end
70CB 2603             (./engine/sound/YM):00233 [3]     4720                       bne >
70CD CE718F           (./engine/sound/YM):00234 [3]     4723                       ldu #YM2413_buffer
                      (./engine/sound/YM):00235                 ; loop until a wait byte is found, this will unpack a whole sound frame
70D0 7D710A           (./engine/sound/YM):00236 [7]     4730    !                  tst @flip            ; handle 2 bytes cmd length
70D3 261C             (./engine/sound/YM):00237 [3]     4733                       bne @nextByte
70D5 C139             (./engine/sound/YM):00238 [2]     4735                       cmpb #$39
70D7 2518             (./engine/sound/YM):00239 [3]     4738                       blo @nextByte        ; continue if a ym2413 cmd byte
                      (./engine/sound/YM):00240                 ; save context for next byte ... and exit
70D9 3476             (./engine/sound/YM):00241 [5+8]   4751                       pshs d,x,y,u
70DB 10FF710C         (./engine/sound/YM):00242 [7]     4758                       sts @stackContextPos
70DF 10CE0000         (./engine/sound/YM):00243 [4]     4762                       lds #0
     70E1             (./engine/sound/YM):00244                 @saveS1            equ *-2
70E3 39               (./engine/sound/YM):00245 [5]     4767                       rts
                      (./engine/sound/YM):00246                 ; next call will resume here ...
70E4 73710A           (./engine/sound/YM):00247 [7]     4774    ym2413zx0_resume   com @flip
70E7 10FF70E1         (./engine/sound/YM):00248 [7]     4781                       sts @saveS1
70EB 10FE710C         (./engine/sound/YM):00249 [7]     4788                       lds @stackContextPos
70EF 3576             (./engine/sound/YM):00250 [5+8]   4801                       puls d,x,y,u
70F1 73710A           (./engine/sound/YM):00251 [7]     4808    @nextByte          com @flip
70F4 7D710B           (./engine/sound/YM):00252 [7]     4815                       tst @mode
70F7 2608             (./engine/sound/YM):00253 [3]     4818                       bne >
70F9 313F             (./engine/sound/YM):00254 [4+1]   4823                       leay -1,y            ; decrement loop counter
70FB 26BA             (./engine/sound/YM):00255 [3]     4826                       bne @zx0_copy_bytes  ; loop until done
70FD 787109           (./engine/sound/YM):00256 [7]     4833                       lsl @zx0_bit         ; get next bit
7100 39               (./engine/sound/YM):00257 [5]     4838                       rts
7101 313F             (./engine/sound/YM):00258 [4+1]   4843    !                  leay -1,y            ; decrement loop counter
7103 26B6             (./engine/sound/YM):00259 [3]     4846                       bne @zx0_copy_bytes_b ; loop until done
7105 787109           (./engine/sound/YM):00260 [7]     4853                       lsl @zx0_bit         ; get next bit
7108 39               (./engine/sound/YM):00261 [5]     4858                       rts
7109 80               (./engine/sound/YM):00262                 @zx0_bit  fcb $80
710A 00               (./engine/sound/YM):00263                 @flip     fcb 0
710B 00               (./engine/sound/YM):00264                 @mode     fcb 0
710C 0000             (./engine/sound/YM):00265                 @stackContextPos fdb 0
710E 0000000000000000 (./engine/sound/YM):00266                           fill 0,32
     0000000000000000
     0000000000000000
     0000000000000000
     712E             (./engine/sound/YM):00267                 @stackContext equ *
                      (./engine/sound/YM):00268                 
     0200             (./engine/sound/YM):00269                 @buffersize equ 512
     712E             (./engine/sound/YM):00270                 @addr equ *
                      (./engine/sound/YM):00271                  iflt @addr-YVGM_addr-@buffersize 
712E 0000000000000000 (./engine/sound/YM):00272                           fill 0,@buffersize-(@addr-YVGM_addr) ; buffer need to be stored at an address >= buffersize
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     00
                      (./engine/sound/YM):00273                  endc
718F                  (./engine/sound/YM):00274                 YM2413_buffer
718F 0000000000000000 (./engine/sound/YM):00275                           fill 0,@buffersize
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
738F                  (./engine/sound/YM):00276                 YM2413_buffer_end
                      (./global/global-t):00025                 
                      (./global/global-t):00026                     ; reserve space for the vgm decode buffers (8x256 = 2Kb)
738F 0000000000000000 (./global/global-t):00027                         ALIGN 256
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     00
7400                  (./global/global-t):00028                 vgc_stream_buffers
7400 0000000000000000 (./global/global-t):00029                         fill 0,256
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
7500 0000000000000000 (./global/global-t):00030                         fill 0,256
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
7600 0000000000000000 (./global/global-t):00031                         fill 0,256
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
7700 0000000000000000 (./global/global-t):00032                         fill 0,256
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
7800 0000000000000000 (./global/global-t):00033                         fill 0,256
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
7900 0000000000000000 (./global/global-t):00034                         fill 0,256
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
7A00 0000000000000000 (./global/global-t):00035                         fill 0,256
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
7B00 0000000000000000 (./global/global-t):00036                         fill 0,256
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
                      (/home/robin/githu):00163                         
                      (/home/robin/githu):00164                         INCLUDE "./generated-code/scrollscreen/BuilderMainGenCode.asm"
                      (./generated-code/):00001                 * Generated Code
                      (./generated-code/):00002                 
7C00                  (./generated-code/):00003                 Palette_scrollscreen
7C00 0000             (./generated-code/):00004                         fdb   $0000
7C02 0F00             (./generated-code/):00005                         fdb   $0f00
7C04 FF0F             (./generated-code/):00006                         fdb   $ff0f
7C06 0002             (./generated-code/):00007                         fdb   $0002
7C08 FF00             (./generated-code/):00008                         fdb   $ff00
7C0A F20F             (./generated-code/):00009                         fdb   $f20f
7C0C 000F             (./generated-code/):00010                         fdb   $000f
7C0E 2000             (./generated-code/):00011                         fdb   $2000
7C10 F000             (./generated-code/):00012                         fdb   $f000
7C12 0300             (./generated-code/):00013                         fdb   $0300
7C14 2E00             (./generated-code/):00014                         fdb   $2e00
7C16 EE02             (./generated-code/):00015                         fdb   $ee02
7C18 E002             (./generated-code/):00016                         fdb   $e002
7C1A 2202             (./generated-code/):00017                         fdb   $2202
7C1C 020E             (./generated-code/):00018                         fdb   $020e
7C1E 200C             (./generated-code/):00019                         fdb   $200c
                      (./generated-code/):00020                 
7C20                  (./generated-code/):00021                 Obj_Index_Page
7C20 00               (./generated-code/):00022                         fcb   $00
7C21 64               (./generated-code/):00023                         fcb   $64
7C22 65               (./generated-code/):00024                         fcb   $65
7C23                  (./generated-code/):00025                 Obj_Index_Address
7C23 0000             (./generated-code/):00026                         fcb   $00,$00
7C25 01E5             (./generated-code/):00027                         fcb   $01,$E5
7C27 0000             (./generated-code/):00028                         fcb   $00,$00
7C29                  (./generated-code/):00029                 Img_Page_Index
7C29 00               (./generated-code/):00030                         fcb   $00
7C2A 60               (./generated-code/):00031                         fcb   $60
7C2B 60               (./generated-code/):00032                         fcb   $60
7C2C                  (./generated-code/):00033                 Ani_Page_Index
7C2C 00               (./generated-code/):00034                         fcb   $00
7C2D 60               (./generated-code/):00035                         fcb   $60
7C2E 60               (./generated-code/):00036                         fcb   $60
7C2F                  (./generated-code/):00037                 Ani_Asd_Index
7C2F 0000             (./generated-code/):00038                         fdb   $0000
7C31 0000             (./generated-code/):00039                         fdb   $0000
7C33 0000             (./generated-code/):00040                         fdb   $0000
7C35                  (./generated-code/):00041                 LoadAct
7C35 39               (./generated-code/):00042 [5]     4863            rts
