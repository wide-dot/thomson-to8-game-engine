                      (/home/sam/thomson):00001                 INCLUDE "./generated-code/Game.glb"
                      (./generated-code/):00001         * Generated Code
                      (./generated-code/):00002         
     0112             (./generated-code/):00003         Build_RAMLoaderManager equ $0112
     0000             (./generated-code/):00004         GmID_scrollscreen equ 0
     0000             (./generated-code/):00005         gmboot equ 0
     0100             (./generated-code/):00006         Build_BootLastBlock equ $0100
                      (/home/sam/thomson):00002         
                      (/home/sam/thomson):00003         ********************************************************************************
                      (/home/sam/thomson):00004         * Boot loader T.2 - Benoit Rousseau 26/04/2021
                      (/home/sam/thomson):00005         * ------------------------------------------------------------------------------
                      (/home/sam/thomson):00006         * 
                      (/home/sam/thomson):00007         * Description
                      (/home/sam/thomson):00008         * -----------
                      (/home/sam/thomson):00009         * Animation de la palette: fondu vers une couleur cible PAL_TO
                      (/home/sam/thomson):00010         * Initialisation de la commutation de page pour l'espace Donnees (Mode registre)
                      (/home/sam/thomson):00011         * Appel du Game Mode Engine
                      (/home/sam/thomson):00012         *
                      (/home/sam/thomson):00013         ********************************************************************************
                      (/home/sam/thomson):00014         
                      (/home/sam/thomson):00015                 INCLUDE "./engine/constants.asm"
                      (./engine/constant):00001         * ---------------------------------------------------------------------------
                      (./engine/constant):00002         * Constants
                      (./engine/constant):00003         *
                      (./engine/constant):00004         * Naming convention
                      (./engine/constant):00005         * -----------------
                      (./engine/constant):00006         * - lower case
                      (./engine/constant):00007         * - underscore-separated names
                      (./engine/constant):00008         *
                      (./engine/constant):00009         * ---------------------------------------------------------------------------
                      (./engine/constant):00010         
                      (./engine/constant):00011          ifndef CONSTANTS_ASM
     0001             (./engine/constant):00012         CONSTANTS_ASM equ 1
                      (./engine/constant):00013         
                      (./engine/constant):00014         * ===========================================================================
                      (./engine/constant):00015         * TO8 Registers
                      (./engine/constant):00016         * ===========================================================================
                      (./engine/constant):00017         
                      (./engine/constant):00018         ; Disk routine registers (ROM)
                      (./engine/constant):00019         
     6049             (./engine/constant):00020         dk_drive                      equ $6049
     604A             (./engine/constant):00021         dk_track                      equ $604A
     604B             (./engine/constant):00022         dk_track_lsb                  equ $604B
     604C             (./engine/constant):00023         dk_sector                     equ $604C
     604F             (./engine/constant):00024         dk_write_location             equ $604F
                      (./engine/constant):00025         
                      (./engine/constant):00026         * ===========================================================================
                      (./engine/constant):00027         * Globals
                      (./engine/constant):00028         * ===========================================================================
                      (./engine/constant):00029         
                      (./engine/constant):00030         ; WARNING - BuildSprite allow to cross $A000 limit by glb_camera_x_offset/4
                      (./engine/constant):00031         ; Graphics routines using S to write may cross by 12 bytes
                      (./engine/constant):00032         ; be sure to compile with enough margin here
     9FF4             (./engine/constant):00033         glb_ram_end                   equ $A000-12
                      (./engine/constant):00034         
                      (./engine/constant):00035         ; compilated sprite
     9FF2             (./engine/constant):00036         glb_register_s                equ glb_ram_end-2             ; reverved space to store S from ROM routines
                      (./engine/constant):00037         
                      (./engine/constant):00038         ; DrawSprites
     9FF0             (./engine/constant):00039         glb_screen_location_1         equ glb_register_s-2          ; start address for rendering of current sprite Part1     
     9FEE             (./engine/constant):00040         glb_screen_location_2         equ glb_screen_location_1-2   ; start address for rendering of current sprite Part2 (DEPENDENCY Must follow Part1)
                      (./engine/constant):00041         
     9FEC             (./engine/constant):00042         glb_camera_height             equ glb_screen_location_2-2
     9FEA             (./engine/constant):00043         glb_camera_width              equ glb_camera_height-2
     9FE8             (./engine/constant):00044         glb_camera_x_pos_coarse       equ glb_camera_width-2        ; ((glb_camera_x_pos - 64) / 64) * 64
     9FE6             (./engine/constant):00045         glb_camera_x_pos              equ glb_camera_x_pos_coarse-2 ; 16.8 camera x position in palyfield coordinates
     9FE5             (./engine/constant):00046         glb_camera_x_sub              equ glb_camera_x_pos-1        ; 
     9FE4             (./engine/constant):00047         glb_camera_y_pos              equ glb_camera_x_pos-2        ; 16.8 camera y position in palyfield coordinates
     9FE3             (./engine/constant):00048         glb_camera_y_sub              equ glb_camera_y_pos-1        ;
     9FE2             (./engine/constant):00049         glb_camera_x_min_pos          equ glb_camera_y_pos-2
     9FE0             (./engine/constant):00050         glb_camera_y_min_pos          equ glb_camera_x_min_pos-2
     9FDE             (./engine/constant):00051         glb_camera_x_max_pos          equ glb_camera_y_min_pos-2
     9FDC             (./engine/constant):00052         glb_camera_y_max_pos          equ glb_camera_x_max_pos-2
     9FDA             (./engine/constant):00053         glb_camera_x_offset           equ glb_camera_y_max_pos-2
     9FD8             (./engine/constant):00054         glb_camera_y_offset           equ glb_camera_x_offset-2
     9FD7             (./engine/constant):00055         glb_force_sprite_refresh      equ glb_camera_y_offset-1
     9FD6             (./engine/constant):00056         glb_camera_move               equ glb_force_sprite_refresh-1
     9FD5             (./engine/constant):00057         glb_alphaTiles                equ glb_camera_move-1
     9FD4             (./engine/constant):00058         glb_timer_second              equ glb_alphaTiles-1
     9FD3             (./engine/constant):00059         glb_timer_minute              equ glb_timer_second-1
     9FD3             (./engine/constant):00060         glb_timer                     equ glb_timer_minute
     9FD2             (./engine/constant):00061         glb_timer_frame               equ glb_timer-1
                      (./engine/constant):00062         
                      (./engine/constant):00063         ; BankSwitch
     9FD1             (./engine/constant):00064         glb_Page                      equ glb_timer_frame-1
     9FB3             (./engine/constant):00065         dp_engine                     equ glb_Page-30  ; engine routines tmp var space
     9F97             (./engine/constant):00066         dp_extreg                     equ dp_engine-28 ; extra register space (user and engine common)
     9F00             (./engine/constant):00067         dp                            equ $9F00        ; user space (149 bytes max)
     9F00             (./engine/constant):00068         glb_system_stack              equ dp
                      (./engine/constant):00069         
                      (./engine/constant):00070         ; generic direct page extra registers
                      (./engine/constant):00071         ; -----------------------------------
     9F97             (./engine/constant):00072         glb_d0   equ   dp_extreg
     9F98             (./engine/constant):00073         glb_d0_b equ   dp_extreg+1
                      (./engine/constant):00074         ; must be a free byte here for 24bits computation
     9F9A             (./engine/constant):00075         glb_d1   equ   dp_extreg+3
     9F9B             (./engine/constant):00076         glb_d1_b equ   dp_extreg+4
                      (./engine/constant):00077         ; must be a free byte here for 24bits computation
     9F9D             (./engine/constant):00078         glb_d2   equ   dp_extreg+6
     9F9E             (./engine/constant):00079         glb_d2_b equ   dp_extreg+7
                      (./engine/constant):00080         ; must be a free byte here for 24bits computation
     9FA0             (./engine/constant):00081         glb_d3   equ   dp_extreg+9
     9FA1             (./engine/constant):00082         glb_d3_b equ   dp_extreg+10
                      (./engine/constant):00083         ; must be a free byte here for 24bits computation
     9FA3             (./engine/constant):00084         glb_d4   equ   dp_extreg+12
     9FA4             (./engine/constant):00085         glb_d4_b equ   dp_extreg+13
     9FA5             (./engine/constant):00086         glb_d5   equ   dp_extreg+14
     9FA6             (./engine/constant):00087         glb_d5_b equ   dp_extreg+15
     9FA7             (./engine/constant):00088         glb_d6   equ   dp_extreg+16
     9FA8             (./engine/constant):00089         glb_d6_b equ   dp_extreg+17
     9FA9             (./engine/constant):00090         glb_a0   equ   dp_extreg+18
     9FAA             (./engine/constant):00091         glb_a0_b equ   dp_extreg+19
     9FAB             (./engine/constant):00092         glb_a1   equ   dp_extreg+20
     9FAC             (./engine/constant):00093         glb_a1_b equ   dp_extreg+21
     9FAD             (./engine/constant):00094         glb_a2   equ   dp_extreg+22
     9FAE             (./engine/constant):00095         glb_a2_b equ   dp_extreg+23
     9FAF             (./engine/constant):00096         glb_a3   equ   dp_extreg+24
     9FB0             (./engine/constant):00097         glb_a3_b equ   dp_extreg+25
     9FB1             (./engine/constant):00098         glb_a4   equ   dp_extreg+26
     9FB2             (./engine/constant):00099         glb_a4_b equ   dp_extreg+27
                      (./engine/constant):00100         
                      (./engine/constant):00101         * ===========================================================================
                      (./engine/constant):00102         * Display Constants
                      (./engine/constant):00103         * ===========================================================================
                      (./engine/constant):00104         
     00A0             (./engine/constant):00105         screen_width                  equ 160             ; in pixel
     00C8             (./engine/constant):00106         screen_height                 equ 200             ; in pixel
     001C             (./engine/constant):00107         screen_top                    equ (256-200)/2     ; in pixel
     00E3             (./engine/constant):00108         screen_bottom                 equ screen_top+199  ; in pixel
     0030             (./engine/constant):00109         screen_left                   equ (256-160)/2     ; in pixel
     00CF             (./engine/constant):00110         screen_right                  equ screen_left+159 ; in pixel
     0008             (./engine/constant):00111         nb_priority_levels            equ 8               ; number of priority levels (need code change if modified)
                      (./engine/constant):00112         
                      (./engine/constant):00113         * ===========================================================================
                      (./engine/constant):00114         * Images Constants
                      (./engine/constant):00115         * ===========================================================================
                      (./engine/constant):00116         
     0004             (./engine/constant):00117         image_x_size                  equ 4
     0005             (./engine/constant):00118         image_y_size                  equ 5
     0006             (./engine/constant):00119         image_center_offset           equ 6
                      (./engine/constant):00120         
     0004             (./engine/constant):00121         image_subset_x1_offset        equ 4
     0005             (./engine/constant):00122         image_subset_y1_offset        equ 5
                      (./engine/constant):00123         
     0000             (./engine/constant):00124         page_draw_routine             equ 0
     0001             (./engine/constant):00125         draw_routine                  equ 1
     0003             (./engine/constant):00126         page_erase_routine            equ 3
     0004             (./engine/constant):00127         erase_routine                 equ 4
     0006             (./engine/constant):00128         erase_nb_cell                 equ 6
                      (./engine/constant):00129         
                      (./engine/constant):00130         * ===========================================================================
                      (./engine/constant):00131         * Sound Constants
                      (./engine/constant):00132         * ===========================================================================
                      (./engine/constant):00133         
     0000             (./engine/constant):00134         sound_page        equ 0
     0001             (./engine/constant):00135         sound_start_addr  equ 1
     0003             (./engine/constant):00136         sound_end_addr    equ 3
     0005             (./engine/constant):00137         sound_meta_size   equ 5
                      (./engine/constant):00138         
                      (./engine/constant):00139         * ===========================================================================
                      (./engine/constant):00140         * Object Constants
                      (./engine/constant):00141         * ===========================================================================
                      (./engine/constant):00142         
                      (./engine/constant):00143         ; ext_variables_size should be declared in game source code
                      (./engine/constant):00144         
     0026             (./engine/constant):00145         object_base_size              equ 38  ; the size of an object without rsvd and ext_vars
                      (./engine/constant):00146          ifndef OverlayMode
     003B             (./engine/constant):00147         object_rsvd_size              equ 59
                      (./engine/constant):00148          else
0000                  (./engine/constant):00149         object_rsvd_size              equ 5
                      (./engine/constant):00150          endc
                      (./engine/constant):00151         
     ????             (./engine/constant):00152         object_rsvd                   equ object_base_size+ext_variables_size
     ????             (./engine/constant):00153         object_size                   equ object_base_size+ext_variables_size+object_rsvd_size ; the size of a dynamic object
     ????             (./engine/constant):00154         next_object                   equ object_size
     0026             (./engine/constant):00155         ext_variables                 equ object_base_size ; start of reserved space for additionnal variables
                      (./engine/constant):00156         
     0000             (./engine/constant):00157         id                            equ 0   ; reference to object model id (ObjID_) (0: free slot)
     0001             (./engine/constant):00158         subtype                       equ 1   ; reference to object subtype (Sub_) DEPENDENCY subtype must follow id
     0001             (./engine/constant):00159         subtype_w                     equ 1   ; reference to object subtype (Sub_) takes 2 bytes and overlap render_flags DEPENDENCY subtype must follow id
     0002             (./engine/constant):00160         render_flags                  equ 2
     0003             (./engine/constant):00161         run_object_prev               equ 3   ; previous object to update when deleting current object
     0005             (./engine/constant):00162         run_object_next               equ 5   ; next object to run by RunObjects
                      (./engine/constant):00163         
                      (./engine/constant):00164          ifndef OverlayMode
                      (./engine/constant):00165         * --- render_flags bitfield variables --- background erase pack
     0001             (./engine/constant):00166         render_xmirror_mask           equ $01 ; (bit 0) DEPENDENCY should be bit 0 - tell display engine to mirror sprite on horizontal axis
     0002             (./engine/constant):00167         render_ymirror_mask           equ $02 ; (bit 1) DEPENDENCY should be bit 1 - tell display engine to mirror sprite on vertical axis
     0004             (./engine/constant):00168         render_overlay_mask           equ $04 ; (bit 2) DEPENDENCY should be bit 2 - compilated sprite with no background save
     0008             (./engine/constant):00169         render_playfieldcoord_mask    equ $08 ; (bit 3) tell display engine to use playfield (1) or screen (0) coordinates
     0010             (./engine/constant):00170         render_xloop_mask             equ $10 ; (bit 4) (in screen coordinate) tell display engine to hide sprite when x is out of screen (0) or to display (1)  
     0020             (./engine/constant):00171         render_todelete_mask          equ $20 ; (bit 5) tell display engine to delete sprite and clear OST for this object
     0040             (./engine/constant):00172         render_subobjects_mask        equ $40 ; (bit 6) tell display engine to render subobjects for this object
     0080             (./engine/constant):00173         render_hide_mask              equ $80 ; (bit 7) tell display engine to hide sprite (keep priority and mapping_frame)
                      (./engine/constant):00174          else
                      (./engine/constant):00175         ; --- render_flags bitfield variables --- overlay pack
0000                  (./engine/constant):00176         render_xmirror_mask           equ $01 ; (bit 0) DEPENDENCY should be bit 0 - tell display engine to mirror sprite on horizontal axis
0000                  (./engine/constant):00177         render_ymirror_mask           equ $02 ; (bit 1) DEPENDENCY should be bit 1 - tell display engine to mirror sprite on vertical axis
                      (./engine/constant):00178         
0000                  (./engine/constant):00179         render_playfieldcoord_mask    equ $08 ; (bit 3) tell display engine to use playfield (1) or screen (0) coordinates
0000                  (./engine/constant):00180         render_xloop_mask             equ $10 ; (bit 4) (in screen coordinate) tell display engine to hide sprite when x is out of screen (0) or to display (1)  
0000                  (./engine/constant):00181         render_no_range_ctrl_mask     equ $20 ; (bit 5) tell display engine to skip out of range controls (this may lead to memory corruption BEWARE)
0000                  (./engine/constant):00182         render_subobjects_mask        equ $40 ; (bit 6) tell display engine to render subobjects for this object
0000                  (./engine/constant):00183         render_hide_mask              equ $80 ; (bit 7) tell display engine to hide sprite (keep priority and mapping_frame)
                      (./engine/constant):00184          endc
                      (./engine/constant):00185         
     0007             (./engine/constant):00186         priority                      equ 7           ; display priority (0: nothing to display, 1:front, ..., 8:back)
     0008             (./engine/constant):00187         anim                          equ 8  ; and 9  ; reference to current animation (Ani_)
     000A             (./engine/constant):00188         prev_anim                     equ 10 ; and 11 ; reference to previous animation (Ani_)
     000A             (./engine/constant):00189         sub_anim                      equ 10 ; and 11 ; reference to sub animation
     000C             (./engine/constant):00190         anim_frame                    equ 12          ; index of current frame in animation
     000D             (./engine/constant):00191         anim_frame_duration           equ 13          ; number of frames for each image in animation, range: 00-7F (0-127), 0 means display only during one frame
     000E             (./engine/constant):00192         anim_flags                    equ 14          ; byte offset to reference an anim_flags LUT (adv) / store a link flag (non adv)
                      (./engine/constant):00193         
                      (./engine/constant):00194         * --- anim_flags bitfield variables ---
     0001             (./engine/constant):00195         anim_link_mask                equ $01 ; (bit 0) if set, allow the load of a new animation without reseting anim_frame and anim_frame_duration
                      (./engine/constant):00196         
     000E             (./engine/constant):00197         status_flags                  equ 14          ; orientation of sprite, is applied to animation xmirror flag during AnimateSprite
                      (./engine/constant):00198         
                      (./engine/constant):00199         * --- status_flags bitfield variables ---
     0001             (./engine/constant):00200         status_xflip_mask             equ $01 ; (bit 0) X Flip
     0002             (./engine/constant):00201         status_yflip_mask             equ $02 ; (bit 1) Y Flip
                      (./engine/constant):00202         
     0010             (./engine/constant):00203         image_set                     equ 16 ; and 17 ; reference to current image (Img_) (0000 if no image)
     0012             (./engine/constant):00204         x_pos                         equ 18 ; and 19 ; x playfield coordinate
     0014             (./engine/constant):00205         x_sub                         equ 20          ; x subpixel (1/256 of a pixel), must follow x_pos in data structure
     0015             (./engine/constant):00206         y_pos                         equ 21 ; and 22 ; y playfield coordinate
     0017             (./engine/constant):00207         y_sub                         equ 23          ; y subpixel (1/256 of a pixel), must follow y_pos in data structure
     0018             (./engine/constant):00208         xy_pixel                      equ 24          ; x and y screen coordinate
     0018             (./engine/constant):00209         x_pixel                       equ 24          ; x screen coordinate
     0019             (./engine/constant):00210         y_pixel                       equ 25          ; y screen coordinate, must follow x_pixel
     001A             (./engine/constant):00211         x_vel                         equ 26 ; and 27 ; s8.8 horizontal velocity
     001C             (./engine/constant):00212         y_vel                         equ 28 ; and 29 ; s8.8 vertical velocity
     001E             (./engine/constant):00213         x_acl                         equ 30 ; and 31 ; s8.8 horizontal gravity
     0020             (./engine/constant):00214         y_acl                         equ 32 ; and 33 ; s8.8 vertical gravity
     0022             (./engine/constant):00215         routine                       equ 34          ; index of current object routine
     0023             (./engine/constant):00216         routine_secondary             equ 35          ; index of current secondary routine
     0024             (./engine/constant):00217         routine_tertiary              equ 36          ; index of current tertiary routine
     0025             (./engine/constant):00218         routine_quaternary            equ 37          ; index of current quaternary routine
                      (./engine/constant):00219         
                      (./engine/constant):00220          ifndef OverlayMode
                      (./engine/constant):00221         * ---------------------------------------------------------------------------
                      (./engine/constant):00222         * reserved variables (read/write by engine)
                      (./engine/constant):00223         
     ????             (./engine/constant):00224         rsv_render_flags              equ object_rsvd
                      (./engine/constant):00225         
                      (./engine/constant):00226         * --- rsv_render_flags bitfield variables ---
     0001             (./engine/constant):00227         rsv_render_checkrefresh_mask  equ $01 ; (bit 0) if erasesprite and display sprite flag are processed for this frame
     0002             (./engine/constant):00228         rsv_render_erasesprite_mask   equ $02 ; (bit 1) if a sprite need to be cleared on screen
     0004             (./engine/constant):00229         rsv_render_displaysprite_mask equ $04 ; (bit 2) if a sprite need to be rendered on screen
     0008             (./engine/constant):00230         rsv_render_outofrange_mask    equ $08 ; (bit 3) if a sprite is out of range for full rendering in screen
     0080             (./engine/constant):00231         rsv_render_onscreen_mask      equ $80 ; (bit 7) DEPENDENCY should be bit 7 - has been rendered on last screen buffer (may be 0 or 1)
                      (./engine/constant):00232         
     ????             (./engine/constant):00233         rsv_prev_anim                 equ object_rsvd+1 ; and +2 ; reference to previous animation (Ani_) w * UTILE ?
     ????             (./engine/constant):00234         rsv_image_center_offset       equ object_rsvd+3 ; 0 or 1 offset that indicate if image center is even or odd (DRS_XYToAddress)
     ????             (./engine/constant):00235         rsv_image_subset              equ object_rsvd+4 ; and +5 ; reference to current image regarding mirror flags w
     ????             (./engine/constant):00236         rsv_mapping_frame             equ object_rsvd+6 ; and +7 ; reference to current image regarding mirror flags, overlay flag and x precision w
     ????             (./engine/constant):00237         rsv_erase_nb_cell             equ object_rsvd+8 ; b 
     ????             (./engine/constant):00238         rsv_page_draw_routine         equ object_rsvd+9 ; b
     ????             (./engine/constant):00239         rsv_draw_routine              equ object_rsvd+10 ; and +11 ; w
     ????             (./engine/constant):00240         rsv_page_erase_routine        equ object_rsvd+12 ; b
     ????             (./engine/constant):00241         rsv_erase_routine             equ object_rsvd+13 ; and +14 ; w 
     ????             (./engine/constant):00242         rsv_xy1_pixel                 equ object_rsvd+15 ;
     ????             (./engine/constant):00243         rsv_x1_pixel                  equ object_rsvd+15 ; x+x_offset-(x_size/2) screen coordinate
     ????             (./engine/constant):00244         rsv_y1_pixel                  equ object_rsvd+16 ; y+y_offset-(y_size/2) screen coordinate, must follow rsv_x1_pixel
     ????             (./engine/constant):00245         rsv_xy2_pixel                 equ object_rsvd+17 ;
     ????             (./engine/constant):00246         rsv_x2_pixel                  equ object_rsvd+17 ; x+x_offset+(x_size/2) screen coordinate
     ????             (./engine/constant):00247         rsv_y2_pixel                  equ object_rsvd+18 ; y+y_offset+(y_size/2) screen coordinate, must follow rsv_x2_pixel
                      (./engine/constant):00248         
                      (./engine/constant):00249         * ---------------------------------------------------------------------------
                      (./engine/constant):00250         * reserved variables (engine) - buffer specific
                      (./engine/constant):00251         
     ????             (./engine/constant):00252         rsv_buffer_0                  equ object_rsvd+19 ; Start index of buffer 0 variables
     ????             (./engine/constant):00253         rsv_priority_0                equ object_rsvd+19 ; internal value that hold priority in video buffer 0
     ????             (./engine/constant):00254         rsv_priority_prev_obj_0       equ object_rsvd+20 ; and +21 ; previous object (OST address) in display priority list for video buffer 0 (0000 if none) w
     ????             (./engine/constant):00255         rsv_priority_next_obj_0       equ object_rsvd+22 ; and +23 ; next object (OST address) in display priority list for video buffer 0 (0000 if none) w
     ????             (./engine/constant):00256         rsv_prev_mapping_frame_0      equ object_rsvd+24 ; and +25 ; reference to previous image in video buffer 0 w
     ????             (./engine/constant):00257         rsv_prev_erase_nb_cell_0      equ object_rsvd+26 : b
     ????             (./engine/constant):00258         rsv_prev_page_erase_routine_0 equ object_rsvd+27 ; b
     ????             (./engine/constant):00259         rsv_prev_erase_routine_0      equ object_rsvd+28 ; and +29 ; w
     ????             (./engine/constant):00260         rsv_bgdata_0                  equ object_rsvd+30 ; and +31 ; address of background data in screen 0 w
     ????             (./engine/constant):00261         rsv_prev_xy_pixel_0           equ object_rsvd+32 ;
     ????             (./engine/constant):00262         rsv_prev_x_pixel_0            equ object_rsvd+32 ; previous x screen coordinate b
     ????             (./engine/constant):00263         rsv_prev_y_pixel_0            equ object_rsvd+33 ; previous y screen coordinate b, must follow x_pixel
     ????             (./engine/constant):00264         rsv_prev_xy1_pixel_0          equ object_rsvd+34 ;
     ????             (./engine/constant):00265         rsv_prev_x1_pixel_0           equ object_rsvd+34 ; previous x+x_offset-(x_size/2) screen coordinate b
     ????             (./engine/constant):00266         rsv_prev_y1_pixel_0           equ object_rsvd+35 ; previous y+y_offset-(y_size/2) screen coordinate b, must follow x1_pixel
     ????             (./engine/constant):00267         rsv_prev_xy2_pixel_0          equ object_rsvd+36 ;
     ????             (./engine/constant):00268         rsv_prev_x2_pixel_0           equ object_rsvd+36 ; previous x+x_offset+(x_size/2) screen coordinate b
     ????             (./engine/constant):00269         rsv_prev_y2_pixel_0           equ object_rsvd+37 ; previous y+y_offset+(y_size/2) screen coordinate b, must follow x2_pixel
     ????             (./engine/constant):00270         rsv_prev_render_flags_0       equ object_rsvd+38 ;
                      (./engine/constant):00271         * --- rsv_prev_render_flags_0 bitfield variables ---
     0001             (./engine/constant):00272         rsv_prev_render_overlay_mask  equ $01 ; (bit 0) if a sprite has been rendered with compilated sprite and no background save on screen buffer 0/1
     0080             (./engine/constant):00273         rsv_prev_render_onscreen_mask equ $80 ; (bit 7) DEPENDENCY should be bit 7 - has been rendered on screen buffer 0/1
                      (./engine/constant):00274         
     ????             (./engine/constant):00275         rsv_buffer_1                  equ object_rsvd+39 ; Start index of buffer 1 variables
     ????             (./engine/constant):00276         rsv_priority_1                equ object_rsvd+39 ; internal value that hold priority in video buffer 1
     ????             (./engine/constant):00277         rsv_priority_prev_obj_1       equ object_rsvd+40 ; and +41 ; previous object (OST address) in display priority list for video buffer 1 (0000 if none) w
     ????             (./engine/constant):00278         rsv_priority_next_obj_1       equ object_rsvd+42 ; and +43 ; next object (OST address) in display priority list for video buffer 1 (0000 if none) w
     ????             (./engine/constant):00279         rsv_prev_mapping_frame_1      equ object_rsvd+44 ; and +45 ; reference to previous image in video buffer 1 w
     ????             (./engine/constant):00280         rsv_prev_erase_nb_cell_1      equ object_rsvd+46 ; b
     ????             (./engine/constant):00281         rsv_prev_page_erase_routine_1 equ object_rsvd+47 ; b
     ????             (./engine/constant):00282         rsv_prev_erase_routine_1      equ object_rsvd+48 ; and +49 ; w
     ????             (./engine/constant):00283         rsv_bgdata_1                  equ object_rsvd+50 ; and +51 ; address of background data in screen 1 w
     ????             (./engine/constant):00284         rsv_prev_xy_pixel_1           equ object_rsvd+52 ;
     ????             (./engine/constant):00285         rsv_prev_x_pixel_1            equ object_rsvd+52 ; previous x screen coordinate b
     ????             (./engine/constant):00286         rsv_prev_y_pixel_1            equ object_rsvd+53 ; previous y screen coordinate b, must follow x_pixel
     ????             (./engine/constant):00287         rsv_prev_xy1_pixel_1          equ object_rsvd+54 ;
     ????             (./engine/constant):00288         rsv_prev_x1_pixel_1           equ object_rsvd+54 ; previous x+x_size screen coordinate b
     ????             (./engine/constant):00289         rsv_prev_y1_pixel_1           equ object_rsvd+55 ; previous y+y_size screen coordinate b, must follow x_pixel
     ????             (./engine/constant):00290         rsv_prev_xy2_pixel_1          equ object_rsvd+56 ;
     ????             (./engine/constant):00291         rsv_prev_x2_pixel_1           equ object_rsvd+56 ; previous x+x_size screen coordinate b
     ????             (./engine/constant):00292         rsv_prev_y2_pixel_1           equ object_rsvd+57 ; previous y+y_size screen coordinate b, must follow x_pixel
     ????             (./engine/constant):00293         rsv_prev_render_flags_1       equ object_rsvd+58 ;
                      (./engine/constant):00294         
     0000             (./engine/constant):00295         buf_priority                  equ 0  ; offset for each rsv_buffer variables
     0001             (./engine/constant):00296         buf_priority_prev_obj         equ 1  ;
     0003             (./engine/constant):00297         buf_priority_next_obj         equ 3  ;
     0005             (./engine/constant):00298         buf_prev_mapping_frame        equ 5  ;
     0007             (./engine/constant):00299         buf_erase_nb_cell             equ 7  ;
     0008             (./engine/constant):00300         buf_page_erase_routine        equ 8 ;
     0009             (./engine/constant):00301         buf_erase_routine             equ 9 ;
     000B             (./engine/constant):00302         buf_bgdata                    equ 11 ;
     000D             (./engine/constant):00303         buf_prev_xy_pixel             equ 13 ;
     000D             (./engine/constant):00304         buf_prev_x_pixel              equ 13 ;
     000E             (./engine/constant):00305         buf_prev_y_pixel              equ 14 ;
     000F             (./engine/constant):00306         buf_prev_xy1_pixel            equ 15 ;
     000F             (./engine/constant):00307         buf_prev_x1_pixel             equ 15 ;
     0010             (./engine/constant):00308         buf_prev_y1_pixel             equ 16 ;
     0011             (./engine/constant):00309         buf_prev_xy2_pixel            equ 17 ;
     0011             (./engine/constant):00310         buf_prev_x2_pixel             equ 17 ;
     0012             (./engine/constant):00311         buf_prev_y2_pixel             equ 18 ;
     0013             (./engine/constant):00312         buf_prev_render_flags         equ 19 ;
                      (./engine/constant):00313          else
                      (./engine/constant):00314         * ---------------------------------------------------------------------------
                      (./engine/constant):00315         * reserved variables (engine) - buffer specific - overlay pack
                      (./engine/constant):00316         
0000                  (./engine/constant):00317         rsv_priority                  equ object_rsvd   ; internal value that hold priority in video buffer 0
0000                  (./engine/constant):00318         rsv_priority_prev_obj         equ object_rsvd+1 ; and +2 ; previous object (OST address) in display priority list for video buffer 0 (0000 if none) w
0000                  (./engine/constant):00319         rsv_priority_next_obj         equ object_rsvd+3 ; and +4 ; next object (OST address) in display priority list for video buffer 0 (0000 if none) w
                      (./engine/constant):00320         
                      (./engine/constant):00321         ; ---------------------------------------------------------------------------
                      (./engine/constant):00322         ; when childsprites are activated (i.e. bit #6 of render_flags set)
                      (./engine/constant):00323         ; object_base_size+ext_variables_size should cover at least 7+56 bytes 
                      (./engine/constant):00324         ; subtype is recovered
0000                  (./engine/constant):00325         mainspr_childsprites    equ   subtype         ; amount of child sprites
0000                  (./engine/constant):00326         mainspr_width           equ   run_object_next+2
0000                  (./engine/constant):00327         mainspr_height          equ   run_object_next+3
0000                  (./engine/constant):00328         mainspr_x_pos           equ   mainspr_height+1
0000                  (./engine/constant):00329         mainspr_y_pos           equ   mainspr_height+3
0000                  (./engine/constant):00330         mainspr_mapframe        equ   mainspr_height+5
0000                  (./engine/constant):00331         sub2_x_pos              equ   mainspr_x_pos+6
0000                  (./engine/constant):00332         sub2_y_pos              equ   mainspr_y_pos+6
0000                  (./engine/constant):00333         sub2_mapframe           equ   mainspr_mapframe+6
0000                  (./engine/constant):00334         sub3_x_pos              equ   sub2_x_pos+6
0000                  (./engine/constant):00335         sub3_y_pos              equ   sub2_y_pos+6
0000                  (./engine/constant):00336         sub3_mapframe           equ   sub2_mapframe+6
0000                  (./engine/constant):00337         sub4_x_pos              equ   sub3_x_pos+6
0000                  (./engine/constant):00338         sub4_y_pos              equ   sub3_y_pos+6
0000                  (./engine/constant):00339         sub4_mapframe           equ   sub3_mapframe+6
0000                  (./engine/constant):00340         sub5_x_pos              equ   sub4_x_pos+6
0000                  (./engine/constant):00341         sub5_y_pos              equ   sub4_y_pos+6
0000                  (./engine/constant):00342         sub5_mapframe           equ   sub4_mapframe+6
0000                  (./engine/constant):00343         sub6_x_pos              equ   sub5_x_pos+6
0000                  (./engine/constant):00344         sub6_y_pos              equ   sub5_y_pos+6
0000                  (./engine/constant):00345         sub6_mapframe           equ   sub5_mapframe+6
0000                  (./engine/constant):00346         sub7_x_pos              equ   sub6_x_pos+6
0000                  (./engine/constant):00347         sub7_y_pos              equ   sub6_y_pos+6
0000                  (./engine/constant):00348         sub7_mapframe           equ   sub6_mapframe+6
0000                  (./engine/constant):00349         sub8_x_pos              equ   sub7_x_pos+6
0000                  (./engine/constant):00350         sub8_y_pos              equ   sub7_y_pos+6
0000                  (./engine/constant):00351         sub8_mapframe           equ   sub7_mapframe+6
0000                  (./engine/constant):00352         sub9_x_pos              equ   sub8_x_pos+6
0000                  (./engine/constant):00353         sub9_y_pos              equ   sub8_y_pos+6
0000                  (./engine/constant):00354         sub9_mapframe           equ   sub8_mapframe+6
0000                  (./engine/constant):00355         next_subspr             equ   6 ; size of a subsprite data
                      (./engine/constant):00356          endc
                      (./engine/constant):00357          endc
                      (/home/sam/thomson):00016                 INCLUDE "./engine/macros.asm"          
0000                  (./engine/macros.a):00001         _ldd MACRO
                      (./engine/macros.a):00002                 ldd   #((\1)*256)+\2
                      (./engine/macros.a):00003          ENDM
                      (./engine/macros.a):00004          
0000                  (./engine/macros.a):00005         _ldx MACRO
                      (./engine/macros.a):00006                 ldx   #((\1)*256)+\2
                      (./engine/macros.a):00007          ENDM
                      (./engine/macros.a):00008          
0000                  (./engine/macros.a):00009         _ldy MACRO
                      (./engine/macros.a):00010                 ldy   #((\1)*256)+\2
                      (./engine/macros.a):00011          ENDM
                      (./engine/macros.a):00012          
0000                  (./engine/macros.a):00013         _ldu MACRO
                      (./engine/macros.a):00014                 ldu   #((\1)*256)+\2
                      (./engine/macros.a):00015          ENDM  
                      (./engine/macros.a):00016          
0000                  (./engine/macros.a):00017         _lds MACRO
                      (./engine/macros.a):00018                 lds   #((\1)*256)+\2
                      (./engine/macros.a):00019          ENDM   
                      (./engine/macros.a):00020          
0000                  (./engine/macros.a):00021         _SetCartPageA MACRO
                      (./engine/macros.a):00022          IFDEF T2
                      (./engine/macros.a):00023                 jsr   SetCartPageA
                      (./engine/macros.a):00024          ELSE
                      (./engine/macros.a):00025                 sta   $E7E6                    ; selection de la page RAM en zone cartouche
                      (./engine/macros.a):00026          ENDC
                      (./engine/macros.a):00027          ENDM      
                      (./engine/macros.a):00028          
0000                  (./engine/macros.a):00029         _GetCartPageA MACRO
                      (./engine/macros.a):00030          IFDEF T2
                      (./engine/macros.a):00031                 jsr   GetCartPageA
                      (./engine/macros.a):00032          ELSE
                      (./engine/macros.a):00033                 lda   $E7E6
                      (./engine/macros.a):00034          ENDC
                      (./engine/macros.a):00035          ENDM
                      (./engine/macros.a):00036         
0000                  (./engine/macros.a):00037         _SetCartPageB MACRO
                      (./engine/macros.a):00038          IFDEF T2
                      (./engine/macros.a):00039                 jsr   SetCartPageB
                      (./engine/macros.a):00040          ELSE
                      (./engine/macros.a):00041                 stb   $E7E6                    ; selection de la page RAM en zone cartouche
                      (./engine/macros.a):00042          ENDC
                      (./engine/macros.a):00043          ENDM      
                      (./engine/macros.a):00044          
0000                  (./engine/macros.a):00045         _GetCartPageB MACRO
                      (./engine/macros.a):00046          IFDEF T2
                      (./engine/macros.a):00047                 jsr   GetCartPageB
                      (./engine/macros.a):00048          ELSE
                      (./engine/macros.a):00049                 ldb   $E7E6
                      (./engine/macros.a):00050          ENDC
                      (./engine/macros.a):00051          ENDM     
                      (./engine/macros.a):00052         
0000                  (./engine/macros.a):00053         _RunObjectSwap MACRO
                      (./engine/macros.a):00054                 ; param 1 : ObjID_
                      (./engine/macros.a):00055                 ; param 2 : Object data RAM address
                      (./engine/macros.a):00056                 ; manual launch of an object from a different dynamic memory page and not from the resident page 1
                      (./engine/macros.a):00057                 lda   Obj_Index_Page+\1
                      (./engine/macros.a):00058                 sta   PSR_Page   
                      (./engine/macros.a):00059                 ldd   Obj_Index_Address+2*\1
                      (./engine/macros.a):00060                 std   PSR_Address       
                      (./engine/macros.a):00061                 ldu   \2             
                      (./engine/macros.a):00062                 jsr   RunPgSubRoutine
                      (./engine/macros.a):00063          ENDM    
                      (./engine/macros.a):00064         
0000                  (./engine/macros.a):00065         _RunObjectSwapRoutine MACRO
                      (./engine/macros.a):00066                 ; param 1 : ObjID_
                      (./engine/macros.a):00067                 ; param 2 : Object routine
                      (./engine/macros.a):00068                 ; manual launch of an object from a different dynamic memory page and not from the resident page 1
                      (./engine/macros.a):00069                 lda   Obj_Index_Page+\1   
                      (./engine/macros.a):00070                 sta   PSR_Page   
                      (./engine/macros.a):00071                 ldd   Obj_Index_Address+2*\1
                      (./engine/macros.a):00072                 std   PSR_Address       
                      (./engine/macros.a):00073                 ldb   \2        
                      (./engine/macros.a):00074                 jsr   RunPgSubRoutine
                      (./engine/macros.a):00075          ENDM 
                      (./engine/macros.a):00076          
0000                  (./engine/macros.a):00077         _MountObject MACRO 
                      (./engine/macros.a):00078                 ; param 1 : ObjID_
                      (./engine/macros.a):00079                 ; manual mount of an object from the resident page 1
                      (./engine/macros.a):00080                 lda   Obj_Index_Page+\1
                      (./engine/macros.a):00081                 _SetCartPageA
                      (./engine/macros.a):00082                 ldx   Obj_Index_Address+2*\1
                      (./engine/macros.a):00083          ENDM
                      (./engine/macros.a):00084         
0000                  (./engine/macros.a):00085         _RunObject MACRO 
                      (./engine/macros.a):00086                 ; param 1 : ObjID_
                      (./engine/macros.a):00087                 ; param 2 : Object data RAM address
                      (./engine/macros.a):00088                 ; manual launch of an object from the resident page 1
                      (./engine/macros.a):00089                 _MountObject \1
                      (./engine/macros.a):00090                 ldu   \2        
                      (./engine/macros.a):00091                 jsr   ,x
                      (./engine/macros.a):00092          ENDM
                      (./engine/macros.a):00093         
0000                  (./engine/macros.a):00094         _RunObjectRoutineA MACRO 
                      (./engine/macros.a):00095                 ; param 1 : ObjID_
                      (./engine/macros.a):00096                 ; param 2 : Object routine
                      (./engine/macros.a):00097                 ; manual launch of an object from the resident page 1
                      (./engine/macros.a):00098                 ; this object does not need or have a data structure for this routine
                      (./engine/macros.a):00099                 _MountObject \1
                      (./engine/macros.a):00100                 lda   \2        
                      (./engine/macros.a):00101                 jsr   ,x
                      (./engine/macros.a):00102          ENDM
                      (./engine/macros.a):00103         
0000                  (./engine/macros.a):00104         _RunObjectRoutineB MACRO 
                      (./engine/macros.a):00105                 ; param 1 : ObjID_
                      (./engine/macros.a):00106                 ; param 2 : Object routine
                      (./engine/macros.a):00107                 ; manual launch of an object from the resident page 1
                      (./engine/macros.a):00108                 ; this object does not need or have a data structure for this routine
                      (./engine/macros.a):00109                 _MountObject \1
                      (./engine/macros.a):00110                 ldb   \2        
                      (./engine/macros.a):00111                 jsr   ,x
                      (./engine/macros.a):00112          ENDM
                      (./engine/macros.a):00113         
0000                  (./engine/macros.a):00114         _SwitchScreenBuffer MACRO
                      (./engine/macros.a):00115                 ldb   $E7E5
                      (./engine/macros.a):00116                 eorb  #1                       ; switch btw page 2 and 3
                      (./engine/macros.a):00117                 orb   #$02
                      (./engine/macros.a):00118                 stb   $E7E5
                      (./engine/macros.a):00119          ENDM
                      (./engine/macros.a):00120         
0000                  (./engine/macros.a):00121         _asld MACRO
                      (./engine/macros.a):00122                 aslb
                      (./engine/macros.a):00123                 rola
                      (./engine/macros.a):00124          ENDM        
                      (./engine/macros.a):00125          
0000                  (./engine/macros.a):00126         _asrd MACRO
                      (./engine/macros.a):00127                 asra
                      (./engine/macros.a):00128                 rorb
                      (./engine/macros.a):00129          ENDM      
                      (./engine/macros.a):00130          
0000                  (./engine/macros.a):00131         _lsld MACRO
                      (./engine/macros.a):00132                 lslb
                      (./engine/macros.a):00133                 rola
                      (./engine/macros.a):00134          ENDM        
                      (./engine/macros.a):00135          
0000                  (./engine/macros.a):00136         _lsrd MACRO
                      (./engine/macros.a):00137                 lsra
                      (./engine/macros.a):00138                 rorb
                      (./engine/macros.a):00139          ENDM
                      (./engine/macros.a):00140          
0000                  (./engine/macros.a):00141         _rold MACRO
                      (./engine/macros.a):00142                 rolb
                      (./engine/macros.a):00143                 rola
                      (./engine/macros.a):00144          ENDM    
                      (./engine/macros.a):00145          
0000                  (./engine/macros.a):00146         _rord MACRO
                      (./engine/macros.a):00147                 rora
                      (./engine/macros.a):00148                 rorb
                      (./engine/macros.a):00149          ENDM
                      (./engine/macros.a):00150         
0000                  (./engine/macros.a):00151         _negd MACRO
                      (./engine/macros.a):00152                 nega
                      (./engine/macros.a):00153                 negb
                      (./engine/macros.a):00154                 sbca  #0
                      (./engine/macros.a):00155          ENDM
                      (./engine/macros.a):00156         
0000                  (./engine/macros.a):00157         _cba MACRO
                      (./engine/macros.a):00158                 pshs  b
                      (./engine/macros.a):00159                 cmpa  ,s+
                      (./engine/macros.a):00160          ENDM
                      (./engine/macros.a):00161         
0000                  (./engine/macros.a):00162         _aba MACRO
                      (./engine/macros.a):00163                 pshs  b
                      (./engine/macros.a):00164                 adda  ,s+
                      (./engine/macros.a):00165          ENDM
                      (./engine/macros.a):00166         
0000                  (./engine/macros.a):00167         _sba MACRO
                      (./engine/macros.a):00168                 pshs  b
                      (./engine/macros.a):00169                 suba  ,s+
                      (./engine/macros.a):00170          ENDM
                      (./engine/macros.a):00171         
0000                  (./engine/macros.a):00172         _cab MACRO
                      (./engine/macros.a):00173                 pshs  a
                      (./engine/macros.a):00174                 cmpb  ,s+
                      (./engine/macros.a):00175          ENDM
                      (./engine/macros.a):00176         
0000                  (./engine/macros.a):00177         _aab MACRO
                      (./engine/macros.a):00178                 pshs  a
                      (./engine/macros.a):00179                 addb  ,s+
                      (./engine/macros.a):00180          ENDM
                      (./engine/macros.a):00181         
0000                  (./engine/macros.a):00182         _sab MACRO
                      (./engine/macros.a):00183                 pshs  a
                      (./engine/macros.a):00184                 subb  ,s+
                      (./engine/macros.a):00185          ENDM
                      (./engine/macros.a):00186         
0000                  (./engine/macros.a):00187         _breakpoint MACRO
                      (./engine/macros.a):00188          IFDEF DEBUG
                      (./engine/macros.a):00189                 pshs  CC
                      (./engine/macros.a):00190                 sta   >$ffff
                      (./engine/macros.a):00191                 puls  CC
                      (./engine/macros.a):00192          ENDC
                      (./engine/macros.a):00193          ENDM
                      (/home/sam/thomson):00017                 
                      (/home/sam/thomson):00018          IFNDEF boot_color_gr
0000                  (/home/sam/thomson):00019         boot_color_gr equ $FF
                      (/home/sam/thomson):00020          ENDC
                      (/home/sam/thomson):00021          IFNDEF boot_color_b
0000                  (/home/sam/thomson):00022         boot_color_b  equ $0F
                      (/home/sam/thomson):00023          ENDC
                      (/home/sam/thomson):00024         
                      (/home/sam/thomson):00025                 org   $0000
                      (/home/sam/thomson):00026         
                      (/home/sam/thomson):00027         ********************************************************************************  
                      (/home/sam/thomson):00028         * Header Megarom T.2
                      (/home/sam/thomson):00029         ********************************************************************************
                      (/home/sam/thomson):00030         
0000 20               (/home/sam/thomson):00031                 fcb   $20                      * caractere espace
0001 53               (/home/sam/thomson):00032                 fcb   $53                      * S
0002 6F               (/home/sam/thomson):00033                 fcb   $6F                      * o        
0003 6E               (/home/sam/thomson):00034                 fcb   $6E                      * n        
0004 69               (/home/sam/thomson):00035                 fcb   $69                      * i
0005 63               (/home/sam/thomson):00036                 fcb   $63                      * c
0006 20               (/home/sam/thomson):00037                 fcb   $20                      *          
0007 74               (/home/sam/thomson):00038                 fcb   $74                      * t
0008 68               (/home/sam/thomson):00039                 fcb   $68                      * h
0009 65               (/home/sam/thomson):00040                 fcb   $65                      * e
000A 20               (/home/sam/thomson):00041                 fcb   $20                      *
000B 48               (/home/sam/thomson):00042                 fcb   $48                      * H
000C 65               (/home/sam/thomson):00043                 fcb   $65                      * e
000D 64               (/home/sam/thomson):00044                 fcb   $64                      * d
000E 67               (/home/sam/thomson):00045                 fcb   $67                      * g
000F 65               (/home/sam/thomson):00046                 fcb   $65                      * e
0010 68               (/home/sam/thomson):00047                 fcb   $68                      * h
0011 6F               (/home/sam/thomson):00048                 fcb   $6F                      * o
0012 67               (/home/sam/thomson):00049                 fcb   $67                      * g                               
0013 20               (/home/sam/thomson):00050                 fcb   $20                      *
0014 32               (/home/sam/thomson):00051                 fcb   $32                      * 2
0015 20               (/home/sam/thomson):00052                 fcb   $20                      *
0016 20               (/home/sam/thomson):00053                 fcb   $20                      *
0017 04               (/home/sam/thomson):00054                 fcb   $04                      * caractere de fin
                      (/home/sam/thomson):00055                 
0018 0000             (/home/sam/thomson):00056                 fdb   $0000                    * reserve TO7/70
001A A3               (/home/sam/thomson):00057                 fcb   $A3                      * checksum (somme des $19 premiers octets a laquelle on ajoute $55)
001B 00               (/home/sam/thomson):00058                 fcb   $00                      * libre
001C 0020             (/home/sam/thomson):00059                 fdb   PalFadeInit              * point entree (reset a chaud) 
001E 0020             (/home/sam/thomson):00060                 fdb   PalFadeInit              * point entree (reset a froid)
                      (/home/sam/thomson):00061         
                      (/home/sam/thomson):00062         * donnees pour le fondu de palette
                      (/home/sam/thomson):00063         ********************************************************************************
0020                  (/home/sam/thomson):00064         PalFadeInit
0020 8661             (/home/sam/thomson):00065                 lda   #$61
0022 1F8B             (/home/sam/thomson):00066                 tfr   a,dp                     * positionne la direct page
                      (/home/sam/thomson):00067                 
     6100             (/home/sam/thomson):00068         pal_from equ $6100
0024 8E6100           (/home/sam/thomson):00069                 ldx   #pal_from
0027 CC0000           (/home/sam/thomson):00070                 ldd   #$0000                   * couleur $00 Noir (Thomson) => 06 change bordure
002A ED81             (/home/sam/thomson):00071                 std   ,x++ 
002C CCF00F           (/home/sam/thomson):00072                 ldd   #$F00F                   * couleur $0C Turquoise (Bordure ecran)
002F ED81             (/home/sam/thomson):00073                 std   ,x++        
0031 CCFF0F           (/home/sam/thomson):00074                 ldd   #$FF0F                   * couleur $0E Blanc (TO8)
0034 ED81             (/home/sam/thomson):00075                 std   ,x++        
0036 CC7707           (/home/sam/thomson):00076                 ldd   #$7707                   * couleur $10 Gris (Fond Bas)
0039 ED81             (/home/sam/thomson):00077                 std   ,x++        
003B CCAA03           (/home/sam/thomson):00078                 ldd   #$AA03                   * couleur $16 Jaune (Interieur case)
003E ED81             (/home/sam/thomson):00079                 std   ,x++        
0040 CC330A           (/home/sam/thomson):00080                 ldd   #$330A                   * couleur $18 Mauve (Fond TO8)
0043 ED81             (/home/sam/thomson):00081                 std   ,x++        
                      (/home/sam/thomson):00082                                                                                
     610C             (/home/sam/thomson):00083         pal_len equ pal_from+12                              
0045 CC0C0E           (/home/sam/thomson):00084                 ldd   #$0C0E                   * pour chaque couleur on defini un index limite
0048 ED81             (/home/sam/thomson):00085                 std   ,x++                     * (exclu) de chargement. ex: 0C, 0E, ... 
004A CC1016           (/home/sam/thomson):00086                 ldd   #$1016                   * la premiere couleur de PAL_FROM est chargee
004D ED81             (/home/sam/thomson):00087                 std   ,x++                     * pour les couleurs 0(00) a 5(0A)
004F CC1820           (/home/sam/thomson):00088                 ldd   #$1820                   * la seconde couleur de PAL_FORM  est chargee
0052 ED81             (/home/sam/thomson):00089                 std   ,x++                     * pour la couleur 6(0C)
     6112             (/home/sam/thomson):00090         end_pal_len equ pal_len+6 
                      (/home/sam/thomson):00091            
     6112             (/home/sam/thomson):00092         pal_cycles equ pal_len+6
0054 8610             (/home/sam/thomson):00093                 lda   #$10                     * nombre de frames de la transition (VSYNC)
0056 A780             (/home/sam/thomson):00094                 sta   ,x+
                      (/home/sam/thomson):00095                                                                                
     6113             (/home/sam/thomson):00096         pal_mask equ pal_cycles+1                              
0058 860F             (/home/sam/thomson):00097                 lda   #$0F                     * masque pour l'aternance du traitemet vert/rouge
005A A780             (/home/sam/thomson):00098                 sta   ,x+                
                      (/home/sam/thomson):00099                 
     6114             (/home/sam/thomson):00100         pal_buffer equ pal_mask+1                           
005C 8642             (/home/sam/thomson):00101                 lda   #$42                     * buffer de comparaison
005E A780             (/home/sam/thomson):00102                 sta   ,x+        
0060 8641             (/home/sam/thomson):00103                 lda   #$41                     * buffer de comparaison
0062 A780             (/home/sam/thomson):00104                 sta   ,x+        
                      (/home/sam/thomson):00105                                                                                
     6116             (/home/sam/thomson):00106         pal_idx equ pal_buffer+2                                 
0064 8600             (/home/sam/thomson):00107                 lda   #$00                     * index de la couleur courante dans le traitement
0066 A784             (/home/sam/thomson):00108                 sta   ,x        
                      (/home/sam/thomson):00109                 
                      (/home/sam/thomson):00110         ********************************************************************************  
                      (/home/sam/thomson):00111         * Fondu palette
                      (/home/sam/thomson):00112         ********************************************************************************
                      (/home/sam/thomson):00113         
0068                  (/home/sam/thomson):00114         PalFade        
0068 0F16             (/home/sam/thomson):00115                 clr   <pal_idx
006A 8E610C           (/home/sam/thomson):00116                 ldx   #pal_len                 * index limite de chargement pour couleur courante 
006D CE6100           (/home/sam/thomson):00117                 ldu   #pal_from                * chargement pointeur valeur des couleurs actuelles
                      (/home/sam/thomson):00118                 
0070                  (/home/sam/thomson):00119         Vsync_1                                
0070 7DE7E7           (/home/sam/thomson):00120                 tst   $E7E7                    * le faisceau n'est pas dans l'ecran utile
0073 2AFB             (/home/sam/thomson):00121                 bpl   Vsync_1                  * tant que le bit est a 0 on boucle
0075                  (/home/sam/thomson):00122         Vsync_2                                 
0075 7DE7E7           (/home/sam/thomson):00123                 tst   $E7E7                    * le faisceau est dans l'ecran utile
0078 2BFB             (/home/sam/thomson):00124                 bmi   Vsync_2                  * tant que le bit est a 1 on boucle
                      (/home/sam/thomson):00125                 
007A 108E0140         (/home/sam/thomson):00126                 ldy   #0320                    * 40 lignes * 8 cycles
007E                  (/home/sam/thomson):00127         Tempo        
007E 313F             (/home/sam/thomson):00128                 leay  -1,y
0080 26FC             (/home/sam/thomson):00129                 bne   Tempo                    * tempo pour etre dans la bordure invisible   
                      (/home/sam/thomson):00130                                                                                 
0082 0A12             (/home/sam/thomson):00131                 dec   <pal_cycles              * decremente le compteur du nombre de frame
0084 2756             (/home/sam/thomson):00132                 beq   InitVideo                * si termine
                      (/home/sam/thomson):00133                 
0086                  (/home/sam/thomson):00134         PalRun
0086 A6C4             (/home/sam/thomson):00135                 lda   ,u                       * chargement de la composante verte et rouge
0088 9413             (/home/sam/thomson):00136                 anda  <pal_mask                * on efface la valeur vert ou rouge par masque
008A C600             (/home/sam/thomson):00137                 ldb   #boot_color_gr           * composante verte et rouge couleur cible
008C D413             (/home/sam/thomson):00138                 andb  <pal_mask                * on efface la valeur vert ou rouge par masque
008E D714             (/home/sam/thomson):00139                 stb   <pal_buffer              * on stocke la valeur cible pour comparaison
0090 C611             (/home/sam/thomson):00140                 ldb   #$11                     * preparation de la valeur d'increment de couleur
0092 D413             (/home/sam/thomson):00141                 andb  <pal_mask                * on efface la valeur non utile par masque
0094 D715             (/home/sam/thomson):00142                 stb   <pal_buffer+1            * on stocke la valeur pour ADD ou SUB ulterieur
0096 9114             (/home/sam/thomson):00143                 cmpa  <pal_buffer              * comparaison de la composante courante et cible
0098 270E             (/home/sam/thomson):00144                 beq   PalVRSuivante            * si composante est egale a la cible on passe
009A 2206             (/home/sam/thomson):00145                 bhi   PalVRDec                 * si la composante est superieure on branche
009C A6C4             (/home/sam/thomson):00146                 lda   ,u                       * on recharge la valeur avec vert et rouge
009E 9B15             (/home/sam/thomson):00147                 adda  <pal_buffer+1            * on incremente la composante verte ou rouge
00A0 2004             (/home/sam/thomson):00148                 bra   PalVRSave                * on branche pour sauvegarder
00A2                  (/home/sam/thomson):00149         PalVRDec
00A2 A6C4             (/home/sam/thomson):00150                 lda   ,u                       * on recharge la valeur avec vert et rouge
00A4 9015             (/home/sam/thomson):00151                 suba  <pal_buffer+1            * on decremente la composante verte ou rouge
00A6                  (/home/sam/thomson):00152         PalVRSave                             
00A6 A7C4             (/home/sam/thomson):00153                 sta   ,u                       * sauvegarde de la nouvelle valeur vert ou rouge
00A8                  (/home/sam/thomson):00154         PalVRSuivante                         
00A8 0313             (/home/sam/thomson):00155                 com   <pal_mask                * inversion du masque pour traiter l'autre semioctet
00AA 2BDA             (/home/sam/thomson):00156                 bmi   PalRun                   * si on traite $F0 on branche sinon on continue
                      (/home/sam/thomson):00157                     
00AC                  (/home/sam/thomson):00158         SetPalBleu
00AC E641             (/home/sam/thomson):00159                 ldb   1,u                      * chargement composante bleue courante
00AE C100             (/home/sam/thomson):00160                 cmpb  #boot_color_b            * comparaison composante courante et cible
00B0 2708             (/home/sam/thomson):00161                 beq   SetPalNext               * si composante est egale a la cible on passe
00B2 2203             (/home/sam/thomson):00162                 bhi   SetPalBleudec            * si la composante est superieure on branche
00B4 5C               (/home/sam/thomson):00163                 incb                           * on incremente la composante bleue
00B5 2001             (/home/sam/thomson):00164                 bra   SetPalSaveBleu           * on branche pour sauvegarder
00B7                  (/home/sam/thomson):00165         SetPalBleudec                       
00B7 5A               (/home/sam/thomson):00166                 decb                           * on decremente la composante bleue
00B8                  (/home/sam/thomson):00167         SetPalSaveBleu                         
00B8 E741             (/home/sam/thomson):00168                 stb   1,u                      * sauvegarde de la nouvelle valeur bleue
                      (/home/sam/thomson):00169                                                                                
00BA                  (/home/sam/thomson):00170         SetPalNext                             
00BA 9616             (/home/sam/thomson):00171                 lda   <pal_idx                 * Lecture index couleur
00BC B7E7DB           (/home/sam/thomson):00172                 sta   $E7DB                    * selectionne l'indice de couleur a ecrire
00BF 8B02             (/home/sam/thomson):00173                 adda  #$02                     * increment de l'indice de couleur (x2)
00C1 9716             (/home/sam/thomson):00174                 sta   <pal_idx                 * stockage du nouvel index
00C3 A6C4             (/home/sam/thomson):00175                 lda   ,u                       * chargement de la nouvelle couleur courante
00C5 B7E7DA           (/home/sam/thomson):00176                 sta   $E7DA                    * positionne la nouvelle couleur (Vert et Rouge)
00C8 F7E7DA           (/home/sam/thomson):00177                 stb   $E7DA                    * positionne la nouvelle couleur (Bleu)
00CB 9616             (/home/sam/thomson):00178                 lda   <pal_idx                 * rechargement de l'index couleur
00CD A184             (/home/sam/thomson):00179                 cmpa  ,x                       * comparaison avec l'index limite pour cette couleur
00CF 26E9             (/home/sam/thomson):00180                 bne   SetPalNext               * si inferieur on continue avec la meme couleur
00D1 3342             (/home/sam/thomson):00181                 leau  2,u                      * on avance le pointeur vers la nouvelle couleur
00D3 3001             (/home/sam/thomson):00182                 leax  1,x                      * on avance le pointeur vers la nouvelle limite
00D5 8C6112           (/home/sam/thomson):00183                 cmpx  #end_pal_len             * test de fin de liste
00D8 26AC             (/home/sam/thomson):00184                 bne   PalRun                   * on reboucle si fin de liste pas atteinte
00DA 208C             (/home/sam/thomson):00185                 bra   PalFade
                      (/home/sam/thomson):00186                 
                      (/home/sam/thomson):00187         ********************************************************************************  
                      (/home/sam/thomson):00188         * Initialisation du mode video
                      (/home/sam/thomson):00189         ********************************************************************************
00DC                  (/home/sam/thomson):00190         InitVideo
00DC 1A50             (/home/sam/thomson):00191                 orcc  #$50                     * desactive les interruptions
00DE 10CE9F00         (/home/sam/thomson):00192                 lds   #glb_system_stack        * positionnement pile systeme
00E2 867B             (/home/sam/thomson):00193                 lda   #$7B                     * passage en mode 160x200x16c
00E4 B7E7DC           (/home/sam/thomson):00194                 sta   $E7DC
                      (/home/sam/thomson):00195           
                      (/home/sam/thomson):00196         ********************************************************************************
                      (/home/sam/thomson):00197         * Initialisation de la commutation de page pour l espace Donnees (Mode registre)
                      (/home/sam/thomson):00198         ********************************************************************************
00E7 F66081           (/home/sam/thomson):00199                 ldb   $6081                    * $6081 est l'image "lisible" de $E7E7
00EA CA10             (/home/sam/thomson):00200                 orb   #$10                     * positionne le bit d4 a 1
00EC F76081           (/home/sam/thomson):00201                 stb   $6081                    * maintient une image coherente de $E7E7
00EF F7E7E7           (/home/sam/thomson):00202                 stb   $E7E7                    * bit d4 a 1 pour pages donnees en mode registre
                      (/home/sam/thomson):00203          
                      (/home/sam/thomson):00204         * Positionnement de la page 3 a l'ecran et de la page 2 en zone A000-DFFF
                      (/home/sam/thomson):00205         ***********************************************************
00F2 CCC002           (/home/sam/thomson):00206                 ldd   #$C002                   ; page 3, couleur de cadre 0 et page 2
00F5 B7E7DD           (/home/sam/thomson):00207                 sta   $E7DD                    ; affiche la page a l'ecran
00F8 F7E7E5           (/home/sam/thomson):00208                 stb   $E7E5                    ; visible dans l'espace donnees
                      (/home/sam/thomson):00209                 
00FB 86AA             (/home/sam/thomson):00210                 lda   #$AA
00FD B70555           (/home/sam/thomson):00211                 sta   $0555
0100 8655             (/home/sam/thomson):00212                 lda   #$55
0102 B702AA           (/home/sam/thomson):00213                 sta   $02AA
0105 86B0             (/home/sam/thomson):00214                 lda   #$B0
0107 B70555           (/home/sam/thomson):00215                 sta   $0555
010A 8602             (/home/sam/thomson):00216                 lda   #$02                     ; mode neutre pour la T.2
010C B70556           (/home/sam/thomson):00217                 sta   $0556
                      (/home/sam/thomson):00218                 
                      (/home/sam/thomson):00219                 _ldd  gmboot,$FF               ; level to boot and flag for first level load
010F CC00FF           (             _ldd):00001                 ldd   #((gmboot)*256)+$FF
