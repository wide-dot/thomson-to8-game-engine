                      (C:\Users\bhrou\gi):00001                 INCLUDE "./generated-code/Game.glb"
                      (./generated-code/):00001         * Generated Code
                      (./generated-code/):00002         
     0112             (./generated-code/):00003         Build_RAMLoaderManager equ $0112
     0000             (./generated-code/):00004         GmID_LostWoods equ 0
     0000             (./generated-code/):00005         gmboot equ 0
     0300             (./generated-code/):00006         Build_BootLastBlock equ $0300
                      (C:\Users\bhrou\gi):00002         
                      (C:\Users\bhrou\gi):00003         ********************************************************************************
                      (C:\Users\bhrou\gi):00004         * Boot loader T.2 - Benoit Rousseau 26/04/2021
                      (C:\Users\bhrou\gi):00005         * ------------------------------------------------------------------------------
                      (C:\Users\bhrou\gi):00006         * 
                      (C:\Users\bhrou\gi):00007         * Description
                      (C:\Users\bhrou\gi):00008         * -----------
                      (C:\Users\bhrou\gi):00009         * Animation de la palette: fondu vers une couleur cible PAL_TO
                      (C:\Users\bhrou\gi):00010         * Initialisation de la commutation de page pour l'espace Donnees (Mode registre)
                      (C:\Users\bhrou\gi):00011         * Appel du Game Mode Engine
                      (C:\Users\bhrou\gi):00012         *
                      (C:\Users\bhrou\gi):00013         ********************************************************************************
                      (C:\Users\bhrou\gi):00014         
                      (C:\Users\bhrou\gi):00015                 INCLUDE "./engine/constants.asm"
                      (./engine/constant):00001         * ---------------------------------------------------------------------------
                      (./engine/constant):00002         * Constants
                      (./engine/constant):00003         *
                      (./engine/constant):00004         * Naming convention
                      (./engine/constant):00005         * -----------------
                      (./engine/constant):00006         * - lower case
                      (./engine/constant):00007         * - underscore-separated names
                      (./engine/constant):00008         *
                      (./engine/constant):00009         * ---------------------------------------------------------------------------
                      (./engine/constant):00010         
                      (./engine/constant):00011          ifndef CONSTANTS_ASM
     0001             (./engine/constant):00012         CONSTANTS_ASM equ 1
                      (./engine/constant):00013         
                      (./engine/constant):00014         * ===========================================================================
                      (./engine/constant):00015         * TO8 Registers
                      (./engine/constant):00016         * ===========================================================================
                      (./engine/constant):00017         
                      (./engine/constant):00018         ; Disk routine registers (ROM)
                      (./engine/constant):00019         
     6049             (./engine/constant):00020         dk_drive                      equ $6049
     604A             (./engine/constant):00021         dk_track                      equ $604A
     604B             (./engine/constant):00022         dk_track_lsb                  equ $604B
     604C             (./engine/constant):00023         dk_sector                     equ $604C
     604F             (./engine/constant):00024         dk_write_location             equ $604F
                      (./engine/constant):00025         
                      (./engine/constant):00026         * ===========================================================================
                      (./engine/constant):00027         * Globals
                      (./engine/constant):00028         * ===========================================================================
                      (./engine/constant):00029         
                      (./engine/constant):00030         ; compilated sprite
     9FFE             (./engine/constant):00031         glb_register_s                equ $9FFE  ; reverved space to store S from ROM routines
                      (./engine/constant):00032         
                      (./engine/constant):00033         ; DrawSprites
     9FFC             (./engine/constant):00034         glb_screen_location_1         equ $9FFC  ; start address for rendering of current sprite Part1     
     9FFA             (./engine/constant):00035         glb_screen_location_2         equ $9FFA  ; start address for rendering of current sprite Part2 (Must follow Part1)
                      (./engine/constant):00036         
                      (./engine/constant):00037         ; CheckSpritesRefresh
     9FF9             (./engine/constant):00038         glb_cur_priority              equ $9FF9
     9FF7             (./engine/constant):00039         glb_cur_ptr_sub_obj_erase     equ $9FF7
     9FF5             (./engine/constant):00040         glb_cur_ptr_sub_obj_draw      equ $9FF5
                      (./engine/constant):00041         
     9FF3             (./engine/constant):00042         glb_camera_x_pos              equ $9FF3 ; camera x position in palyfield coordinates
     9FF1             (./engine/constant):00043         glb_camera_y_pos              equ $9FF1 ; camera y position in palyfield coordinates
     9FEF             (./engine/constant):00044         glb_camera_x_min_pos          equ $9FEF
     9FED             (./engine/constant):00045         glb_camera_y_min_pos          equ $9FED
     9FEB             (./engine/constant):00046         glb_camera_x_max_pos          equ $9FEB
     9FE9             (./engine/constant):00047         glb_camera_y_max_pos          equ $9FE9
     9FE8             (./engine/constant):00048         glb_camera_x_offset           equ $9FE8
     9FE7             (./engine/constant):00049         glb_camera_y_offset           equ $9FE7 
     9FE6             (./engine/constant):00050         glb_force_sprite_refresh      equ $9FE6
     9FE5             (./engine/constant):00051         glb_camera_move               equ $9FE5
     9FE4             (./engine/constant):00052         glb_alphaTiles                equ $9FE4
     9FE3             (./engine/constant):00053         glb_timer_second              equ $9FE3
     9FE2             (./engine/constant):00054         glb_timer_minute              equ $9FE2
     9FE2             (./engine/constant):00055         glb_timer                     equ $9FE2 
     9FE1             (./engine/constant):00056         glb_timer_frame               equ $9FE1
                      (./engine/constant):00057         
                      (./engine/constant):00058         ; BankSwitch
     9FE0             (./engine/constant):00059         glb_Page                      equ $9FE0
     9FB0             (./engine/constant):00060         dp_engine                     equ $9FB0 ; engine and user routines tmp var space
     9F00             (./engine/constant):00061         dp                            equ $9F00 ; free user tmp var space
     9F00             (./engine/constant):00062         glb_system_stack              equ $9F00
                      (./engine/constant):00063         
                      (./engine/constant):00064         * ===========================================================================
                      (./engine/constant):00065         * Display Constants
                      (./engine/constant):00066         * ===========================================================================
                      (./engine/constant):00067         
     00A0             (./engine/constant):00068         screen_width                  equ 160    ; in pixel
     001C             (./engine/constant):00069         screen_top                    equ 28     ; in pixel
     00E3             (./engine/constant):00070         screen_bottom                 equ 28+199 ; in pixel
     0030             (./engine/constant):00071         screen_left                   equ 48     ; in pixel
     00CF             (./engine/constant):00072         screen_right                  equ 48+159 ; in pixel
     0008             (./engine/constant):00073         nb_priority_levels            equ 8      ; number of priority levels (need code change if modified)
                      (./engine/constant):00074         
                      (./engine/constant):00075         * ===========================================================================
                      (./engine/constant):00076         * Images Constants
                      (./engine/constant):00077         * ===========================================================================
                      (./engine/constant):00078         
     0004             (./engine/constant):00079         image_x_size                  equ 4
     0005             (./engine/constant):00080         image_y_size                  equ 5
     0006             (./engine/constant):00081         image_center_offset           equ 6
                      (./engine/constant):00082         
     0004             (./engine/constant):00083         image_subset_x1_offset        equ 4
     0005             (./engine/constant):00084         image_subset_y1_offset        equ 5
                      (./engine/constant):00085         
     0000             (./engine/constant):00086         page_draw_routine             equ 0
     0001             (./engine/constant):00087         draw_routine                  equ 1
     0003             (./engine/constant):00088         page_erase_routine            equ 3
     0004             (./engine/constant):00089         erase_routine                 equ 4
     0006             (./engine/constant):00090         erase_nb_cell                 equ 6
                      (./engine/constant):00091         
                      (./engine/constant):00092         * ===========================================================================
                      (./engine/constant):00093         * Sound Constants
                      (./engine/constant):00094         * ===========================================================================
                      (./engine/constant):00095         
     0000             (./engine/constant):00096         sound_page        equ 0
     0001             (./engine/constant):00097         sound_start_addr  equ 1
     0003             (./engine/constant):00098         sound_end_addr    equ 3
     0005             (./engine/constant):00099         sound_meta_size   equ 5
                      (./engine/constant):00100         
                      (./engine/constant):00101         * ===========================================================================
                      (./engine/constant):00102         * Object Constants
                      (./engine/constant):00103         * ===========================================================================
                      (./engine/constant):00104         
                      (./engine/constant):00105         ; ext_variables_size should be declared in game source code
                      (./engine/constant):00106         
     0022             (./engine/constant):00107         object_base_size              equ 34  ; the size of an object without ext_vars - DEPENDENCY ClearObj routine
     003B             (./engine/constant):00108         object_rsvd_size              equ 59  ; the size of an object without ext_vars - DEPENDENCY ClearObj routine
     ????             (./engine/constant):00109         object_rsvd                   equ object_base_size+ext_variables_size
     ????             (./engine/constant):00110         object_size                   equ object_base_size+ext_variables_size+object_rsvd_size ; the size of a dynamic object
     ????             (./engine/constant):00111         next_object                   equ object_size
     0022             (./engine/constant):00112         ext_variables                 equ object_base_size ; start of reserved space for additionnal variables
                      (./engine/constant):00113         
     0000             (./engine/constant):00114         id                            equ 0           ; reference to object model id (ObjID_) (0: free slot)
     0001             (./engine/constant):00115         subtype                       equ 1           ; reference to object subtype (Sub_) DEPENDENCY subtype must follow id
     0002             (./engine/constant):00116         render_flags                  equ 2
                      (./engine/constant):00117         
                      (./engine/constant):00118         ; bit 7 = onscreen flag, bit 0 = x mirror, bit 1 = y mirror, bit 2 = coordinate system, bit 6 = render subobjects
                      (./engine/constant):00119         
                      (./engine/constant):00120         * --- render_flags bitfield variables ---
     0001             (./engine/constant):00121         render_xmirror_mask           equ $01 ; (bit 0) DEPENDENCY should be bit 0 - tell display engine to mirror sprite on horizontal axis
     0002             (./engine/constant):00122         render_ymirror_mask           equ $02 ; (bit 1) DEPENDENCY should be bit 1 - tell display engine to mirror sprite on vertical axis
     0004             (./engine/constant):00123         render_overlay_mask           equ $04 ; (bit 2) DEPENDENCY should be bit 2 - compilated sprite with no background save
     0008             (./engine/constant):00124         render_playfieldcoord_mask    equ $08 ; (bit 3) tell display engine to use playfield (1) or screen (0) coordinates
     0010             (./engine/constant):00125         render_xloop_mask             equ $10 ; (bit 4) (in screen coordinate) tell display engine to hide sprite when x is out of screen (0) or to display (1)  
     0020             (./engine/constant):00126         render_todelete_mask          equ $20 ; (bit 5) tell display engine to delete sprite and clear OST for this object
     0040             (./engine/constant):00127         render_subobjects             equ $40 ; (bit 6) tell display engine to render subobjects for this object
     0080             (./engine/constant):00128         render_hide_mask              equ $80 ; (bit 7) tell display engine to hide sprite (keep priority and mapping_frame)
                      (./engine/constant):00129         
     0003             (./engine/constant):00130         priority                      equ 3           ; display priority (0: nothing to display, 1:front, ..., 8:back)
     0004             (./engine/constant):00131         anim                          equ 4  ; and 5  ; reference to current animation (Ani_)
     0006             (./engine/constant):00132         prev_anim                     equ 6  ; and 7  ; reference to previous animation (Ani_)
     0008             (./engine/constant):00133         anim_frame                    equ 8           ; index of current frame in animation
     0009             (./engine/constant):00134         anim_frame_duration           equ 9           ; number of frames for each image in animation, range: 00-7F (0-127), 0 means display only during one frame
     000A             (./engine/constant):00135         anim_flags                    equ 10          ; byte offset to reference an anim_flags LUT (adv) / store a link flag (non adv)
                      (./engine/constant):00136         
                      (./engine/constant):00137         * --- anim_flags bitfield variables ---
     0001             (./engine/constant):00138         anim_link_mask                equ $01 ; (bit 0) if set, allow the load of a new animation without reseting anim_frame and anim_frame_duration
                      (./engine/constant):00139         
     000B             (./engine/constant):00140         status_flags                  equ 11          ; orientation of sprite, is applied to animation xmirror flag during AnimateSprite
                      (./engine/constant):00141         
                      (./engine/constant):00142         * --- status_flags bitfield variables ---
     0001             (./engine/constant):00143         status_xflip_mask             equ $01 ; (bit 0) X Flip
     0002             (./engine/constant):00144         status_yflip_mask             equ $02 ; (bit 1) Y Flip
                      (./engine/constant):00145         
     000C             (./engine/constant):00146         image_set                     equ 12 ; and 13 ; reference to current image (Img_) (0000 if no image)
     000E             (./engine/constant):00147         x_pos                         equ 14 ; and 15 ; x playfield coordinate
     0010             (./engine/constant):00148         x_sub                         equ 16          ; x subpixel (1/256 of a pixel), must follow x_pos in data structure
     0011             (./engine/constant):00149         y_pos                         equ 17 ; and 18 ; y playfield coordinate
     0013             (./engine/constant):00150         y_sub                         equ 19          ; y subpixel (1/256 of a pixel), must follow y_pos in data structure
     0014             (./engine/constant):00151         xy_pixel                      equ 20          ; x and y screen coordinate
     0014             (./engine/constant):00152         x_pixel                       equ 20          ; x screen coordinate
     0015             (./engine/constant):00153         y_pixel                       equ 21          ; y screen coordinate, must follow x_pixel
     0016             (./engine/constant):00154         x_vel                         equ 22 ; and 23 ; horizontal velocity
     0018             (./engine/constant):00155         y_vel                         equ 24 ; and 25 ; vertical velocity
     001A             (./engine/constant):00156         x_acl                         equ 26 ; and 27 ; horizontal gravity
     001C             (./engine/constant):00157         y_acl                         equ 28 ; and 29 ; vertical gravity
     001E             (./engine/constant):00158         routine                       equ 30          ; index of current object routine
     001F             (./engine/constant):00159         routine_secondary             equ 31          ; index of current secondary routine
     0020             (./engine/constant):00160         routine_tertiary              equ 32          ; index of current tertiary routine
     0021             (./engine/constant):00161         routine_quaternary            equ 33          ; index of current quaternary routine
                      (./engine/constant):00162         
                      (./engine/constant):00163         * ---------------------------------------------------------------------------
                      (./engine/constant):00164         * reserved variables (read/write by engine)
                      (./engine/constant):00165         
     ????             (./engine/constant):00166         rsv_render_flags              equ object_rsvd
                      (./engine/constant):00167         
                      (./engine/constant):00168         * --- rsv_render_flags bitfield variables ---
     0001             (./engine/constant):00169         rsv_render_checkrefresh_mask  equ $01 ; (bit 0) if erasesprite and display sprite flag are processed for this frame
     0002             (./engine/constant):00170         rsv_render_erasesprite_mask   equ $02 ; (bit 1) if a sprite need to be cleared on screen
     0004             (./engine/constant):00171         rsv_render_displaysprite_mask equ $04 ; (bit 2) if a sprite need to be rendered on screen
     0008             (./engine/constant):00172         rsv_render_outofrange_mask    equ $08 ; (bit 3) if a sprite is out of range for full rendering in screen
     0080             (./engine/constant):00173         rsv_render_onscreen_mask      equ $80 ; (bit 7) DEPENDENCY should be bit 7 - has been rendered on last screen buffer (may be 0 or 1)
                      (./engine/constant):00174         
     ????             (./engine/constant):00175         rsv_prev_anim                 equ object_rsvd+1 ; and +2 ; reference to previous animation (Ani_) w * UTILE ?
     ????             (./engine/constant):00176         rsv_image_center_offset       equ object_rsvd+3 ; 0 or 1 offset that indicate if image center is even or odd (DRS_XYToAddress)
     ????             (./engine/constant):00177         rsv_image_subset              equ object_rsvd+4 ; and +5 ; reference to current image regarding mirror flags w
     ????             (./engine/constant):00178         rsv_mapping_frame             equ object_rsvd+6 ; and +7 ; reference to current image regarding mirror flags, overlay flag and x precision w
     ????             (./engine/constant):00179         rsv_erase_nb_cell             equ object_rsvd+8 ; b 
     ????             (./engine/constant):00180         rsv_page_draw_routine         equ object_rsvd+9 ; b
     ????             (./engine/constant):00181         rsv_draw_routine              equ object_rsvd+10 ; and +11 ; w
     ????             (./engine/constant):00182         rsv_page_erase_routine        equ object_rsvd+12 ; b
     ????             (./engine/constant):00183         rsv_erase_routine             equ object_rsvd+13 ; and +14 ; w 
     ????             (./engine/constant):00184         rsv_xy1_pixel                 equ object_rsvd+15 ;
     ????             (./engine/constant):00185         rsv_x1_pixel                  equ object_rsvd+15 ; x+x_offset-(x_size/2) screen coordinate
     ????             (./engine/constant):00186         rsv_y1_pixel                  equ object_rsvd+16 ; y+y_offset-(y_size/2) screen coordinate, must follow rsv_x1_pixel
     ????             (./engine/constant):00187         rsv_xy2_pixel                 equ object_rsvd+17 ;
     ????             (./engine/constant):00188         rsv_x2_pixel                  equ object_rsvd+17 ; x+x_offset+(x_size/2) screen coordinate
     ????             (./engine/constant):00189         rsv_y2_pixel                  equ object_rsvd+18 ; y+y_offset+(y_size/2) screen coordinate, must follow rsv_x2_pixel
                      (./engine/constant):00190         
                      (./engine/constant):00191         * ---------------------------------------------------------------------------
                      (./engine/constant):00192         * reserved variables (engine) - buffer specific
                      (./engine/constant):00193         
     ????             (./engine/constant):00194         rsv_buffer_0                  equ object_rsvd+19 ; Start index of buffer 0 variables
     ????             (./engine/constant):00195         rsv_priority_0                equ object_rsvd+19 ; internal value that hold priority in video buffer 0
     ????             (./engine/constant):00196         rsv_priority_prev_obj_0       equ object_rsvd+20 ; and +21 ; previous object (OST address) in display priority list for video buffer 0 (0000 if none) w
     ????             (./engine/constant):00197         rsv_priority_next_obj_0       equ object_rsvd+22 ; and +23 ; next object (OST address) in display priority list for video buffer 0 (0000 if none) w
     ????             (./engine/constant):00198         rsv_prev_mapping_frame_0      equ object_rsvd+24 ; and object_rsvd+25 ; reference to previous image in video buffer 0 w
     ????             (./engine/constant):00199         rsv_prev_erase_nb_cell_0      equ object_rsvd+26 : b
     ????             (./engine/constant):00200         rsv_prev_page_erase_routine_0 equ object_rsvd+27 ; b
     ????             (./engine/constant):00201         rsv_prev_erase_routine_0      equ object_rsvd+28 ; and object_rsvd+29 ; w
     ????             (./engine/constant):00202         rsv_bgdata_0                  equ object_rsvd+30 ; and +31 ; address of background data in screen 0 w
     ????             (./engine/constant):00203         rsv_prev_xy_pixel_0           equ object_rsvd+32 ;
     ????             (./engine/constant):00204         rsv_prev_x_pixel_0            equ object_rsvd+32 ; previous x screen coordinate b
     ????             (./engine/constant):00205         rsv_prev_y_pixel_0            equ object_rsvd+33 ; previous y screen coordinate b, must follow x_pixel
     ????             (./engine/constant):00206         rsv_prev_xy1_pixel_0          equ object_rsvd+34 ;
     ????             (./engine/constant):00207         rsv_prev_x1_pixel_0           equ object_rsvd+34 ; previous x+x_offset-(x_size/2) screen coordinate b
     ????             (./engine/constant):00208         rsv_prev_y1_pixel_0           equ object_rsvd+35 ; previous y+y_offset-(y_size/2) screen coordinate b, must follow x1_pixel
     ????             (./engine/constant):00209         rsv_prev_xy2_pixel_0          equ object_rsvd+36 ;
     ????             (./engine/constant):00210         rsv_prev_x2_pixel_0           equ object_rsvd+36 ; previous x+x_offset+(x_size/2) screen coordinate b
     ????             (./engine/constant):00211         rsv_prev_y2_pixel_0           equ object_rsvd+37 ; previous y+y_offset+(y_size/2) screen coordinate b, must follow x2_pixel
     ????             (./engine/constant):00212         rsv_prev_render_flags_0       equ object_rsvd+38 ;
                      (./engine/constant):00213         * --- rsv_prev_render_flags_0 bitfield variables ---
     0001             (./engine/constant):00214         rsv_prev_render_overlay_mask  equ $01 ; (bit 0) if a sprite has been rendered with compilated sprite and no background save on screen buffer 0/1
     0080             (./engine/constant):00215         rsv_prev_render_onscreen_mask equ $80 ; (bit 7) DEPENDENCY should be bit 7 - has been rendered on screen buffer 0/1
                      (./engine/constant):00216         
     ????             (./engine/constant):00217         rsv_buffer_1                  equ object_rsvd+39 ; Start index of buffer 1 variables
     ????             (./engine/constant):00218         rsv_priority_1                equ object_rsvd+39 ; internal value that hold priority in video buffer 1
     ????             (./engine/constant):00219         rsv_priority_prev_obj_1       equ object_rsvd+40 ; and +41 ; previous object (OST address) in display priority list for video buffer 1 (0000 if none) w
     ????             (./engine/constant):00220         rsv_priority_next_obj_1       equ object_rsvd+42 ; and +43 ; next object (OST address) in display priority list for video buffer 1 (0000 if none) w
     ????             (./engine/constant):00221         rsv_prev_mapping_frame_1      equ object_rsvd+44 ; and +45 ; reference to previous image in video buffer 1 w
     ????             (./engine/constant):00222         rsv_prev_erase_nb_cell_1      equ object_rsvd+46 ; b
     ????             (./engine/constant):00223         rsv_prev_page_erase_routine_1 equ object_rsvd+47 ; b
     ????             (./engine/constant):00224         rsv_prev_erase_routine_1      equ object_rsvd+48 ; and +49 ; w
     ????             (./engine/constant):00225         rsv_bgdata_1                  equ object_rsvd+50 ; and +51 ; address of background data in screen 1 w
     ????             (./engine/constant):00226         rsv_prev_xy_pixel_1           equ object_rsvd+52 ;
     ????             (./engine/constant):00227         rsv_prev_x_pixel_1            equ object_rsvd+52 ; previous x screen coordinate b
     ????             (./engine/constant):00228         rsv_prev_y_pixel_1            equ object_rsvd+53 ; previous y screen coordinate b, must follow x_pixel
     ????             (./engine/constant):00229         rsv_prev_xy1_pixel_1          equ object_rsvd+54 ;
     ????             (./engine/constant):00230         rsv_prev_x1_pixel_1           equ object_rsvd+54 ; previous x+x_size screen coordinate b
     ????             (./engine/constant):00231         rsv_prev_y1_pixel_1           equ object_rsvd+55 ; previous y+y_size screen coordinate b, must follow x_pixel
     ????             (./engine/constant):00232         rsv_prev_xy2_pixel_1          equ object_rsvd+56 ;
     ????             (./engine/constant):00233         rsv_prev_x2_pixel_1           equ object_rsvd+56 ; previous x+x_size screen coordinate b
     ????             (./engine/constant):00234         rsv_prev_y2_pixel_1           equ object_rsvd+57 ; previous y+y_size screen coordinate b, must follow x_pixel
     ????             (./engine/constant):00235         rsv_prev_render_flags_1       equ object_rsvd+58 ;
                      (./engine/constant):00236         
     0000             (./engine/constant):00237         buf_priority                  equ 0  ; offset for each rsv_buffer variables
     0001             (./engine/constant):00238         buf_priority_prev_obj         equ 1  ;
     0003             (./engine/constant):00239         buf_priority_next_obj         equ 3  ;
     0005             (./engine/constant):00240         buf_prev_mapping_frame        equ 5  ;
     0007             (./engine/constant):00241         buf_erase_nb_cell             equ 7  ;
     0008             (./engine/constant):00242         buf_page_erase_routine        equ 8 ;
     0009             (./engine/constant):00243         buf_erase_routine             equ 9 ;
     000B             (./engine/constant):00244         buf_bgdata                    equ 11 ;
     000D             (./engine/constant):00245         buf_prev_xy_pixel             equ 13 ;
     000D             (./engine/constant):00246         buf_prev_x_pixel              equ 13 ;
     000E             (./engine/constant):00247         buf_prev_y_pixel              equ 14 ;
     000F             (./engine/constant):00248         buf_prev_xy1_pixel            equ 15 ;
     000F             (./engine/constant):00249         buf_prev_x1_pixel             equ 15 ;
     0010             (./engine/constant):00250         buf_prev_y1_pixel             equ 16 ;
     0011             (./engine/constant):00251         buf_prev_xy2_pixel            equ 17 ;
     0011             (./engine/constant):00252         buf_prev_x2_pixel             equ 17 ;
     0012             (./engine/constant):00253         buf_prev_y2_pixel             equ 18 ;
     0013             (./engine/constant):00254         buf_prev_render_flags         equ 19 ;
                      (./engine/constant):00255         
                      (./engine/constant):00256          endc
                      (C:\Users\bhrou\gi):00016                 INCLUDE "./engine/macros.asm"          
0000                  (./engine/macros.a):00001         _ldd MACRO
                      (./engine/macros.a):00002                 ldd   #((\1)*256)+\2
                      (./engine/macros.a):00003          ENDM
                      (./engine/macros.a):00004          
0000                  (./engine/macros.a):00005         _ldx MACRO
                      (./engine/macros.a):00006                 ldx   #((\1)*256)+\2
                      (./engine/macros.a):00007          ENDM
                      (./engine/macros.a):00008          
0000                  (./engine/macros.a):00009         _ldy MACRO
                      (./engine/macros.a):00010                 ldy   #((\1)*256)+\2
                      (./engine/macros.a):00011          ENDM
                      (./engine/macros.a):00012          
0000                  (./engine/macros.a):00013         _ldu MACRO
                      (./engine/macros.a):00014                 ldu   #((\1)*256)+\2
                      (./engine/macros.a):00015          ENDM  
                      (./engine/macros.a):00016          
0000                  (./engine/macros.a):00017         _lds MACRO
                      (./engine/macros.a):00018                 lds   #((\1)*256)+\2
                      (./engine/macros.a):00019          ENDM   
                      (./engine/macros.a):00020          
0000                  (./engine/macros.a):00021         _SetCartPageA MACRO
                      (./engine/macros.a):00022          IFDEF T2
                      (./engine/macros.a):00023                 jsr   SetCartPageA
                      (./engine/macros.a):00024          ELSE
                      (./engine/macros.a):00025                 sta   $E7E6                    ; selection de la page RAM en zone cartouche
                      (./engine/macros.a):00026          ENDC
                      (./engine/macros.a):00027          ENDM      
                      (./engine/macros.a):00028          
0000                  (./engine/macros.a):00029         _GetCartPageA MACRO
                      (./engine/macros.a):00030          IFDEF T2
                      (./engine/macros.a):00031                 jsr   GetCartPageA
                      (./engine/macros.a):00032          ELSE
                      (./engine/macros.a):00033                 lda   $E7E6
                      (./engine/macros.a):00034          ENDC
                      (./engine/macros.a):00035          ENDM
                      (./engine/macros.a):00036         
0000                  (./engine/macros.a):00037         _SetCartPageB MACRO
                      (./engine/macros.a):00038          IFDEF T2
                      (./engine/macros.a):00039                 jsr   SetCartPageB
                      (./engine/macros.a):00040          ELSE
                      (./engine/macros.a):00041                 stb   $E7E6                    ; selection de la page RAM en zone cartouche
                      (./engine/macros.a):00042          ENDC
                      (./engine/macros.a):00043          ENDM      
                      (./engine/macros.a):00044          
0000                  (./engine/macros.a):00045         _GetCartPageB MACRO
                      (./engine/macros.a):00046          IFDEF T2
                      (./engine/macros.a):00047                 jsr   GetCartPageB
                      (./engine/macros.a):00048          ELSE
                      (./engine/macros.a):00049                 ldb   $E7E6
                      (./engine/macros.a):00050          ENDC
                      (./engine/macros.a):00051          ENDM     
                      (./engine/macros.a):00052         
0000                  (./engine/macros.a):00053         _RunObjectSwap MACRO
                      (./engine/macros.a):00054                 ; param 1 : ObjID_
                      (./engine/macros.a):00055                 ; param 2 : Object data RAM address
                      (./engine/macros.a):00056                 ; manual launch of an object from a different dynamic memory page and not from the resident page 1
                      (./engine/macros.a):00057                 lda   Obj_Index_Page+\1
                      (./engine/macros.a):00058                 sta   PSR_Page   
                      (./engine/macros.a):00059                 ldd   Obj_Index_Address+2*\1
                      (./engine/macros.a):00060                 std   PSR_Address       
                      (./engine/macros.a):00061                 ldu   \2             
                      (./engine/macros.a):00062                 jsr   RunPgSubRoutine
                      (./engine/macros.a):00063          ENDM    
                      (./engine/macros.a):00064         
0000                  (./engine/macros.a):00065         _RunObjectSwapRoutine MACRO
                      (./engine/macros.a):00066                 ; param 1 : ObjID_
                      (./engine/macros.a):00067                 ; param 2 : Object routine
                      (./engine/macros.a):00068                 ; manual launch of an object from a different dynamic memory page and not from the resident page 1
                      (./engine/macros.a):00069                 lda   Obj_Index_Page+\1   
                      (./engine/macros.a):00070                 sta   PSR_Page   
                      (./engine/macros.a):00071                 ldd   Obj_Index_Address+2*\1
                      (./engine/macros.a):00072                 std   PSR_Address       
                      (./engine/macros.a):00073                 ldb   \2        
                      (./engine/macros.a):00074                 jsr   RunPgSubRoutine
                      (./engine/macros.a):00075          ENDM 
                      (./engine/macros.a):00076          
0000                  (./engine/macros.a):00077         _MountObject MACRO 
                      (./engine/macros.a):00078                 ; param 1 : ObjID_
                      (./engine/macros.a):00079                 ; manual mount of an object from the resident page 1
                      (./engine/macros.a):00080                 lda   Obj_Index_Page+\1
                      (./engine/macros.a):00081                 _SetCartPageA
                      (./engine/macros.a):00082                 ldx   Obj_Index_Address+2*\1
                      (./engine/macros.a):00083          ENDM
                      (./engine/macros.a):00084         
0000                  (./engine/macros.a):00085         _RunObject MACRO 
                      (./engine/macros.a):00086                 ; param 1 : ObjID_
                      (./engine/macros.a):00087                 ; param 2 : Object data RAM address
                      (./engine/macros.a):00088                 ; manual launch of an object from the resident page 1
                      (./engine/macros.a):00089                 _MountObject \1
                      (./engine/macros.a):00090                 ldu   \2        
                      (./engine/macros.a):00091                 jsr   ,x
                      (./engine/macros.a):00092          ENDM
                      (./engine/macros.a):00093         
0000                  (./engine/macros.a):00094         _RunObjectRoutineA MACRO 
                      (./engine/macros.a):00095                 ; param 1 : ObjID_
                      (./engine/macros.a):00096                 ; param 2 : Object routine
                      (./engine/macros.a):00097                 ; manual launch of an object from the resident page 1
                      (./engine/macros.a):00098                 ; this object does not need or have a data structure for this routine
                      (./engine/macros.a):00099                 _MountObject \1
                      (./engine/macros.a):00100                 lda   \2        
                      (./engine/macros.a):00101                 jsr   ,x
                      (./engine/macros.a):00102          ENDM
                      (./engine/macros.a):00103         
0000                  (./engine/macros.a):00104         _RunObjectRoutineB MACRO 
                      (./engine/macros.a):00105                 ; param 1 : ObjID_
                      (./engine/macros.a):00106                 ; param 2 : Object routine
                      (./engine/macros.a):00107                 ; manual launch of an object from the resident page 1
                      (./engine/macros.a):00108                 ; this object does not need or have a data structure for this routine
                      (./engine/macros.a):00109                 _MountObject \1
                      (./engine/macros.a):00110                 ldb   \2        
                      (./engine/macros.a):00111                 jsr   ,x
                      (./engine/macros.a):00112          ENDM
                      (./engine/macros.a):00113         
0000                  (./engine/macros.a):00114         _asld MACRO
                      (./engine/macros.a):00115                 aslb
                      (./engine/macros.a):00116                 rola
                      (./engine/macros.a):00117          ENDM        
                      (./engine/macros.a):00118          
0000                  (./engine/macros.a):00119         _asrd MACRO
                      (./engine/macros.a):00120                 asra
                      (./engine/macros.a):00121                 rorb
                      (./engine/macros.a):00122          ENDM      
                      (./engine/macros.a):00123          
0000                  (./engine/macros.a):00124         _lsld MACRO
                      (./engine/macros.a):00125                 lslb
                      (./engine/macros.a):00126                 rola
                      (./engine/macros.a):00127          ENDM        
                      (./engine/macros.a):00128          
0000                  (./engine/macros.a):00129         _lsrd MACRO
                      (./engine/macros.a):00130                 lsra
                      (./engine/macros.a):00131                 rorb
                      (./engine/macros.a):00132          ENDM
                      (./engine/macros.a):00133          
0000                  (./engine/macros.a):00134         _rold MACRO
                      (./engine/macros.a):00135                 rolb
                      (./engine/macros.a):00136                 rola
                      (./engine/macros.a):00137          ENDM    
                      (./engine/macros.a):00138          
0000                  (./engine/macros.a):00139         _rord MACRO
                      (./engine/macros.a):00140                 rora
                      (./engine/macros.a):00141                 rorb
                      (./engine/macros.a):00142          ENDM
                      (./engine/macros.a):00143         
0000                  (./engine/macros.a):00144         _negd MACRO
                      (./engine/macros.a):00145                 nega
                      (./engine/macros.a):00146                 negb
                      (./engine/macros.a):00147                 sbca  #0
                      (./engine/macros.a):00148          ENDM
                      (./engine/macros.a):00149         
0000                  (./engine/macros.a):00150         _cba MACRO
                      (./engine/macros.a):00151                 pshs  b
                      (./engine/macros.a):00152                 cmpa  ,s+
                      (./engine/macros.a):00153          ENDM
                      (./engine/macros.a):00154         
0000                  (./engine/macros.a):00155         _aba MACRO
                      (./engine/macros.a):00156                 pshs  b
                      (./engine/macros.a):00157                 adda  ,s+
                      (./engine/macros.a):00158          ENDM
                      (./engine/macros.a):00159         
0000                  (./engine/macros.a):00160         _sba MACRO
                      (./engine/macros.a):00161                 pshs  b
                      (./engine/macros.a):00162                 suba  ,s+
                      (./engine/macros.a):00163          ENDM
                      (./engine/macros.a):00164         
0000                  (./engine/macros.a):00165         _cab MACRO
                      (./engine/macros.a):00166                 pshs  a
                      (./engine/macros.a):00167                 cmpb  ,s+
                      (./engine/macros.a):00168          ENDM
                      (./engine/macros.a):00169         
0000                  (./engine/macros.a):00170         _aab MACRO
                      (./engine/macros.a):00171                 pshs  a
                      (./engine/macros.a):00172                 addb  ,s+
                      (./engine/macros.a):00173          ENDM
                      (./engine/macros.a):00174         
0000                  (./engine/macros.a):00175         _sab MACRO
                      (./engine/macros.a):00176                 pshs  a
                      (./engine/macros.a):00177                 subb  ,s+
                      (./engine/macros.a):00178          ENDM
                      (C:\Users\bhrou\gi):00017                 
                      (C:\Users\bhrou\gi):00018                 org   $0000
                      (C:\Users\bhrou\gi):00019         
                      (C:\Users\bhrou\gi):00020         ********************************************************************************  
                      (C:\Users\bhrou\gi):00021         * Header Megarom T.2
                      (C:\Users\bhrou\gi):00022         ********************************************************************************
                      (C:\Users\bhrou\gi):00023         
0000 20               (C:\Users\bhrou\gi):00024                 fcb   $20                      * caractere espace
0001 53               (C:\Users\bhrou\gi):00025                 fcb   $53                      * S
0002 6F               (C:\Users\bhrou\gi):00026                 fcb   $6F                      * o        
0003 6E               (C:\Users\bhrou\gi):00027                 fcb   $6E                      * n        
0004 69               (C:\Users\bhrou\gi):00028                 fcb   $69                      * i
0005 63               (C:\Users\bhrou\gi):00029                 fcb   $63                      * c
0006 20               (C:\Users\bhrou\gi):00030                 fcb   $20                      *          
0007 74               (C:\Users\bhrou\gi):00031                 fcb   $74                      * t
0008 68               (C:\Users\bhrou\gi):00032                 fcb   $68                      * h
0009 65               (C:\Users\bhrou\gi):00033                 fcb   $65                      * e
000A 20               (C:\Users\bhrou\gi):00034                 fcb   $20                      *
000B 48               (C:\Users\bhrou\gi):00035                 fcb   $48                      * H
000C 65               (C:\Users\bhrou\gi):00036                 fcb   $65                      * e
000D 64               (C:\Users\bhrou\gi):00037                 fcb   $64                      * d
000E 67               (C:\Users\bhrou\gi):00038                 fcb   $67                      * g
000F 65               (C:\Users\bhrou\gi):00039                 fcb   $65                      * e
0010 68               (C:\Users\bhrou\gi):00040                 fcb   $68                      * h
0011 6F               (C:\Users\bhrou\gi):00041                 fcb   $6F                      * o
0012 67               (C:\Users\bhrou\gi):00042                 fcb   $67                      * g                               
0013 20               (C:\Users\bhrou\gi):00043                 fcb   $20                      *
0014 32               (C:\Users\bhrou\gi):00044                 fcb   $32                      * 2
0015 20               (C:\Users\bhrou\gi):00045                 fcb   $20                      *
0016 20               (C:\Users\bhrou\gi):00046                 fcb   $20                      *
0017 04               (C:\Users\bhrou\gi):00047                 fcb   $04                      * caractere de fin
                      (C:\Users\bhrou\gi):00048                 
0018 0000             (C:\Users\bhrou\gi):00049                 fdb   $0000                    * reserve TO7/70
001A A3               (C:\Users\bhrou\gi):00050                 fcb   $A3                      * checksum (somme des $19 premiers octets a laquelle on ajoute $55)
001B 00               (C:\Users\bhrou\gi):00051                 fcb   $00                      * libre
001C 0020             (C:\Users\bhrou\gi):00052                 fdb   PalFadeInit              * point entree (reset a chaud) 
001E 0020             (C:\Users\bhrou\gi):00053                 fdb   PalFadeInit              * point entree (reset a froid)
                      (C:\Users\bhrou\gi):00054         
                      (C:\Users\bhrou\gi):00055         * donnees pour le fondu de palette
                      (C:\Users\bhrou\gi):00056         ********************************************************************************
0020                  (C:\Users\bhrou\gi):00057         PalFadeInit
0020 8661             (C:\Users\bhrou\gi):00058                 lda   #$61
0022 1F8B             (C:\Users\bhrou\gi):00059                 tfr   a,dp                     * positionne la direct page
                      (C:\Users\bhrou\gi):00060                 
     6100             (C:\Users\bhrou\gi):00061         pal_from equ $6100
0024 8E6100           (C:\Users\bhrou\gi):00062                 ldx   #pal_from
0027 CC0000           (C:\Users\bhrou\gi):00063                 ldd   #$0000                   * couleur $00 Noir (Thomson) => 06 change bordure
002A ED81             (C:\Users\bhrou\gi):00064                 std   ,x++ 
002C CCF00F           (C:\Users\bhrou\gi):00065                 ldd   #$F00F                   * couleur $0C Turquoise (Bordure ecran)
002F ED81             (C:\Users\bhrou\gi):00066                 std   ,x++        
0031 CCFF0F           (C:\Users\bhrou\gi):00067                 ldd   #$FF0F                   * couleur $0E Blanc (TO8)
0034 ED81             (C:\Users\bhrou\gi):00068                 std   ,x++        
0036 CC7707           (C:\Users\bhrou\gi):00069                 ldd   #$7707                   * couleur $10 Gris (Fond Bas)
0039 ED81             (C:\Users\bhrou\gi):00070                 std   ,x++        
003B CCAA03           (C:\Users\bhrou\gi):00071                 ldd   #$AA03                   * couleur $16 Jaune (Interieur case)
003E ED81             (C:\Users\bhrou\gi):00072                 std   ,x++        
0040 CC330A           (C:\Users\bhrou\gi):00073                 ldd   #$330A                   * couleur $18 Mauve (Fond TO8)
0043 ED81             (C:\Users\bhrou\gi):00074                 std   ,x++        
                      (C:\Users\bhrou\gi):00075                                                                                
     610C             (C:\Users\bhrou\gi):00076         pal_len equ pal_from+12                              
0045 CC0C0E           (C:\Users\bhrou\gi):00077                 ldd   #$0C0E                   * pour chaque couleur on defini un index limite
0048 ED81             (C:\Users\bhrou\gi):00078                 std   ,x++                     * (exclu) de chargement. ex: 0C, 0E, ... 
004A CC1016           (C:\Users\bhrou\gi):00079                 ldd   #$1016                   * la premiere couleur de PAL_FROM est chargee
004D ED81             (C:\Users\bhrou\gi):00080                 std   ,x++                     * pour les couleurs 0(00) a 5(0A)
004F CC1820           (C:\Users\bhrou\gi):00081                 ldd   #$1820                   * la seconde couleur de PAL_FORM  est chargee
0052 ED81             (C:\Users\bhrou\gi):00082                 std   ,x++                     * pour la couleur 6(0C)
     6112             (C:\Users\bhrou\gi):00083         end_pal_len equ pal_len+6 
                      (C:\Users\bhrou\gi):00084            
     6112             (C:\Users\bhrou\gi):00085         pal_cycles equ pal_len+6
0054 8610             (C:\Users\bhrou\gi):00086                 lda   #$10                     * nombre de frames de la transition (VSYNC)
0056 A780             (C:\Users\bhrou\gi):00087                 sta   ,x+
                      (C:\Users\bhrou\gi):00088                                                                                
     6113             (C:\Users\bhrou\gi):00089         pal_mask equ pal_cycles+1                              
0058 860F             (C:\Users\bhrou\gi):00090                 lda   #$0F                     * masque pour l'aternance du traitemet vert/rouge
005A A780             (C:\Users\bhrou\gi):00091                 sta   ,x+                
                      (C:\Users\bhrou\gi):00092                 
     6114             (C:\Users\bhrou\gi):00093         pal_buffer equ pal_mask+1                           
005C 8642             (C:\Users\bhrou\gi):00094                 lda   #$42                     * buffer de comparaison
005E A780             (C:\Users\bhrou\gi):00095                 sta   ,x+        
0060 8641             (C:\Users\bhrou\gi):00096                 lda   #$41                     * buffer de comparaison
0062 A780             (C:\Users\bhrou\gi):00097                 sta   ,x+        
                      (C:\Users\bhrou\gi):00098                                                                                
     6116             (C:\Users\bhrou\gi):00099         pal_idx equ pal_buffer+2                                 
0064 8600             (C:\Users\bhrou\gi):00100                 lda   #$00                     * index de la couleur courante dans le traitement
0066 A784             (C:\Users\bhrou\gi):00101                 sta   ,x        
                      (C:\Users\bhrou\gi):00102                 
                      (C:\Users\bhrou\gi):00103         ********************************************************************************  
                      (C:\Users\bhrou\gi):00104         * Fondu palette
                      (C:\Users\bhrou\gi):00105         ********************************************************************************
                      (C:\Users\bhrou\gi):00106         
0068                  (C:\Users\bhrou\gi):00107         PalFade        
0068 0F16             (C:\Users\bhrou\gi):00108                 clr   <pal_idx
006A 8E610C           (C:\Users\bhrou\gi):00109                 ldx   #pal_len                 * index limite de chargement pour couleur courante 
006D CE6100           (C:\Users\bhrou\gi):00110                 ldu   #pal_from                * chargement pointeur valeur des couleurs actuelles
                      (C:\Users\bhrou\gi):00111                 
0070                  (C:\Users\bhrou\gi):00112         Vsync_1                                
0070 7DE7E7           (C:\Users\bhrou\gi):00113                 tst   $E7E7                    * le faisceau n'est pas dans l'ecran utile
0073 2AFB             (C:\Users\bhrou\gi):00114                 bpl   Vsync_1                  * tant que le bit est a 0 on boucle
0075                  (C:\Users\bhrou\gi):00115         Vsync_2                                 
0075 7DE7E7           (C:\Users\bhrou\gi):00116                 tst   $E7E7                    * le faisceau est dans l'ecran utile
0078 2BFB             (C:\Users\bhrou\gi):00117                 bmi   Vsync_2                  * tant que le bit est a 1 on boucle
                      (C:\Users\bhrou\gi):00118                 
007A 108E0140         (C:\Users\bhrou\gi):00119                 ldy   #0320                    * 40 lignes * 8 cycles
007E                  (C:\Users\bhrou\gi):00120         Tempo        
007E 313F             (C:\Users\bhrou\gi):00121                 leay  -1,y
0080 26FC             (C:\Users\bhrou\gi):00122                 bne   Tempo                    * tempo pour etre dans la bordure invisible   
                      (C:\Users\bhrou\gi):00123                                                                                 
0082 0A12             (C:\Users\bhrou\gi):00124                 dec   <pal_cycles              * decremente le compteur du nombre de frame
0084 2756             (C:\Users\bhrou\gi):00125                 beq   InitVideo                * si termine
                      (C:\Users\bhrou\gi):00126                 
0086                  (C:\Users\bhrou\gi):00127         PalRun
0086 A6C4             (C:\Users\bhrou\gi):00128                 lda   ,u                                   * chargement de la composante verte et rouge
0088 9413             (C:\Users\bhrou\gi):00129                 anda  <pal_mask                * on efface la valeur vert ou rouge par masque
008A C6FF             (C:\Users\bhrou\gi):00130                 ldb   #$FF                     * composante verte et rouge couleur cible
008C D413             (C:\Users\bhrou\gi):00131                 andb  <pal_mask                * on efface la valeur vert ou rouge par masque
008E D714             (C:\Users\bhrou\gi):00132                 stb   <pal_buffer              * on stocke la valeur cible pour comparaison
0090 C611             (C:\Users\bhrou\gi):00133                 ldb   #$11                     * preparation de la valeur d'increment de couleur
0092 D413             (C:\Users\bhrou\gi):00134                 andb  <pal_mask                * on efface la valeur non utile par masque
0094 D715             (C:\Users\bhrou\gi):00135                 stb   <pal_buffer+1            * on stocke la valeur pour ADD ou SUB ulterieur
0096 9114             (C:\Users\bhrou\gi):00136                 cmpa  <pal_buffer              * comparaison de la composante courante et cible
0098 270E             (C:\Users\bhrou\gi):00137                 beq   PalVRSuivante            * si composante est egale a la cible on passe
009A 2206             (C:\Users\bhrou\gi):00138                 bhi   PalVRDec                 * si la composante est superieure on branche
009C A6C4             (C:\Users\bhrou\gi):00139                 lda   ,u                       * on recharge la valeur avec vert et rouge
009E 9B15             (C:\Users\bhrou\gi):00140                 adda  <pal_buffer+1            * on incremente la composante verte ou rouge
00A0 2004             (C:\Users\bhrou\gi):00141                 bra   PalVRSave                * on branche pour sauvegarder
00A2                  (C:\Users\bhrou\gi):00142         PalVRDec
00A2 A6C4             (C:\Users\bhrou\gi):00143                 lda   ,u                       * on recharge la valeur avec vert et rouge
00A4 9015             (C:\Users\bhrou\gi):00144                 suba  <pal_buffer+1            * on decremente la composante verte ou rouge
00A6                  (C:\Users\bhrou\gi):00145         PalVRSave                             
00A6 A7C4             (C:\Users\bhrou\gi):00146                 sta   ,u                       * sauvegarde de la nouvelle valeur vert ou rouge
00A8                  (C:\Users\bhrou\gi):00147         PalVRSuivante                         
00A8 0313             (C:\Users\bhrou\gi):00148                 com   <pal_mask                * inversion du masque pour traiter l'autre semioctet
00AA 2BDA             (C:\Users\bhrou\gi):00149                 bmi   PalRun                   * si on traite $F0 on branche sinon on continue
                      (C:\Users\bhrou\gi):00150                     
00AC                  (C:\Users\bhrou\gi):00151         SetPalBleu
00AC E641             (C:\Users\bhrou\gi):00152                 ldb   1,u                                   * chargement composante bleue courante
00AE C10F             (C:\Users\bhrou\gi):00153                 cmpb  #$0F                     * comparaison composante courante et cible
00B0 2708             (C:\Users\bhrou\gi):00154                 beq   SetPalNext               * si composante est egale a la cible on passe
00B2 2203             (C:\Users\bhrou\gi):00155                 bhi   SetPalBleudec            * si la composante est superieure on branche
00B4 5C               (C:\Users\bhrou\gi):00156                 incb                           * on incremente la composante bleue
00B5 2001             (C:\Users\bhrou\gi):00157                 bra   SetPalSaveBleu           * on branche pour sauvegarder
00B7                  (C:\Users\bhrou\gi):00158         SetPalBleudec                       
00B7 5A               (C:\Users\bhrou\gi):00159                 decb                           * on decremente la composante bleue
00B8                  (C:\Users\bhrou\gi):00160         SetPalSaveBleu                         
00B8 E741             (C:\Users\bhrou\gi):00161                 stb   1,u                      * sauvegarde de la nouvelle valeur bleue
                      (C:\Users\bhrou\gi):00162                                                                                
00BA                  (C:\Users\bhrou\gi):00163         SetPalNext                             
00BA 9616             (C:\Users\bhrou\gi):00164                 lda   <pal_idx                 * Lecture index couleur
00BC B7E7DB           (C:\Users\bhrou\gi):00165                 sta   $E7DB                    * selectionne l'indice de couleur a ecrire
00BF 8B02             (C:\Users\bhrou\gi):00166                 adda  #$02                     * increment de l'indice de couleur (x2)
00C1 9716             (C:\Users\bhrou\gi):00167                 sta   <pal_idx                 * stockage du nouvel index
00C3 A6C4             (C:\Users\bhrou\gi):00168                 lda   ,u                       * chargement de la nouvelle couleur courante
00C5 B7E7DA           (C:\Users\bhrou\gi):00169                 sta   $E7DA                    * positionne la nouvelle couleur (Vert et Rouge)
00C8 F7E7DA           (C:\Users\bhrou\gi):00170                 stb   $E7DA                    * positionne la nouvelle couleur (Bleu)
00CB 9616             (C:\Users\bhrou\gi):00171                 lda   <pal_idx                 * rechargement de l'index couleur
00CD A184             (C:\Users\bhrou\gi):00172                 cmpa  ,x                       * comparaison avec l'index limite pour cette couleur
00CF 26E9             (C:\Users\bhrou\gi):00173                 bne   SetPalNext               * si inferieur on continue avec la meme couleur
00D1 3342             (C:\Users\bhrou\gi):00174                 leau  2,u                      * on avance le pointeur vers la nouvelle couleur
00D3 3001             (C:\Users\bhrou\gi):00175                 leax  1,x                      * on avance le pointeur vers la nouvelle limite
00D5 8C6112           (C:\Users\bhrou\gi):00176                 cmpx  #end_pal_len             * test de fin de liste
00D8 26AC             (C:\Users\bhrou\gi):00177                 bne   PalRun                   * on reboucle si fin de liste pas atteinte
00DA 208C             (C:\Users\bhrou\gi):00178                 bra   PalFade
                      (C:\Users\bhrou\gi):00179                 
                      (C:\Users\bhrou\gi):00180         ********************************************************************************  
                      (C:\Users\bhrou\gi):00181         * Initialisation du mode video
                      (C:\Users\bhrou\gi):00182         ********************************************************************************
00DC                  (C:\Users\bhrou\gi):00183         InitVideo
00DC 1A50             (C:\Users\bhrou\gi):00184                 orcc  #$50                     * desactive les interruptions
00DE 10CE9F00         (C:\Users\bhrou\gi):00185                 lds   #glb_system_stack        * positionnement pile systeme
00E2 867B             (C:\Users\bhrou\gi):00186                 lda   #$7B                     * passage en mode 160x200x16c
00E4 B7E7DC           (C:\Users\bhrou\gi):00187                 sta   $E7DC
                      (C:\Users\bhrou\gi):00188           
                      (C:\Users\bhrou\gi):00189         ********************************************************************************
                      (C:\Users\bhrou\gi):00190         * Initialisation de la commutation de page pour l espace Donnees (Mode registre)
                      (C:\Users\bhrou\gi):00191         ********************************************************************************
00E7 F66081           (C:\Users\bhrou\gi):00192                 ldb   $6081                    * $6081 est l'image "lisible" de $E7E7
00EA CA10             (C:\Users\bhrou\gi):00193                 orb   #$10                     * positionne le bit d4 a 1
00EC F76081           (C:\Users\bhrou\gi):00194                 stb   $6081                    * maintient une image coherente de $E7E7
00EF F7E7E7           (C:\Users\bhrou\gi):00195                 stb   $E7E7                    * bit d4 a 1 pour pages donnees en mode registre
                      (C:\Users\bhrou\gi):00196          
                      (C:\Users\bhrou\gi):00197         * Positionnement de la page 3 a l'ecran et de la page 2 en zone A000-DFFF
                      (C:\Users\bhrou\gi):00198         ***********************************************************
00F2 CCC002           (C:\Users\bhrou\gi):00199                 ldd   #$C002                   ; page 3, couleur de cadre 0 et page 2
00F5 B7E7DD           (C:\Users\bhrou\gi):00200                 sta   $E7DD                    ; affiche la page a l'ecran
00F8 F7E7E5           (C:\Users\bhrou\gi):00201                 stb   $E7E5                    ; visible dans l'espace donnees
                      (C:\Users\bhrou\gi):00202                 
00FB 86AA             (C:\Users\bhrou\gi):00203                 lda   #$AA
00FD B70555           (C:\Users\bhrou\gi):00204                 sta   $0555
0100 8655             (C:\Users\bhrou\gi):00205                 lda   #$55
0102 B702AA           (C:\Users\bhrou\gi):00206                 sta   $02AA
0105 86B0             (C:\Users\bhrou\gi):00207                 lda   #$B0
0107 B70555           (C:\Users\bhrou\gi):00208                 sta   $0555
010A 8602             (C:\Users\bhrou\gi):00209                 lda   #$02                     ; mode neutre pour la T.2
010C B70556           (C:\Users\bhrou\gi):00210                 sta   $0556
                      (C:\Users\bhrou\gi):00211                 
                      (C:\Users\bhrou\gi):00212                 _ldd  gmboot,$FF               ; level to boot and flag for first level load
010F CC00FF           (             _ldd):00001                 ldd   #((gmboot)*256)+$FF
